
build/oroca_bldc.elf:     file format elf32-littlearm


Disassembly of section .text:

0800c000 <Reset_Handler>:
 800c000:	b672      	cpsid	i
 800c002:	4833      	ldr	r0, [pc, #204]	; (800c0d0 <endfiniloop+0x4>)
 800c004:	f380 8809 	msr	PSP, r0
 800c008:	f240 0000 	movw	r0, #0
 800c00c:	f2cc 0000 	movt	r0, #49152	; 0xc000
 800c010:	f64e 7134 	movw	r1, #61236	; 0xef34
 800c014:	f2ce 0100 	movt	r1, #57344	; 0xe000
 800c018:	6008      	str	r0, [r1, #0]
 800c01a:	f3bf 8f4f 	dsb	sy
 800c01e:	f3bf 8f6f 	isb	sy
 800c022:	f240 0000 	movw	r0, #0
 800c026:	f2c0 00f0 	movt	r0, #240	; 0xf0
 800c02a:	f64e 5188 	movw	r1, #60808	; 0xed88
 800c02e:	f2ce 0100 	movt	r1, #57344	; 0xe000
 800c032:	6008      	str	r0, [r1, #0]
 800c034:	f3bf 8f4f 	dsb	sy
 800c038:	f3bf 8f6f 	isb	sy
 800c03c:	f04f 0000 	mov.w	r0, #0
 800c040:	eee1 0a10 	vmsr	fpscr, r0
 800c044:	f64e 713c 	movw	r1, #61244	; 0xef3c
 800c048:	f2ce 0100 	movt	r1, #57344	; 0xe000
 800c04c:	6008      	str	r0, [r1, #0]
 800c04e:	2006      	movs	r0, #6
 800c050:	f380 8814 	msr	CONTROL, r0
 800c054:	f3bf 8f6f 	isb	sy
 800c058:	f000 fdea 	bl	800cc30 <__core_init>
 800c05c:	f003 fa40 	bl	800f4e0 <__early_init>
 800c060:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
 800c064:	491b      	ldr	r1, [pc, #108]	; (800c0d4 <endfiniloop+0x8>)
 800c066:	4a1c      	ldr	r2, [pc, #112]	; (800c0d8 <endfiniloop+0xc>)

0800c068 <msloop>:
 800c068:	4291      	cmp	r1, r2
 800c06a:	bf3c      	itt	cc
 800c06c:	f841 0b04 	strcc.w	r0, [r1], #4
 800c070:	e7fa      	bcc.n	800c068 <msloop>
 800c072:	491a      	ldr	r1, [pc, #104]	; (800c0dc <endfiniloop+0x10>)
 800c074:	4a16      	ldr	r2, [pc, #88]	; (800c0d0 <endfiniloop+0x4>)

0800c076 <psloop>:
 800c076:	4291      	cmp	r1, r2
 800c078:	bf3c      	itt	cc
 800c07a:	f841 0b04 	strcc.w	r0, [r1], #4
 800c07e:	e7fa      	bcc.n	800c076 <psloop>
 800c080:	4917      	ldr	r1, [pc, #92]	; (800c0e0 <endfiniloop+0x14>)
 800c082:	4a18      	ldr	r2, [pc, #96]	; (800c0e4 <endfiniloop+0x18>)
 800c084:	4b18      	ldr	r3, [pc, #96]	; (800c0e8 <endfiniloop+0x1c>)

0800c086 <dloop>:
 800c086:	429a      	cmp	r2, r3
 800c088:	bf3e      	ittt	cc
 800c08a:	f851 0b04 	ldrcc.w	r0, [r1], #4
 800c08e:	f842 0b04 	strcc.w	r0, [r2], #4
 800c092:	e7f8      	bcc.n	800c086 <dloop>
 800c094:	2000      	movs	r0, #0
 800c096:	4915      	ldr	r1, [pc, #84]	; (800c0ec <endfiniloop+0x20>)
 800c098:	4a15      	ldr	r2, [pc, #84]	; (800c0f0 <endfiniloop+0x24>)

0800c09a <bloop>:
 800c09a:	4291      	cmp	r1, r2
 800c09c:	bf3c      	itt	cc
 800c09e:	f841 0b04 	strcc.w	r0, [r1], #4
 800c0a2:	e7fa      	bcc.n	800c09a <bloop>
 800c0a4:	f000 fdcc 	bl	800cc40 <__late_init>
 800c0a8:	4c12      	ldr	r4, [pc, #72]	; (800c0f4 <endfiniloop+0x28>)
 800c0aa:	4d13      	ldr	r5, [pc, #76]	; (800c0f8 <endfiniloop+0x2c>)

0800c0ac <initloop>:
 800c0ac:	42ac      	cmp	r4, r5
 800c0ae:	da03      	bge.n	800c0b8 <endinitloop>
 800c0b0:	f854 1b04 	ldr.w	r1, [r4], #4
 800c0b4:	4788      	blx	r1
 800c0b6:	e7f9      	b.n	800c0ac <initloop>

0800c0b8 <endinitloop>:
 800c0b8:	f005 fb72 	bl	80117a0 <main>
 800c0bc:	4c0f      	ldr	r4, [pc, #60]	; (800c0fc <endfiniloop+0x30>)
 800c0be:	4d10      	ldr	r5, [pc, #64]	; (800c100 <endfiniloop+0x34>)

0800c0c0 <finiloop>:
 800c0c0:	42ac      	cmp	r4, r5
 800c0c2:	da03      	bge.n	800c0cc <endfiniloop>
 800c0c4:	f854 1b04 	ldr.w	r1, [r4], #4
 800c0c8:	4788      	blx	r1
 800c0ca:	e7f9      	b.n	800c0c0 <finiloop>

0800c0cc <endfiniloop>:
 800c0cc:	f000 bdc0 	b.w	800cc50 <__default_exit>
 800c0d0:	20000800 	.word	0x20000800
 800c0d4:	20000000 	.word	0x20000000
 800c0d8:	20000400 	.word	0x20000400
 800c0dc:	20000400 	.word	0x20000400
 800c0e0:	08014658 	.word	0x08014658
 800c0e4:	20000800 	.word	0x20000800
 800c0e8:	20000c40 	.word	0x20000c40
 800c0ec:	20000c40 	.word	0x20000c40
 800c0f0:	20002bb8 	.word	0x20002bb8
 800c0f4:	0800c000 	.word	0x0800c000
 800c0f8:	0800c000 	.word	0x0800c000
 800c0fc:	0800c000 	.word	0x0800c000
 800c100:	0800c000 	.word	0x0800c000
	...

0800c110 <_port_switch>:
 800c110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c114:	ed2d 8a10 	vpush	{s16-s31}
 800c118:	f8c1 d00c 	str.w	sp, [r1, #12]
 800c11c:	f8d0 d00c 	ldr.w	sp, [r0, #12]
 800c120:	ecbd 8a10 	vpop	{s16-s31}
 800c124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c128 <_port_thread_start>:
 800c128:	2300      	movs	r3, #0
 800c12a:	f383 8811 	msr	BASEPRI, r3
 800c12e:	4628      	mov	r0, r5
 800c130:	47a0      	blx	r4
 800c132:	2000      	movs	r0, #0
 800c134:	f001 f844 	bl	800d1c0 <chThdExit>

0800c138 <_port_switch_from_isr>:
 800c138:	f000 ffaa 	bl	800d090 <chSchDoReschedule>

0800c13c <_port_exit_from_isr>:
 800c13c:	df00      	svc	0
 800c13e:	e7fe      	b.n	800c13e <_port_exit_from_isr+0x2>

0800c140 <__aeabi_drsub>:
 800c140:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800c144:	e002      	b.n	800c14c <__adddf3>
 800c146:	bf00      	nop

0800c148 <__aeabi_dsub>:
 800c148:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800c14c <__adddf3>:
 800c14c:	b530      	push	{r4, r5, lr}
 800c14e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800c152:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800c156:	ea94 0f05 	teq	r4, r5
 800c15a:	bf08      	it	eq
 800c15c:	ea90 0f02 	teqeq	r0, r2
 800c160:	bf1f      	itttt	ne
 800c162:	ea54 0c00 	orrsne.w	ip, r4, r0
 800c166:	ea55 0c02 	orrsne.w	ip, r5, r2
 800c16a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800c16e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800c172:	f000 80e2 	beq.w	800c33a <__adddf3+0x1ee>
 800c176:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800c17a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800c17e:	bfb8      	it	lt
 800c180:	426d      	neglt	r5, r5
 800c182:	dd0c      	ble.n	800c19e <__adddf3+0x52>
 800c184:	442c      	add	r4, r5
 800c186:	ea80 0202 	eor.w	r2, r0, r2
 800c18a:	ea81 0303 	eor.w	r3, r1, r3
 800c18e:	ea82 0000 	eor.w	r0, r2, r0
 800c192:	ea83 0101 	eor.w	r1, r3, r1
 800c196:	ea80 0202 	eor.w	r2, r0, r2
 800c19a:	ea81 0303 	eor.w	r3, r1, r3
 800c19e:	2d36      	cmp	r5, #54	; 0x36
 800c1a0:	bf88      	it	hi
 800c1a2:	bd30      	pophi	{r4, r5, pc}
 800c1a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800c1a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800c1ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800c1b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800c1b4:	d002      	beq.n	800c1bc <__adddf3+0x70>
 800c1b6:	4240      	negs	r0, r0
 800c1b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800c1bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800c1c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800c1c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800c1c8:	d002      	beq.n	800c1d0 <__adddf3+0x84>
 800c1ca:	4252      	negs	r2, r2
 800c1cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800c1d0:	ea94 0f05 	teq	r4, r5
 800c1d4:	f000 80a7 	beq.w	800c326 <__adddf3+0x1da>
 800c1d8:	f1a4 0401 	sub.w	r4, r4, #1
 800c1dc:	f1d5 0e20 	rsbs	lr, r5, #32
 800c1e0:	db0d      	blt.n	800c1fe <__adddf3+0xb2>
 800c1e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 800c1e6:	fa22 f205 	lsr.w	r2, r2, r5
 800c1ea:	1880      	adds	r0, r0, r2
 800c1ec:	f141 0100 	adc.w	r1, r1, #0
 800c1f0:	fa03 f20e 	lsl.w	r2, r3, lr
 800c1f4:	1880      	adds	r0, r0, r2
 800c1f6:	fa43 f305 	asr.w	r3, r3, r5
 800c1fa:	4159      	adcs	r1, r3
 800c1fc:	e00e      	b.n	800c21c <__adddf3+0xd0>
 800c1fe:	f1a5 0520 	sub.w	r5, r5, #32
 800c202:	f10e 0e20 	add.w	lr, lr, #32
 800c206:	2a01      	cmp	r2, #1
 800c208:	fa03 fc0e 	lsl.w	ip, r3, lr
 800c20c:	bf28      	it	cs
 800c20e:	f04c 0c02 	orrcs.w	ip, ip, #2
 800c212:	fa43 f305 	asr.w	r3, r3, r5
 800c216:	18c0      	adds	r0, r0, r3
 800c218:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800c21c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800c220:	d507      	bpl.n	800c232 <__adddf3+0xe6>
 800c222:	f04f 0e00 	mov.w	lr, #0
 800c226:	f1dc 0c00 	rsbs	ip, ip, #0
 800c22a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800c22e:	eb6e 0101 	sbc.w	r1, lr, r1
 800c232:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800c236:	d31b      	bcc.n	800c270 <__adddf3+0x124>
 800c238:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800c23c:	d30c      	bcc.n	800c258 <__adddf3+0x10c>
 800c23e:	0849      	lsrs	r1, r1, #1
 800c240:	ea5f 0030 	movs.w	r0, r0, rrx
 800c244:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800c248:	f104 0401 	add.w	r4, r4, #1
 800c24c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800c250:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800c254:	f080 809a 	bcs.w	800c38c <__adddf3+0x240>
 800c258:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800c25c:	bf08      	it	eq
 800c25e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800c262:	f150 0000 	adcs.w	r0, r0, #0
 800c266:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800c26a:	ea41 0105 	orr.w	r1, r1, r5
 800c26e:	bd30      	pop	{r4, r5, pc}
 800c270:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800c274:	4140      	adcs	r0, r0
 800c276:	eb41 0101 	adc.w	r1, r1, r1
 800c27a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800c27e:	f1a4 0401 	sub.w	r4, r4, #1
 800c282:	d1e9      	bne.n	800c258 <__adddf3+0x10c>
 800c284:	f091 0f00 	teq	r1, #0
 800c288:	bf04      	itt	eq
 800c28a:	4601      	moveq	r1, r0
 800c28c:	2000      	moveq	r0, #0
 800c28e:	fab1 f381 	clz	r3, r1
 800c292:	bf08      	it	eq
 800c294:	3320      	addeq	r3, #32
 800c296:	f1a3 030b 	sub.w	r3, r3, #11
 800c29a:	f1b3 0220 	subs.w	r2, r3, #32
 800c29e:	da0c      	bge.n	800c2ba <__adddf3+0x16e>
 800c2a0:	320c      	adds	r2, #12
 800c2a2:	dd08      	ble.n	800c2b6 <__adddf3+0x16a>
 800c2a4:	f102 0c14 	add.w	ip, r2, #20
 800c2a8:	f1c2 020c 	rsb	r2, r2, #12
 800c2ac:	fa01 f00c 	lsl.w	r0, r1, ip
 800c2b0:	fa21 f102 	lsr.w	r1, r1, r2
 800c2b4:	e00c      	b.n	800c2d0 <__adddf3+0x184>
 800c2b6:	f102 0214 	add.w	r2, r2, #20
 800c2ba:	bfd8      	it	le
 800c2bc:	f1c2 0c20 	rsble	ip, r2, #32
 800c2c0:	fa01 f102 	lsl.w	r1, r1, r2
 800c2c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 800c2c8:	bfdc      	itt	le
 800c2ca:	ea41 010c 	orrle.w	r1, r1, ip
 800c2ce:	4090      	lslle	r0, r2
 800c2d0:	1ae4      	subs	r4, r4, r3
 800c2d2:	bfa2      	ittt	ge
 800c2d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800c2d8:	4329      	orrge	r1, r5
 800c2da:	bd30      	popge	{r4, r5, pc}
 800c2dc:	ea6f 0404 	mvn.w	r4, r4
 800c2e0:	3c1f      	subs	r4, #31
 800c2e2:	da1c      	bge.n	800c31e <__adddf3+0x1d2>
 800c2e4:	340c      	adds	r4, #12
 800c2e6:	dc0e      	bgt.n	800c306 <__adddf3+0x1ba>
 800c2e8:	f104 0414 	add.w	r4, r4, #20
 800c2ec:	f1c4 0220 	rsb	r2, r4, #32
 800c2f0:	fa20 f004 	lsr.w	r0, r0, r4
 800c2f4:	fa01 f302 	lsl.w	r3, r1, r2
 800c2f8:	ea40 0003 	orr.w	r0, r0, r3
 800c2fc:	fa21 f304 	lsr.w	r3, r1, r4
 800c300:	ea45 0103 	orr.w	r1, r5, r3
 800c304:	bd30      	pop	{r4, r5, pc}
 800c306:	f1c4 040c 	rsb	r4, r4, #12
 800c30a:	f1c4 0220 	rsb	r2, r4, #32
 800c30e:	fa20 f002 	lsr.w	r0, r0, r2
 800c312:	fa01 f304 	lsl.w	r3, r1, r4
 800c316:	ea40 0003 	orr.w	r0, r0, r3
 800c31a:	4629      	mov	r1, r5
 800c31c:	bd30      	pop	{r4, r5, pc}
 800c31e:	fa21 f004 	lsr.w	r0, r1, r4
 800c322:	4629      	mov	r1, r5
 800c324:	bd30      	pop	{r4, r5, pc}
 800c326:	f094 0f00 	teq	r4, #0
 800c32a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800c32e:	bf06      	itte	eq
 800c330:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800c334:	3401      	addeq	r4, #1
 800c336:	3d01      	subne	r5, #1
 800c338:	e74e      	b.n	800c1d8 <__adddf3+0x8c>
 800c33a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800c33e:	bf18      	it	ne
 800c340:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800c344:	d029      	beq.n	800c39a <__adddf3+0x24e>
 800c346:	ea94 0f05 	teq	r4, r5
 800c34a:	bf08      	it	eq
 800c34c:	ea90 0f02 	teqeq	r0, r2
 800c350:	d005      	beq.n	800c35e <__adddf3+0x212>
 800c352:	ea54 0c00 	orrs.w	ip, r4, r0
 800c356:	bf04      	itt	eq
 800c358:	4619      	moveq	r1, r3
 800c35a:	4610      	moveq	r0, r2
 800c35c:	bd30      	pop	{r4, r5, pc}
 800c35e:	ea91 0f03 	teq	r1, r3
 800c362:	bf1e      	ittt	ne
 800c364:	2100      	movne	r1, #0
 800c366:	2000      	movne	r0, #0
 800c368:	bd30      	popne	{r4, r5, pc}
 800c36a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800c36e:	d105      	bne.n	800c37c <__adddf3+0x230>
 800c370:	0040      	lsls	r0, r0, #1
 800c372:	4149      	adcs	r1, r1
 800c374:	bf28      	it	cs
 800c376:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800c37a:	bd30      	pop	{r4, r5, pc}
 800c37c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800c380:	bf3c      	itt	cc
 800c382:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800c386:	bd30      	popcc	{r4, r5, pc}
 800c388:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800c38c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800c390:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c394:	f04f 0000 	mov.w	r0, #0
 800c398:	bd30      	pop	{r4, r5, pc}
 800c39a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800c39e:	bf1a      	itte	ne
 800c3a0:	4619      	movne	r1, r3
 800c3a2:	4610      	movne	r0, r2
 800c3a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800c3a8:	bf1c      	itt	ne
 800c3aa:	460b      	movne	r3, r1
 800c3ac:	4602      	movne	r2, r0
 800c3ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800c3b2:	bf06      	itte	eq
 800c3b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800c3b8:	ea91 0f03 	teqeq	r1, r3
 800c3bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800c3c0:	bd30      	pop	{r4, r5, pc}
 800c3c2:	bf00      	nop

0800c3c4 <__aeabi_ui2d>:
 800c3c4:	f090 0f00 	teq	r0, #0
 800c3c8:	bf04      	itt	eq
 800c3ca:	2100      	moveq	r1, #0
 800c3cc:	4770      	bxeq	lr
 800c3ce:	b530      	push	{r4, r5, lr}
 800c3d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800c3d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800c3d8:	f04f 0500 	mov.w	r5, #0
 800c3dc:	f04f 0100 	mov.w	r1, #0
 800c3e0:	e750      	b.n	800c284 <__adddf3+0x138>
 800c3e2:	bf00      	nop

0800c3e4 <__aeabi_i2d>:
 800c3e4:	f090 0f00 	teq	r0, #0
 800c3e8:	bf04      	itt	eq
 800c3ea:	2100      	moveq	r1, #0
 800c3ec:	4770      	bxeq	lr
 800c3ee:	b530      	push	{r4, r5, lr}
 800c3f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800c3f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800c3f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800c3fc:	bf48      	it	mi
 800c3fe:	4240      	negmi	r0, r0
 800c400:	f04f 0100 	mov.w	r1, #0
 800c404:	e73e      	b.n	800c284 <__adddf3+0x138>
 800c406:	bf00      	nop

0800c408 <__aeabi_f2d>:
 800c408:	0042      	lsls	r2, r0, #1
 800c40a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800c40e:	ea4f 0131 	mov.w	r1, r1, rrx
 800c412:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800c416:	bf1f      	itttt	ne
 800c418:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800c41c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800c420:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800c424:	4770      	bxne	lr
 800c426:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800c42a:	bf08      	it	eq
 800c42c:	4770      	bxeq	lr
 800c42e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800c432:	bf04      	itt	eq
 800c434:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800c438:	4770      	bxeq	lr
 800c43a:	b530      	push	{r4, r5, lr}
 800c43c:	f44f 7460 	mov.w	r4, #896	; 0x380
 800c440:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800c444:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800c448:	e71c      	b.n	800c284 <__adddf3+0x138>
 800c44a:	bf00      	nop

0800c44c <__aeabi_ul2d>:
 800c44c:	ea50 0201 	orrs.w	r2, r0, r1
 800c450:	bf08      	it	eq
 800c452:	4770      	bxeq	lr
 800c454:	b530      	push	{r4, r5, lr}
 800c456:	f04f 0500 	mov.w	r5, #0
 800c45a:	e00a      	b.n	800c472 <__aeabi_l2d+0x16>

0800c45c <__aeabi_l2d>:
 800c45c:	ea50 0201 	orrs.w	r2, r0, r1
 800c460:	bf08      	it	eq
 800c462:	4770      	bxeq	lr
 800c464:	b530      	push	{r4, r5, lr}
 800c466:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800c46a:	d502      	bpl.n	800c472 <__aeabi_l2d+0x16>
 800c46c:	4240      	negs	r0, r0
 800c46e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800c472:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800c476:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800c47a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800c47e:	f43f aed8 	beq.w	800c232 <__adddf3+0xe6>
 800c482:	f04f 0203 	mov.w	r2, #3
 800c486:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800c48a:	bf18      	it	ne
 800c48c:	3203      	addne	r2, #3
 800c48e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800c492:	bf18      	it	ne
 800c494:	3203      	addne	r2, #3
 800c496:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800c49a:	f1c2 0320 	rsb	r3, r2, #32
 800c49e:	fa00 fc03 	lsl.w	ip, r0, r3
 800c4a2:	fa20 f002 	lsr.w	r0, r0, r2
 800c4a6:	fa01 fe03 	lsl.w	lr, r1, r3
 800c4aa:	ea40 000e 	orr.w	r0, r0, lr
 800c4ae:	fa21 f102 	lsr.w	r1, r1, r2
 800c4b2:	4414      	add	r4, r2
 800c4b4:	e6bd      	b.n	800c232 <__adddf3+0xe6>
 800c4b6:	bf00      	nop
	...

0800c4c0 <__aeabi_dmul>:
 800c4c0:	b570      	push	{r4, r5, r6, lr}
 800c4c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800c4c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800c4ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800c4ce:	bf1d      	ittte	ne
 800c4d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800c4d4:	ea94 0f0c 	teqne	r4, ip
 800c4d8:	ea95 0f0c 	teqne	r5, ip
 800c4dc:	f000 f8de 	bleq	800c69c <__aeabi_dmul+0x1dc>
 800c4e0:	442c      	add	r4, r5
 800c4e2:	ea81 0603 	eor.w	r6, r1, r3
 800c4e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800c4ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800c4ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800c4f2:	bf18      	it	ne
 800c4f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800c4f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800c4fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c500:	d038      	beq.n	800c574 <__aeabi_dmul+0xb4>
 800c502:	fba0 ce02 	umull	ip, lr, r0, r2
 800c506:	f04f 0500 	mov.w	r5, #0
 800c50a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800c50e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800c512:	fbe0 e503 	umlal	lr, r5, r0, r3
 800c516:	f04f 0600 	mov.w	r6, #0
 800c51a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800c51e:	f09c 0f00 	teq	ip, #0
 800c522:	bf18      	it	ne
 800c524:	f04e 0e01 	orrne.w	lr, lr, #1
 800c528:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800c52c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800c530:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800c534:	d204      	bcs.n	800c540 <__aeabi_dmul+0x80>
 800c536:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800c53a:	416d      	adcs	r5, r5
 800c53c:	eb46 0606 	adc.w	r6, r6, r6
 800c540:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800c544:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800c548:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800c54c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800c550:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800c554:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800c558:	bf88      	it	hi
 800c55a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800c55e:	d81e      	bhi.n	800c59e <__aeabi_dmul+0xde>
 800c560:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800c564:	bf08      	it	eq
 800c566:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800c56a:	f150 0000 	adcs.w	r0, r0, #0
 800c56e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800c572:	bd70      	pop	{r4, r5, r6, pc}
 800c574:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800c578:	ea46 0101 	orr.w	r1, r6, r1
 800c57c:	ea40 0002 	orr.w	r0, r0, r2
 800c580:	ea81 0103 	eor.w	r1, r1, r3
 800c584:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800c588:	bfc2      	ittt	gt
 800c58a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800c58e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800c592:	bd70      	popgt	{r4, r5, r6, pc}
 800c594:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800c598:	f04f 0e00 	mov.w	lr, #0
 800c59c:	3c01      	subs	r4, #1
 800c59e:	f300 80ab 	bgt.w	800c6f8 <__aeabi_dmul+0x238>
 800c5a2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800c5a6:	bfde      	ittt	le
 800c5a8:	2000      	movle	r0, #0
 800c5aa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800c5ae:	bd70      	pople	{r4, r5, r6, pc}
 800c5b0:	f1c4 0400 	rsb	r4, r4, #0
 800c5b4:	3c20      	subs	r4, #32
 800c5b6:	da35      	bge.n	800c624 <__aeabi_dmul+0x164>
 800c5b8:	340c      	adds	r4, #12
 800c5ba:	dc1b      	bgt.n	800c5f4 <__aeabi_dmul+0x134>
 800c5bc:	f104 0414 	add.w	r4, r4, #20
 800c5c0:	f1c4 0520 	rsb	r5, r4, #32
 800c5c4:	fa00 f305 	lsl.w	r3, r0, r5
 800c5c8:	fa20 f004 	lsr.w	r0, r0, r4
 800c5cc:	fa01 f205 	lsl.w	r2, r1, r5
 800c5d0:	ea40 0002 	orr.w	r0, r0, r2
 800c5d4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800c5d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800c5dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800c5e0:	fa21 f604 	lsr.w	r6, r1, r4
 800c5e4:	eb42 0106 	adc.w	r1, r2, r6
 800c5e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800c5ec:	bf08      	it	eq
 800c5ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800c5f2:	bd70      	pop	{r4, r5, r6, pc}
 800c5f4:	f1c4 040c 	rsb	r4, r4, #12
 800c5f8:	f1c4 0520 	rsb	r5, r4, #32
 800c5fc:	fa00 f304 	lsl.w	r3, r0, r4
 800c600:	fa20 f005 	lsr.w	r0, r0, r5
 800c604:	fa01 f204 	lsl.w	r2, r1, r4
 800c608:	ea40 0002 	orr.w	r0, r0, r2
 800c60c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800c610:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800c614:	f141 0100 	adc.w	r1, r1, #0
 800c618:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800c61c:	bf08      	it	eq
 800c61e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800c622:	bd70      	pop	{r4, r5, r6, pc}
 800c624:	f1c4 0520 	rsb	r5, r4, #32
 800c628:	fa00 f205 	lsl.w	r2, r0, r5
 800c62c:	ea4e 0e02 	orr.w	lr, lr, r2
 800c630:	fa20 f304 	lsr.w	r3, r0, r4
 800c634:	fa01 f205 	lsl.w	r2, r1, r5
 800c638:	ea43 0302 	orr.w	r3, r3, r2
 800c63c:	fa21 f004 	lsr.w	r0, r1, r4
 800c640:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800c644:	fa21 f204 	lsr.w	r2, r1, r4
 800c648:	ea20 0002 	bic.w	r0, r0, r2
 800c64c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800c650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800c654:	bf08      	it	eq
 800c656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800c65a:	bd70      	pop	{r4, r5, r6, pc}
 800c65c:	f094 0f00 	teq	r4, #0
 800c660:	d10f      	bne.n	800c682 <__aeabi_dmul+0x1c2>
 800c662:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800c666:	0040      	lsls	r0, r0, #1
 800c668:	eb41 0101 	adc.w	r1, r1, r1
 800c66c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800c670:	bf08      	it	eq
 800c672:	3c01      	subeq	r4, #1
 800c674:	d0f7      	beq.n	800c666 <__aeabi_dmul+0x1a6>
 800c676:	ea41 0106 	orr.w	r1, r1, r6
 800c67a:	f095 0f00 	teq	r5, #0
 800c67e:	bf18      	it	ne
 800c680:	4770      	bxne	lr
 800c682:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800c686:	0052      	lsls	r2, r2, #1
 800c688:	eb43 0303 	adc.w	r3, r3, r3
 800c68c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800c690:	bf08      	it	eq
 800c692:	3d01      	subeq	r5, #1
 800c694:	d0f7      	beq.n	800c686 <__aeabi_dmul+0x1c6>
 800c696:	ea43 0306 	orr.w	r3, r3, r6
 800c69a:	4770      	bx	lr
 800c69c:	ea94 0f0c 	teq	r4, ip
 800c6a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800c6a4:	bf18      	it	ne
 800c6a6:	ea95 0f0c 	teqne	r5, ip
 800c6aa:	d00c      	beq.n	800c6c6 <__aeabi_dmul+0x206>
 800c6ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800c6b0:	bf18      	it	ne
 800c6b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800c6b6:	d1d1      	bne.n	800c65c <__aeabi_dmul+0x19c>
 800c6b8:	ea81 0103 	eor.w	r1, r1, r3
 800c6bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800c6c0:	f04f 0000 	mov.w	r0, #0
 800c6c4:	bd70      	pop	{r4, r5, r6, pc}
 800c6c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800c6ca:	bf06      	itte	eq
 800c6cc:	4610      	moveq	r0, r2
 800c6ce:	4619      	moveq	r1, r3
 800c6d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800c6d4:	d019      	beq.n	800c70a <__aeabi_dmul+0x24a>
 800c6d6:	ea94 0f0c 	teq	r4, ip
 800c6da:	d102      	bne.n	800c6e2 <__aeabi_dmul+0x222>
 800c6dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800c6e0:	d113      	bne.n	800c70a <__aeabi_dmul+0x24a>
 800c6e2:	ea95 0f0c 	teq	r5, ip
 800c6e6:	d105      	bne.n	800c6f4 <__aeabi_dmul+0x234>
 800c6e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800c6ec:	bf1c      	itt	ne
 800c6ee:	4610      	movne	r0, r2
 800c6f0:	4619      	movne	r1, r3
 800c6f2:	d10a      	bne.n	800c70a <__aeabi_dmul+0x24a>
 800c6f4:	ea81 0103 	eor.w	r1, r1, r3
 800c6f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800c6fc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800c700:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c704:	f04f 0000 	mov.w	r0, #0
 800c708:	bd70      	pop	{r4, r5, r6, pc}
 800c70a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800c70e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800c712:	bd70      	pop	{r4, r5, r6, pc}

0800c714 <__aeabi_ddiv>:
 800c714:	b570      	push	{r4, r5, r6, lr}
 800c716:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800c71a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800c71e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800c722:	bf1d      	ittte	ne
 800c724:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800c728:	ea94 0f0c 	teqne	r4, ip
 800c72c:	ea95 0f0c 	teqne	r5, ip
 800c730:	f000 f8a7 	bleq	800c882 <__aeabi_ddiv+0x16e>
 800c734:	eba4 0405 	sub.w	r4, r4, r5
 800c738:	ea81 0e03 	eor.w	lr, r1, r3
 800c73c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800c740:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800c744:	f000 8088 	beq.w	800c858 <__aeabi_ddiv+0x144>
 800c748:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800c74c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800c750:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800c754:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800c758:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800c75c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800c760:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800c764:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800c768:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800c76c:	429d      	cmp	r5, r3
 800c76e:	bf08      	it	eq
 800c770:	4296      	cmpeq	r6, r2
 800c772:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800c776:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800c77a:	d202      	bcs.n	800c782 <__aeabi_ddiv+0x6e>
 800c77c:	085b      	lsrs	r3, r3, #1
 800c77e:	ea4f 0232 	mov.w	r2, r2, rrx
 800c782:	1ab6      	subs	r6, r6, r2
 800c784:	eb65 0503 	sbc.w	r5, r5, r3
 800c788:	085b      	lsrs	r3, r3, #1
 800c78a:	ea4f 0232 	mov.w	r2, r2, rrx
 800c78e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800c792:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800c796:	ebb6 0e02 	subs.w	lr, r6, r2
 800c79a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800c79e:	bf22      	ittt	cs
 800c7a0:	1ab6      	subcs	r6, r6, r2
 800c7a2:	4675      	movcs	r5, lr
 800c7a4:	ea40 000c 	orrcs.w	r0, r0, ip
 800c7a8:	085b      	lsrs	r3, r3, #1
 800c7aa:	ea4f 0232 	mov.w	r2, r2, rrx
 800c7ae:	ebb6 0e02 	subs.w	lr, r6, r2
 800c7b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 800c7b6:	bf22      	ittt	cs
 800c7b8:	1ab6      	subcs	r6, r6, r2
 800c7ba:	4675      	movcs	r5, lr
 800c7bc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800c7c0:	085b      	lsrs	r3, r3, #1
 800c7c2:	ea4f 0232 	mov.w	r2, r2, rrx
 800c7c6:	ebb6 0e02 	subs.w	lr, r6, r2
 800c7ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 800c7ce:	bf22      	ittt	cs
 800c7d0:	1ab6      	subcs	r6, r6, r2
 800c7d2:	4675      	movcs	r5, lr
 800c7d4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800c7d8:	085b      	lsrs	r3, r3, #1
 800c7da:	ea4f 0232 	mov.w	r2, r2, rrx
 800c7de:	ebb6 0e02 	subs.w	lr, r6, r2
 800c7e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 800c7e6:	bf22      	ittt	cs
 800c7e8:	1ab6      	subcs	r6, r6, r2
 800c7ea:	4675      	movcs	r5, lr
 800c7ec:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800c7f0:	ea55 0e06 	orrs.w	lr, r5, r6
 800c7f4:	d018      	beq.n	800c828 <__aeabi_ddiv+0x114>
 800c7f6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800c7fa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800c7fe:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800c802:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800c806:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800c80a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800c80e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800c812:	d1c0      	bne.n	800c796 <__aeabi_ddiv+0x82>
 800c814:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800c818:	d10b      	bne.n	800c832 <__aeabi_ddiv+0x11e>
 800c81a:	ea41 0100 	orr.w	r1, r1, r0
 800c81e:	f04f 0000 	mov.w	r0, #0
 800c822:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800c826:	e7b6      	b.n	800c796 <__aeabi_ddiv+0x82>
 800c828:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800c82c:	bf04      	itt	eq
 800c82e:	4301      	orreq	r1, r0
 800c830:	2000      	moveq	r0, #0
 800c832:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800c836:	bf88      	it	hi
 800c838:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800c83c:	f63f aeaf 	bhi.w	800c59e <__aeabi_dmul+0xde>
 800c840:	ebb5 0c03 	subs.w	ip, r5, r3
 800c844:	bf04      	itt	eq
 800c846:	ebb6 0c02 	subseq.w	ip, r6, r2
 800c84a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800c84e:	f150 0000 	adcs.w	r0, r0, #0
 800c852:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800c856:	bd70      	pop	{r4, r5, r6, pc}
 800c858:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800c85c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800c860:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800c864:	bfc2      	ittt	gt
 800c866:	ebd4 050c 	rsbsgt	r5, r4, ip
 800c86a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800c86e:	bd70      	popgt	{r4, r5, r6, pc}
 800c870:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800c874:	f04f 0e00 	mov.w	lr, #0
 800c878:	3c01      	subs	r4, #1
 800c87a:	e690      	b.n	800c59e <__aeabi_dmul+0xde>
 800c87c:	ea45 0e06 	orr.w	lr, r5, r6
 800c880:	e68d      	b.n	800c59e <__aeabi_dmul+0xde>
 800c882:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800c886:	ea94 0f0c 	teq	r4, ip
 800c88a:	bf08      	it	eq
 800c88c:	ea95 0f0c 	teqeq	r5, ip
 800c890:	f43f af3b 	beq.w	800c70a <__aeabi_dmul+0x24a>
 800c894:	ea94 0f0c 	teq	r4, ip
 800c898:	d10a      	bne.n	800c8b0 <__aeabi_ddiv+0x19c>
 800c89a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800c89e:	f47f af34 	bne.w	800c70a <__aeabi_dmul+0x24a>
 800c8a2:	ea95 0f0c 	teq	r5, ip
 800c8a6:	f47f af25 	bne.w	800c6f4 <__aeabi_dmul+0x234>
 800c8aa:	4610      	mov	r0, r2
 800c8ac:	4619      	mov	r1, r3
 800c8ae:	e72c      	b.n	800c70a <__aeabi_dmul+0x24a>
 800c8b0:	ea95 0f0c 	teq	r5, ip
 800c8b4:	d106      	bne.n	800c8c4 <__aeabi_ddiv+0x1b0>
 800c8b6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800c8ba:	f43f aefd 	beq.w	800c6b8 <__aeabi_dmul+0x1f8>
 800c8be:	4610      	mov	r0, r2
 800c8c0:	4619      	mov	r1, r3
 800c8c2:	e722      	b.n	800c70a <__aeabi_dmul+0x24a>
 800c8c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800c8c8:	bf18      	it	ne
 800c8ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800c8ce:	f47f aec5 	bne.w	800c65c <__aeabi_dmul+0x19c>
 800c8d2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800c8d6:	f47f af0d 	bne.w	800c6f4 <__aeabi_dmul+0x234>
 800c8da:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800c8de:	f47f aeeb 	bne.w	800c6b8 <__aeabi_dmul+0x1f8>
 800c8e2:	e712      	b.n	800c70a <__aeabi_dmul+0x24a>
	...

0800c8f0 <__gedf2>:
 800c8f0:	f04f 3cff 	mov.w	ip, #4294967295
 800c8f4:	e006      	b.n	800c904 <__cmpdf2+0x4>
 800c8f6:	bf00      	nop

0800c8f8 <__ledf2>:
 800c8f8:	f04f 0c01 	mov.w	ip, #1
 800c8fc:	e002      	b.n	800c904 <__cmpdf2+0x4>
 800c8fe:	bf00      	nop

0800c900 <__cmpdf2>:
 800c900:	f04f 0c01 	mov.w	ip, #1
 800c904:	f84d cd04 	str.w	ip, [sp, #-4]!
 800c908:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800c90c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800c910:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800c914:	bf18      	it	ne
 800c916:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800c91a:	d01b      	beq.n	800c954 <__cmpdf2+0x54>
 800c91c:	b001      	add	sp, #4
 800c91e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800c922:	bf0c      	ite	eq
 800c924:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800c928:	ea91 0f03 	teqne	r1, r3
 800c92c:	bf02      	ittt	eq
 800c92e:	ea90 0f02 	teqeq	r0, r2
 800c932:	2000      	moveq	r0, #0
 800c934:	4770      	bxeq	lr
 800c936:	f110 0f00 	cmn.w	r0, #0
 800c93a:	ea91 0f03 	teq	r1, r3
 800c93e:	bf58      	it	pl
 800c940:	4299      	cmppl	r1, r3
 800c942:	bf08      	it	eq
 800c944:	4290      	cmpeq	r0, r2
 800c946:	bf2c      	ite	cs
 800c948:	17d8      	asrcs	r0, r3, #31
 800c94a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800c94e:	f040 0001 	orr.w	r0, r0, #1
 800c952:	4770      	bx	lr
 800c954:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800c958:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800c95c:	d102      	bne.n	800c964 <__cmpdf2+0x64>
 800c95e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800c962:	d107      	bne.n	800c974 <__cmpdf2+0x74>
 800c964:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800c968:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800c96c:	d1d6      	bne.n	800c91c <__cmpdf2+0x1c>
 800c96e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800c972:	d0d3      	beq.n	800c91c <__cmpdf2+0x1c>
 800c974:	f85d 0b04 	ldr.w	r0, [sp], #4
 800c978:	4770      	bx	lr
 800c97a:	bf00      	nop

0800c97c <__aeabi_cdrcmple>:
 800c97c:	4684      	mov	ip, r0
 800c97e:	4610      	mov	r0, r2
 800c980:	4662      	mov	r2, ip
 800c982:	468c      	mov	ip, r1
 800c984:	4619      	mov	r1, r3
 800c986:	4663      	mov	r3, ip
 800c988:	e000      	b.n	800c98c <__aeabi_cdcmpeq>
 800c98a:	bf00      	nop

0800c98c <__aeabi_cdcmpeq>:
 800c98c:	b501      	push	{r0, lr}
 800c98e:	f7ff ffb7 	bl	800c900 <__cmpdf2>
 800c992:	2800      	cmp	r0, #0
 800c994:	bf48      	it	mi
 800c996:	f110 0f00 	cmnmi.w	r0, #0
 800c99a:	bd01      	pop	{r0, pc}

0800c99c <__aeabi_dcmpeq>:
 800c99c:	f84d ed08 	str.w	lr, [sp, #-8]!
 800c9a0:	f7ff fff4 	bl	800c98c <__aeabi_cdcmpeq>
 800c9a4:	bf0c      	ite	eq
 800c9a6:	2001      	moveq	r0, #1
 800c9a8:	2000      	movne	r0, #0
 800c9aa:	f85d fb08 	ldr.w	pc, [sp], #8
 800c9ae:	bf00      	nop

0800c9b0 <__aeabi_dcmplt>:
 800c9b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 800c9b4:	f7ff ffea 	bl	800c98c <__aeabi_cdcmpeq>
 800c9b8:	bf34      	ite	cc
 800c9ba:	2001      	movcc	r0, #1
 800c9bc:	2000      	movcs	r0, #0
 800c9be:	f85d fb08 	ldr.w	pc, [sp], #8
 800c9c2:	bf00      	nop

0800c9c4 <__aeabi_dcmple>:
 800c9c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 800c9c8:	f7ff ffe0 	bl	800c98c <__aeabi_cdcmpeq>
 800c9cc:	bf94      	ite	ls
 800c9ce:	2001      	movls	r0, #1
 800c9d0:	2000      	movhi	r0, #0
 800c9d2:	f85d fb08 	ldr.w	pc, [sp], #8
 800c9d6:	bf00      	nop

0800c9d8 <__aeabi_dcmpge>:
 800c9d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 800c9dc:	f7ff ffce 	bl	800c97c <__aeabi_cdrcmple>
 800c9e0:	bf94      	ite	ls
 800c9e2:	2001      	movls	r0, #1
 800c9e4:	2000      	movhi	r0, #0
 800c9e6:	f85d fb08 	ldr.w	pc, [sp], #8
 800c9ea:	bf00      	nop

0800c9ec <__aeabi_dcmpgt>:
 800c9ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 800c9f0:	f7ff ffc4 	bl	800c97c <__aeabi_cdrcmple>
 800c9f4:	bf34      	ite	cc
 800c9f6:	2001      	movcc	r0, #1
 800c9f8:	2000      	movcs	r0, #0
 800c9fa:	f85d fb08 	ldr.w	pc, [sp], #8
 800c9fe:	bf00      	nop

0800ca00 <__aeabi_d2iz>:
 800ca00:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800ca04:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800ca08:	d215      	bcs.n	800ca36 <__aeabi_d2iz+0x36>
 800ca0a:	d511      	bpl.n	800ca30 <__aeabi_d2iz+0x30>
 800ca0c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800ca10:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800ca14:	d912      	bls.n	800ca3c <__aeabi_d2iz+0x3c>
 800ca16:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800ca1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ca1e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800ca22:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800ca26:	fa23 f002 	lsr.w	r0, r3, r2
 800ca2a:	bf18      	it	ne
 800ca2c:	4240      	negne	r0, r0
 800ca2e:	4770      	bx	lr
 800ca30:	f04f 0000 	mov.w	r0, #0
 800ca34:	4770      	bx	lr
 800ca36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800ca3a:	d105      	bne.n	800ca48 <__aeabi_d2iz+0x48>
 800ca3c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800ca40:	bf08      	it	eq
 800ca42:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800ca46:	4770      	bx	lr
 800ca48:	f04f 0000 	mov.w	r0, #0
 800ca4c:	4770      	bx	lr
 800ca4e:	bf00      	nop

0800ca50 <__aeabi_d2f>:
 800ca50:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800ca54:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800ca58:	bf24      	itt	cs
 800ca5a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800ca5e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800ca62:	d90d      	bls.n	800ca80 <__aeabi_d2f+0x30>
 800ca64:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800ca68:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 800ca6c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800ca70:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800ca74:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800ca78:	bf08      	it	eq
 800ca7a:	f020 0001 	biceq.w	r0, r0, #1
 800ca7e:	4770      	bx	lr
 800ca80:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800ca84:	d121      	bne.n	800caca <__aeabi_d2f+0x7a>
 800ca86:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800ca8a:	bfbc      	itt	lt
 800ca8c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800ca90:	4770      	bxlt	lr
 800ca92:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800ca96:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800ca9a:	f1c2 0218 	rsb	r2, r2, #24
 800ca9e:	f1c2 0c20 	rsb	ip, r2, #32
 800caa2:	fa10 f30c 	lsls.w	r3, r0, ip
 800caa6:	fa20 f002 	lsr.w	r0, r0, r2
 800caaa:	bf18      	it	ne
 800caac:	f040 0001 	orrne.w	r0, r0, #1
 800cab0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800cab4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800cab8:	fa03 fc0c 	lsl.w	ip, r3, ip
 800cabc:	ea40 000c 	orr.w	r0, r0, ip
 800cac0:	fa23 f302 	lsr.w	r3, r3, r2
 800cac4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800cac8:	e7cc      	b.n	800ca64 <__aeabi_d2f+0x14>
 800caca:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800cace:	d107      	bne.n	800cae0 <__aeabi_d2f+0x90>
 800cad0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800cad4:	bf1e      	ittt	ne
 800cad6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800cada:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800cade:	4770      	bxne	lr
 800cae0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800cae4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800cae8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800caec:	4770      	bx	lr
 800caee:	bf00      	nop

0800caf0 <memcpy>:
 800caf0:	4684      	mov	ip, r0
 800caf2:	ea41 0300 	orr.w	r3, r1, r0
 800caf6:	f013 0303 	ands.w	r3, r3, #3
 800cafa:	d16d      	bne.n	800cbd8 <memcpy+0xe8>
 800cafc:	3a40      	subs	r2, #64	; 0x40
 800cafe:	d341      	bcc.n	800cb84 <memcpy+0x94>
 800cb00:	f851 3b04 	ldr.w	r3, [r1], #4
 800cb04:	f840 3b04 	str.w	r3, [r0], #4
 800cb08:	f851 3b04 	ldr.w	r3, [r1], #4
 800cb0c:	f840 3b04 	str.w	r3, [r0], #4
 800cb10:	f851 3b04 	ldr.w	r3, [r1], #4
 800cb14:	f840 3b04 	str.w	r3, [r0], #4
 800cb18:	f851 3b04 	ldr.w	r3, [r1], #4
 800cb1c:	f840 3b04 	str.w	r3, [r0], #4
 800cb20:	f851 3b04 	ldr.w	r3, [r1], #4
 800cb24:	f840 3b04 	str.w	r3, [r0], #4
 800cb28:	f851 3b04 	ldr.w	r3, [r1], #4
 800cb2c:	f840 3b04 	str.w	r3, [r0], #4
 800cb30:	f851 3b04 	ldr.w	r3, [r1], #4
 800cb34:	f840 3b04 	str.w	r3, [r0], #4
 800cb38:	f851 3b04 	ldr.w	r3, [r1], #4
 800cb3c:	f840 3b04 	str.w	r3, [r0], #4
 800cb40:	f851 3b04 	ldr.w	r3, [r1], #4
 800cb44:	f840 3b04 	str.w	r3, [r0], #4
 800cb48:	f851 3b04 	ldr.w	r3, [r1], #4
 800cb4c:	f840 3b04 	str.w	r3, [r0], #4
 800cb50:	f851 3b04 	ldr.w	r3, [r1], #4
 800cb54:	f840 3b04 	str.w	r3, [r0], #4
 800cb58:	f851 3b04 	ldr.w	r3, [r1], #4
 800cb5c:	f840 3b04 	str.w	r3, [r0], #4
 800cb60:	f851 3b04 	ldr.w	r3, [r1], #4
 800cb64:	f840 3b04 	str.w	r3, [r0], #4
 800cb68:	f851 3b04 	ldr.w	r3, [r1], #4
 800cb6c:	f840 3b04 	str.w	r3, [r0], #4
 800cb70:	f851 3b04 	ldr.w	r3, [r1], #4
 800cb74:	f840 3b04 	str.w	r3, [r0], #4
 800cb78:	f851 3b04 	ldr.w	r3, [r1], #4
 800cb7c:	f840 3b04 	str.w	r3, [r0], #4
 800cb80:	3a40      	subs	r2, #64	; 0x40
 800cb82:	d2bd      	bcs.n	800cb00 <memcpy+0x10>
 800cb84:	3230      	adds	r2, #48	; 0x30
 800cb86:	d311      	bcc.n	800cbac <memcpy+0xbc>
 800cb88:	f851 3b04 	ldr.w	r3, [r1], #4
 800cb8c:	f840 3b04 	str.w	r3, [r0], #4
 800cb90:	f851 3b04 	ldr.w	r3, [r1], #4
 800cb94:	f840 3b04 	str.w	r3, [r0], #4
 800cb98:	f851 3b04 	ldr.w	r3, [r1], #4
 800cb9c:	f840 3b04 	str.w	r3, [r0], #4
 800cba0:	f851 3b04 	ldr.w	r3, [r1], #4
 800cba4:	f840 3b04 	str.w	r3, [r0], #4
 800cba8:	3a10      	subs	r2, #16
 800cbaa:	d2ed      	bcs.n	800cb88 <memcpy+0x98>
 800cbac:	320c      	adds	r2, #12
 800cbae:	d305      	bcc.n	800cbbc <memcpy+0xcc>
 800cbb0:	f851 3b04 	ldr.w	r3, [r1], #4
 800cbb4:	f840 3b04 	str.w	r3, [r0], #4
 800cbb8:	3a04      	subs	r2, #4
 800cbba:	d2f9      	bcs.n	800cbb0 <memcpy+0xc0>
 800cbbc:	3204      	adds	r2, #4
 800cbbe:	d008      	beq.n	800cbd2 <memcpy+0xe2>
 800cbc0:	07d2      	lsls	r2, r2, #31
 800cbc2:	bf1c      	itt	ne
 800cbc4:	f811 3b01 	ldrbne.w	r3, [r1], #1
 800cbc8:	f800 3b01 	strbne.w	r3, [r0], #1
 800cbcc:	d301      	bcc.n	800cbd2 <memcpy+0xe2>
 800cbce:	880b      	ldrh	r3, [r1, #0]
 800cbd0:	8003      	strh	r3, [r0, #0]
 800cbd2:	4660      	mov	r0, ip
 800cbd4:	4770      	bx	lr
 800cbd6:	bf00      	nop
 800cbd8:	2a08      	cmp	r2, #8
 800cbda:	d313      	bcc.n	800cc04 <memcpy+0x114>
 800cbdc:	078b      	lsls	r3, r1, #30
 800cbde:	d08d      	beq.n	800cafc <memcpy+0xc>
 800cbe0:	f010 0303 	ands.w	r3, r0, #3
 800cbe4:	d08a      	beq.n	800cafc <memcpy+0xc>
 800cbe6:	f1c3 0304 	rsb	r3, r3, #4
 800cbea:	1ad2      	subs	r2, r2, r3
 800cbec:	07db      	lsls	r3, r3, #31
 800cbee:	bf1c      	itt	ne
 800cbf0:	f811 3b01 	ldrbne.w	r3, [r1], #1
 800cbf4:	f800 3b01 	strbne.w	r3, [r0], #1
 800cbf8:	d380      	bcc.n	800cafc <memcpy+0xc>
 800cbfa:	f831 3b02 	ldrh.w	r3, [r1], #2
 800cbfe:	f820 3b02 	strh.w	r3, [r0], #2
 800cc02:	e77b      	b.n	800cafc <memcpy+0xc>
 800cc04:	3a04      	subs	r2, #4
 800cc06:	d3d9      	bcc.n	800cbbc <memcpy+0xcc>
 800cc08:	3a01      	subs	r2, #1
 800cc0a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cc0e:	f800 3b01 	strb.w	r3, [r0], #1
 800cc12:	d2f9      	bcs.n	800cc08 <memcpy+0x118>
 800cc14:	780b      	ldrb	r3, [r1, #0]
 800cc16:	7003      	strb	r3, [r0, #0]
 800cc18:	784b      	ldrb	r3, [r1, #1]
 800cc1a:	7043      	strb	r3, [r0, #1]
 800cc1c:	788b      	ldrb	r3, [r1, #2]
 800cc1e:	7083      	strb	r3, [r0, #2]
 800cc20:	4660      	mov	r0, ip
 800cc22:	4770      	bx	lr
	...

0800cc30 <__core_init>:

#if __CORTEX_M == 7
  SCB_EnableICache();
  SCB_EnableDCache();
#endif
}
 800cc30:	4770      	bx	lr
 800cc32:	bf00      	nop
	...

0800cc40 <__late_init>:
 800cc40:	4770      	bx	lr
 800cc42:	bf00      	nop
	...

0800cc50 <__default_exit>:
 */
#if !defined(__DOXYGEN__)
__attribute__((noreturn, weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __default_exit(void) {
 800cc50:	e7fe      	b.n	800cc50 <__default_exit>
 800cc52:	bf00      	nop
	...

0800cc60 <_unhandled_exception>:
 *          This function simply stops the system into an infinite loop.
 *
 * @notapi
 */
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void _unhandled_exception(void) {
 800cc60:	e7fe      	b.n	800cc60 <_unhandled_exception>
 800cc62:	bf00      	nop
	...

0800cc70 <_idle_thread>:
 *          that this thread is executed only if there are no other ready
 *          threads in the system.
 *
 * @param[in] p         the thread parameter, unused in this scenario
 */
static void _idle_thread(void *p) {
 800cc70:	e7fe      	b.n	800cc70 <_idle_thread>
 800cc72:	bf00      	nop
	...

0800cc80 <chSysInit>:
 * @brief   Port-related initialization code.
 */
static inline void port_init(void) {

  /* Initialization of the vector table and priority related settings.*/
  SCB->VTOR = CORTEX_VTOR_INIT;
 800cc80:	4b20      	ldr	r3, [pc, #128]	; (800cd04 <chSysInit+0x84>)
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
  reg_value  =  (reg_value                                 |
 800cc82:	4a21      	ldr	r2, [pc, #132]	; (800cd08 <chSysInit+0x88>)

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800cc84:	4821      	ldr	r0, [pc, #132]	; (800cd0c <chSysInit+0x8c>)
 * @post    The main thread is created with priority @p NORMALPRIO and
 *          interrupts are enabled.
 *
 * @special
 */
void chSysInit(void) {
 800cc86:	b530      	push	{r4, r5, lr}
  SCB->VTOR = CORTEX_VTOR_INIT;
 800cc88:	2400      	movs	r4, #0
 800cc8a:	609c      	str	r4, [r3, #8]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800cc8c:	68d9      	ldr	r1, [r3, #12]
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
 800cc8e:	f64f 05ff 	movw	r5, #63743	; 0xf8ff
 800cc92:	4029      	ands	r1, r5
  reg_value  =  (reg_value                                 |
 800cc94:	430a      	orrs	r2, r1
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 800cc96:	60da      	str	r2, [r3, #12]
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800cc98:	68c2      	ldr	r2, [r0, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800cc9a:	491d      	ldr	r1, [pc, #116]	; (800cd10 <chSysInit+0x90>)
  _dbg_trace_init();
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
  setcurrp(_thread_init(&ch.mainthread, NORMALPRIO));
 800cc9c:	4d1d      	ldr	r5, [pc, #116]	; (800cd14 <chSysInit+0x94>)
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800cc9e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800cca2:	60c2      	str	r2, [r0, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800cca4:	680a      	ldr	r2, [r1, #0]
 800cca6:	f042 0201 	orr.w	r2, r2, #1
 800ccaa:	600a      	str	r2, [r1, #0]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 800ccac:	2010      	movs	r0, #16
 800ccae:	2220      	movs	r2, #32
void chSysInit(void) {
 800ccb0:	b083      	sub	sp, #12
 800ccb2:	77d8      	strb	r0, [r3, #31]
 800ccb4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  _scheduler_init();
 800ccb8:	f000 f8fa 	bl	800ceb0 <_scheduler_init>
  _vt_init();
 800ccbc:	f000 f878 	bl	800cdb0 <_vt_init>
  _tm_init();
 800ccc0:	f000 fb06 	bl	800d2d0 <_tm_init>
  _core_init();
 800ccc4:	f000 fcb4 	bl	800d630 <_core_init>
  _heap_init();
 800ccc8:	f000 fcea 	bl	800d6a0 <_heap_init>
  setcurrp(_thread_init(&ch.mainthread, NORMALPRIO));
 800cccc:	4628      	mov	r0, r5
 800ccce:	2140      	movs	r1, #64	; 0x40
 800ccd0:	f000 f9ee 	bl	800d0b0 <_thread_init>
 800ccd4:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
#else
  /* Now this instructions flow becomes the idle thread.*/
  setcurrp(_thread_init(&ch.mainthread, IDLEPRIO));
#endif

  currp->p_state = CH_STATE_CURRENT;
 800ccd8:	2201      	movs	r2, #1
  setcurrp(_thread_init(&ch.mainthread, NORMALPRIO));
 800ccda:	6198      	str	r0, [r3, #24]
  currp->p_state = CH_STATE_CURRENT;
 800ccdc:	7702      	strb	r2, [r0, #28]

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800ccde:	f384 8811 	msr	BASEPRI, r4
  __ASM volatile ("cpsie i" : : : "memory");
 800cce2:	b662      	cpsie	i
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.r_current->p_name = name;
 800cce4:	699b      	ldr	r3, [r3, #24]
 800cce6:	490c      	ldr	r1, [pc, #48]	; (800cd18 <chSysInit+0x98>)
 800cce8:	6199      	str	r1, [r3, #24]
#if CH_CFG_NO_IDLE_THREAD == FALSE
  {
  /* This thread has the lowest priority in the system, its role is just to
     serve interrupts in its context while keeping the lowest energy saving
     mode compatible with the system status.*/
    thread_t *tp =  chThdCreateStatic(ch.idle_thread_wa,
 800ccea:	f105 0050 	add.w	r0, r5, #80	; 0x50
 800ccee:	9400      	str	r4, [sp, #0]
 800ccf0:	4b0a      	ldr	r3, [pc, #40]	; (800cd1c <chSysInit+0x9c>)
 800ccf2:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 800ccf6:	f000 f9fb 	bl	800d0f0 <chThdCreateStatic>
 * @xclass
 */
static inline void chRegSetThreadNameX(thread_t *tp, const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = name;
 800ccfa:	4b09      	ldr	r3, [pc, #36]	; (800cd20 <chSysInit+0xa0>)
 800ccfc:	6183      	str	r3, [r0, #24]
                                      (tfunc_t)_idle_thread,
                                      NULL);
    chRegSetThreadNameX(tp, "idle");
  }
#endif
}
 800ccfe:	b003      	add	sp, #12
 800cd00:	bd30      	pop	{r4, r5, pc}
 800cd02:	bf00      	nop
 800cd04:	e000ed00 	.word	0xe000ed00
 800cd08:	05fa0300 	.word	0x05fa0300
 800cd0c:	e000edf0 	.word	0xe000edf0
 800cd10:	e0001000 	.word	0xe0001000
 800cd14:	20000c70 	.word	0x20000c70
 800cd18:	08013b00 	.word	0x08013b00
 800cd1c:	0800cc71 	.word	0x0800cc71
 800cd20:	08013af0 	.word	0x08013af0
	...

0800cd30 <chSysTimerHandlerI>:
 *          and, together with the @p CH_CFG_TIME_QUANTUM macro, the round robin
 *          interval.
 *
 * @iclass
 */
void chSysTimerHandlerI(void) {
 800cd30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  chDbgCheckClassI();

#if CH_CFG_TIME_QUANTUM > 0
  /* Running thread has not used up quantum yet? */
  if (currp->p_preempt > (tslices_t)0) {
 800cd32:	4c13      	ldr	r4, [pc, #76]	; (800cd80 <chSysTimerHandlerI+0x50>)
 800cd34:	69a2      	ldr	r2, [r4, #24]
 800cd36:	7fd3      	ldrb	r3, [r2, #31]
 800cd38:	b10b      	cbz	r3, 800cd3e <chSysTimerHandlerI+0xe>
    /* Decrement remaining quantum.*/
    currp->p_preempt--;
 800cd3a:	3b01      	subs	r3, #1
 800cd3c:	77d3      	strb	r3, [r2, #31]
  }
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  currp->p_time++;
 800cd3e:	6a11      	ldr	r1, [r2, #32]

  chDbgCheckClassI();

#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.vt_systime++;
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.vt_next) {
 800cd40:	69e3      	ldr	r3, [r4, #28]
 800cd42:	4e10      	ldr	r6, [pc, #64]	; (800cd84 <chSysTimerHandlerI+0x54>)
 800cd44:	3101      	adds	r1, #1
 800cd46:	6211      	str	r1, [r2, #32]
  ch.vtlist.vt_systime++;
 800cd48:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.vt_next) {
 800cd4a:	42b3      	cmp	r3, r6
  ch.vtlist.vt_systime++;
 800cd4c:	f102 0201 	add.w	r2, r2, #1
 800cd50:	62a2      	str	r2, [r4, #40]	; 0x28
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.vt_next) {
 800cd52:	d013      	beq.n	800cd7c <chSysTimerHandlerI+0x4c>
    /* The list is not empty, processing elements on top.*/
    --ch.vtlist.vt_next->vt_delta;
 800cd54:	689d      	ldr	r5, [r3, #8]
 800cd56:	3d01      	subs	r5, #1
 800cd58:	609d      	str	r5, [r3, #8]
    while (ch.vtlist.vt_next->vt_delta == (systime_t)0) {
 800cd5a:	b97d      	cbnz	r5, 800cd7c <chSysTimerHandlerI+0x4c>
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800cd5c:	2720      	movs	r7, #32
      vtfunc_t fn;

      vtp = ch.vtlist.vt_next;
      fn = vtp->vt_func;
      vtp->vt_func = NULL;
      vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 800cd5e:	681a      	ldr	r2, [r3, #0]
      fn = vtp->vt_func;
 800cd60:	68d9      	ldr	r1, [r3, #12]
      vtp->vt_func = NULL;
 800cd62:	60dd      	str	r5, [r3, #12]
      vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 800cd64:	6056      	str	r6, [r2, #4]
      ch.vtlist.vt_next = vtp->vt_next;
 800cd66:	61e2      	str	r2, [r4, #28]
 800cd68:	f385 8811 	msr	BASEPRI, r5
      chSysUnlockFromISR();
      fn(vtp->vt_par);
 800cd6c:	6918      	ldr	r0, [r3, #16]
 800cd6e:	4788      	blx	r1
 800cd70:	f387 8811 	msr	BASEPRI, r7
    while (ch.vtlist.vt_next->vt_delta == (systime_t)0) {
 800cd74:	69e3      	ldr	r3, [r4, #28]
 800cd76:	689a      	ldr	r2, [r3, #8]
 800cd78:	2a00      	cmp	r2, #0
 800cd7a:	d0f0      	beq.n	800cd5e <chSysTimerHandlerI+0x2e>
#endif
  chVTDoTickI();
#if defined(CH_CFG_SYSTEM_TICK_HOOK)
  CH_CFG_SYSTEM_TICK_HOOK();
#endif
}
 800cd7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cd7e:	bf00      	nop
 800cd80:	20000c40 	.word	0x20000c40
 800cd84:	20000c5c 	.word	0x20000c5c
	...

0800cd90 <chSysPolledDelayX>:
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 800cd90:	4a03      	ldr	r2, [pc, #12]	; (800cda0 <chSysPolledDelayX+0x10>)
 800cd92:	6851      	ldr	r1, [r2, #4]
 800cd94:	6853      	ldr	r3, [r2, #4]
 *
 * @xclass
 */
bool chSysIsCounterWithinX(rtcnt_t cnt, rtcnt_t start, rtcnt_t end) {

  return (bool)((cnt - start) < (end - start));
 800cd96:	1a5b      	subs	r3, r3, r1
 */
void chSysPolledDelayX(rtcnt_t cycles) {
  rtcnt_t start = chSysGetRealtimeCounterX();
  rtcnt_t end  = start + cycles;

  while (chSysIsCounterWithinX(chSysGetRealtimeCounterX(), start, end)) {
 800cd98:	4298      	cmp	r0, r3
 800cd9a:	d8fb      	bhi.n	800cd94 <chSysPolledDelayX+0x4>
  }
}
 800cd9c:	4770      	bx	lr
 800cd9e:	bf00      	nop
 800cda0:	e0001000 	.word	0xe0001000
	...

0800cdb0 <_vt_init>:
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
 800cdb0:	4b05      	ldr	r3, [pc, #20]	; (800cdc8 <_vt_init+0x18>)
  ch.vtlist.vt_prev = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.vt_delta = (systime_t)-1;
 800cdb2:	f04f 30ff 	mov.w	r0, #4294967295
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.vt_systime = (systime_t)0;
 800cdb6:	2100      	movs	r1, #0
  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
 800cdb8:	f103 021c 	add.w	r2, r3, #28
  ch.vtlist.vt_delta = (systime_t)-1;
 800cdbc:	6258      	str	r0, [r3, #36]	; 0x24
  ch.vtlist.vt_systime = (systime_t)0;
 800cdbe:	6299      	str	r1, [r3, #40]	; 0x28
  ch.vtlist.vt_prev = (virtual_timer_t *)&ch.vtlist;
 800cdc0:	e9c3 2207 	strd	r2, r2, [r3, #28]
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  ch.vtlist.vt_lasttime = (systime_t)0;
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 800cdc4:	4770      	bx	lr
 800cdc6:	bf00      	nop
 800cdc8:	20000c40 	.word	0x20000c40
 800cdcc:	00000000 	.word	0x00000000

0800cdd0 <chVTDoSetI>:
 *                      function
 *
 * @iclass
 */
void chVTDoSetI(virtual_timer_t *vtp, systime_t delay,
                vtfunc_t vtfunc, void *par) {
 800cdd0:	b430      	push	{r4, r5}
  delta = delay;
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
 800cdd2:	4d0d      	ldr	r5, [pc, #52]	; (800ce08 <chVTDoSetI+0x38>)
 800cdd4:	69ec      	ldr	r4, [r5, #28]
  vtp->vt_par = par;
 800cdd6:	6103      	str	r3, [r0, #16]
  while (p->vt_delta < delta) {
 800cdd8:	68a3      	ldr	r3, [r4, #8]
  vtp->vt_func = vtfunc;
 800cdda:	60c2      	str	r2, [r0, #12]
  while (p->vt_delta < delta) {
 800cddc:	4299      	cmp	r1, r3
 800cdde:	d904      	bls.n	800cdea <chVTDoSetI+0x1a>
    delta -= p->vt_delta;
    p = p->vt_next;
 800cde0:	6824      	ldr	r4, [r4, #0]
    delta -= p->vt_delta;
 800cde2:	1ac9      	subs	r1, r1, r3
  while (p->vt_delta < delta) {
 800cde4:	68a3      	ldr	r3, [r4, #8]
 800cde6:	428b      	cmp	r3, r1
 800cde8:	d3fa      	bcc.n	800cde0 <chVTDoSetI+0x10>
  }

  /* The timer is inserted in the delta list.*/
  vtp->vt_next = p;
  vtp->vt_prev = vtp->vt_next->vt_prev;
 800cdea:	6863      	ldr	r3, [r4, #4]
 800cdec:	e9c0 4300 	strd	r4, r3, [r0]
  vtp->vt_prev->vt_next = vtp;
 800cdf0:	6018      	str	r0, [r3, #0]
  p->vt_prev = vtp;
 800cdf2:	6060      	str	r0, [r4, #4]
  vtp->vt_delta = delta
 800cdf4:	6081      	str	r1, [r0, #8]

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->vt_delta -= delta;
 800cdf6:	68a3      	ldr	r3, [r4, #8]
  ch.vtlist.vt_delta = (systime_t)-1;
 800cdf8:	f04f 32ff 	mov.w	r2, #4294967295
  p->vt_delta -= delta;
 800cdfc:	1a59      	subs	r1, r3, r1
 800cdfe:	60a1      	str	r1, [r4, #8]
  ch.vtlist.vt_delta = (systime_t)-1;
 800ce00:	626a      	str	r2, [r5, #36]	; 0x24
}
 800ce02:	bc30      	pop	{r4, r5}
 800ce04:	4770      	bx	lr
 800ce06:	bf00      	nop
 800ce08:	20000c40 	.word	0x20000c40
 800ce0c:	00000000 	.word	0x00000000

0800ce10 <chVTDoResetI>:
  chDbgAssert(vtp->vt_func != NULL, "timer not set or already triggered");

#if CH_CFG_ST_TIMEDELTA == 0

  /* The delta of the timer is added to the next timer.*/
  vtp->vt_next->vt_delta += vtp->vt_delta;
 800ce10:	6803      	ldr	r3, [r0, #0]

 /* Removing the element from the delta list.*/
  vtp->vt_prev->vt_next = vtp->vt_next;
 800ce12:	6841      	ldr	r1, [r0, #4]
  vtp->vt_next->vt_delta += vtp->vt_delta;
 800ce14:	689a      	ldr	r2, [r3, #8]
void chVTDoResetI(virtual_timer_t *vtp) {
 800ce16:	b430      	push	{r4, r5}
  vtp->vt_next->vt_delta += vtp->vt_delta;
 800ce18:	6885      	ldr	r5, [r0, #8]
  vtp->vt_next->vt_prev = vtp->vt_prev;
  vtp->vt_func = NULL;

  /* The above code changes the value in the header when the removed element
     is the last of the list, restoring it.*/
  ch.vtlist.vt_delta = (systime_t)-1;
 800ce1a:	4c06      	ldr	r4, [pc, #24]	; (800ce34 <chVTDoResetI+0x24>)
  vtp->vt_next->vt_delta += vtp->vt_delta;
 800ce1c:	442a      	add	r2, r5
 800ce1e:	609a      	str	r2, [r3, #8]
  vtp->vt_prev->vt_next = vtp->vt_next;
 800ce20:	600b      	str	r3, [r1, #0]
  vtp->vt_next->vt_prev = vtp->vt_prev;
 800ce22:	6805      	ldr	r5, [r0, #0]
  vtp->vt_func = NULL;
 800ce24:	2200      	movs	r2, #0
  ch.vtlist.vt_delta = (systime_t)-1;
 800ce26:	f04f 33ff 	mov.w	r3, #4294967295
  vtp->vt_next->vt_prev = vtp->vt_prev;
 800ce2a:	6069      	str	r1, [r5, #4]
  vtp->vt_func = NULL;
 800ce2c:	60c2      	str	r2, [r0, #12]
  ch.vtlist.vt_delta = (systime_t)-1;
 800ce2e:	6263      	str	r3, [r4, #36]	; 0x24
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
  }

  port_timer_set_alarm(ch.vtlist.vt_lasttime + nowdelta + delta);
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 800ce30:	bc30      	pop	{r4, r5}
 800ce32:	4770      	bx	lr
 800ce34:	20000c40 	.word	0x20000c40
	...

0800ce40 <wakeup>:
 800ce40:	2320      	movs	r3, #32
 800ce42:	f383 8811 	msr	BASEPRI, r3
 */
static void wakeup(void *p) {
  thread_t *tp = (thread_t *)p;

  chSysLockFromISR();
  switch (tp->p_state) {
 800ce46:	7f03      	ldrb	r3, [r0, #28]
 800ce48:	2b07      	cmp	r3, #7
 800ce4a:	d80e      	bhi.n	800ce6a <wakeup+0x2a>
 800ce4c:	e8df f003 	tbb	[pc, r3]
 800ce50:	240d0d28 	.word	0x240d0d28
 800ce54:	080d0408 	.word	0x080d0408
  case CH_STATE_SUSPENDED:
    *tp->p_u.wttrp = NULL;
    break;
#if CH_CFG_USE_SEMAPHORES == TRUE
  case CH_STATE_WTSEM:
    chSemFastSignalI(tp->p_u.wtsemp);
 800ce58:	6a42      	ldr	r2, [r0, #36]	; 0x24
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->s_cnt++;
 800ce5a:	6893      	ldr	r3, [r2, #8]
 800ce5c:	3301      	adds	r3, #1
 800ce5e:	6093      	str	r3, [r2, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 800ce60:	e9d0 2300 	ldrd	r2, r3, [r0]
 800ce64:	601a      	str	r2, [r3, #0]
  tp->p_next->p_prev = tp->p_prev;
 800ce66:	6802      	ldr	r2, [r0, #0]
 800ce68:	6053      	str	r3, [r2, #4]
static void wakeup(void *p) {
 800ce6a:	b410      	push	{r4}
  tp->p_state = CH_STATE_READY;
 800ce6c:	2200      	movs	r2, #0
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
 800ce6e:	f04f 34ff 	mov.w	r4, #4294967295
  } while (cp->p_prio >= tp->p_prio);
 800ce72:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.r_queue;
 800ce74:	4b0c      	ldr	r3, [pc, #48]	; (800cea8 <wakeup+0x68>)
  tp->p_u.rdymsg = MSG_TIMEOUT;
 800ce76:	6244      	str	r4, [r0, #36]	; 0x24
  tp->p_state = CH_STATE_READY;
 800ce78:	7702      	strb	r2, [r0, #28]
    cp = cp->p_next;
 800ce7a:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 800ce7c:	689a      	ldr	r2, [r3, #8]
 800ce7e:	428a      	cmp	r2, r1
 800ce80:	d2fb      	bcs.n	800ce7a <wakeup+0x3a>
  tp->p_prev = cp->p_prev;
 800ce82:	685a      	ldr	r2, [r3, #4]
 800ce84:	2100      	movs	r1, #0
 800ce86:	e9c0 3200 	strd	r3, r2, [r0]
  tp->p_prev->p_next = tp;
 800ce8a:	6010      	str	r0, [r2, #0]
  cp->p_prev = tp;
 800ce8c:	6058      	str	r0, [r3, #4]
 800ce8e:	f381 8811 	msr	BASEPRI, r1
  (void) chSchReadyI(tp);
  chSysUnlockFromISR();
}
 800ce92:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ce96:	4770      	bx	lr
    *tp->p_u.wttrp = NULL;
 800ce98:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800ce9a:	2200      	movs	r2, #0
 800ce9c:	601a      	str	r2, [r3, #0]
    break;
 800ce9e:	e7e4      	b.n	800ce6a <wakeup+0x2a>
 800cea0:	2300      	movs	r3, #0
 800cea2:	f383 8811 	msr	BASEPRI, r3
 800cea6:	4770      	bx	lr
 800cea8:	20000c40 	.word	0x20000c40
 800ceac:	00000000 	.word	0x00000000

0800ceb0 <_scheduler_init>:
  tqp->p_next = (thread_t *)tqp;
 800ceb0:	4b03      	ldr	r3, [pc, #12]	; (800cec0 <_scheduler_init+0x10>)
  ch.rlist.r_prio = NOPRIO;
 800ceb2:	2200      	movs	r2, #0
  tqp->p_prev = (thread_t *)tqp;
 800ceb4:	e9c3 3300 	strd	r3, r3, [r3]
  ch.rlist.r_older = (thread_t *)&ch.rlist;
 800ceb8:	e9c3 3304 	strd	r3, r3, [r3, #16]
  ch.rlist.r_prio = NOPRIO;
 800cebc:	609a      	str	r2, [r3, #8]
}
 800cebe:	4770      	bx	lr
 800cec0:	20000c40 	.word	0x20000c40
	...

0800ced0 <chSchReadyI>:
thread_t *chSchReadyI(thread_t *tp) {
 800ced0:	4601      	mov	r1, r0
  tp->p_state = CH_STATE_READY;
 800ced2:	2200      	movs	r2, #0
  cp = (thread_t *)&ch.rlist.r_queue;
 800ced4:	4b06      	ldr	r3, [pc, #24]	; (800cef0 <chSchReadyI+0x20>)
  } while (cp->p_prio >= tp->p_prio);
 800ced6:	6880      	ldr	r0, [r0, #8]
  tp->p_state = CH_STATE_READY;
 800ced8:	770a      	strb	r2, [r1, #28]
    cp = cp->p_next;
 800ceda:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 800cedc:	689a      	ldr	r2, [r3, #8]
 800cede:	4282      	cmp	r2, r0
 800cee0:	d2fb      	bcs.n	800ceda <chSchReadyI+0xa>
  tp->p_prev = cp->p_prev;
 800cee2:	685a      	ldr	r2, [r3, #4]
}
 800cee4:	4608      	mov	r0, r1
  tp->p_prev = cp->p_prev;
 800cee6:	e9c1 3200 	strd	r3, r2, [r1]
  tp->p_prev->p_next = tp;
 800ceea:	6011      	str	r1, [r2, #0]
  cp->p_prev = tp;
 800ceec:	6059      	str	r1, [r3, #4]
}
 800ceee:	4770      	bx	lr
 800cef0:	20000c40 	.word	0x20000c40
	...

0800cf00 <chSchGoSleepS>:
  otp = currp;
 800cf00:	4b08      	ldr	r3, [pc, #32]	; (800cf24 <chSchGoSleepS+0x24>)
 800cf02:	6999      	ldr	r1, [r3, #24]
  thread_t *tp = tqp->p_next;
 800cf04:	681a      	ldr	r2, [r3, #0]
void chSchGoSleepS(tstate_t newstate) {
 800cf06:	b410      	push	{r4}
  otp->p_state = newstate;
 800cf08:	7708      	strb	r0, [r1, #28]
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
 800cf0a:	2004      	movs	r0, #4
 800cf0c:	77c8      	strb	r0, [r1, #31]
  tqp->p_next = tp->p_next;
 800cf0e:	6810      	ldr	r0, [r2, #0]
 800cf10:	6018      	str	r0, [r3, #0]
  currp->p_state = CH_STATE_CURRENT;
 800cf12:	2401      	movs	r4, #1
  tqp->p_next->p_prev = (thread_t *)tqp;
 800cf14:	6043      	str	r3, [r0, #4]
 800cf16:	7714      	strb	r4, [r2, #28]
  chSysSwitch(currp, otp);
 800cf18:	4610      	mov	r0, r2
}
 800cf1a:	f85d 4b04 	ldr.w	r4, [sp], #4
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 800cf1e:	619a      	str	r2, [r3, #24]
  chSysSwitch(currp, otp);
 800cf20:	f7ff b8f6 	b.w	800c110 <_port_switch>
 800cf24:	20000c40 	.word	0x20000c40
	...

0800cf30 <chSchGoSleepTimeoutS>:
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 800cf30:	b530      	push	{r4, r5, lr}

  chDbgCheckClassS();

  if (TIME_INFINITE != time) {
 800cf32:	1c4b      	adds	r3, r1, #1
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 800cf34:	b087      	sub	sp, #28
  if (TIME_INFINITE != time) {
 800cf36:	d012      	beq.n	800cf5e <chSchGoSleepTimeoutS+0x2e>
    virtual_timer_t vt;

    chVTDoSetI(&vt, time, wakeup, currp);
 800cf38:	4c0c      	ldr	r4, [pc, #48]	; (800cf6c <chSchGoSleepTimeoutS+0x3c>)
 800cf3a:	4a0d      	ldr	r2, [pc, #52]	; (800cf70 <chSchGoSleepTimeoutS+0x40>)
 800cf3c:	69a3      	ldr	r3, [r4, #24]
 800cf3e:	4605      	mov	r5, r0
 800cf40:	a801      	add	r0, sp, #4
 800cf42:	f7ff ff45 	bl	800cdd0 <chVTDoSetI>
    chSchGoSleepS(newstate);
 800cf46:	4628      	mov	r0, r5
 800cf48:	f7ff ffda 	bl	800cf00 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
 800cf4c:	9b04      	ldr	r3, [sp, #16]
 800cf4e:	b113      	cbz	r3, 800cf56 <chSchGoSleepTimeoutS+0x26>
      chVTDoResetI(&vt);
 800cf50:	a801      	add	r0, sp, #4
 800cf52:	f7ff ff5d 	bl	800ce10 <chVTDoResetI>
  }
  else {
    chSchGoSleepS(newstate);
  }

  return currp->p_u.rdymsg;
 800cf56:	69a3      	ldr	r3, [r4, #24]
}
 800cf58:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800cf5a:	b007      	add	sp, #28
 800cf5c:	bd30      	pop	{r4, r5, pc}
 800cf5e:	4c03      	ldr	r4, [pc, #12]	; (800cf6c <chSchGoSleepTimeoutS+0x3c>)
    chSchGoSleepS(newstate);
 800cf60:	f7ff ffce 	bl	800cf00 <chSchGoSleepS>
  return currp->p_u.rdymsg;
 800cf64:	69a3      	ldr	r3, [r4, #24]
}
 800cf66:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800cf68:	b007      	add	sp, #28
 800cf6a:	bd30      	pop	{r4, r5, pc}
 800cf6c:	20000c40 	.word	0x20000c40
 800cf70:	0800ce41 	.word	0x0800ce41
	...

0800cf80 <chSchWakeupS>:

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 800cf80:	4b14      	ldr	r3, [pc, #80]	; (800cfd4 <chSchWakeupS+0x54>)
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 800cf82:	b470      	push	{r4, r5, r6}
  if (ntp->p_prio <= currp->p_prio) {
 800cf84:	699e      	ldr	r6, [r3, #24]
 800cf86:	6885      	ldr	r5, [r0, #8]
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 800cf88:	4604      	mov	r4, r0
  if (ntp->p_prio <= currp->p_prio) {
 800cf8a:	68b0      	ldr	r0, [r6, #8]
  ntp->p_u.rdymsg = msg;
 800cf8c:	6261      	str	r1, [r4, #36]	; 0x24
  if (ntp->p_prio <= currp->p_prio) {
 800cf8e:	4285      	cmp	r5, r0
  tp->p_state = CH_STATE_READY;
 800cf90:	f04f 0200 	mov.w	r2, #0
  if (ntp->p_prio <= currp->p_prio) {
 800cf94:	d80b      	bhi.n	800cfae <chSchWakeupS+0x2e>
  tp->p_state = CH_STATE_READY;
 800cf96:	7722      	strb	r2, [r4, #28]
    cp = cp->p_next;
 800cf98:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 800cf9a:	689a      	ldr	r2, [r3, #8]
 800cf9c:	4295      	cmp	r5, r2
 800cf9e:	d9fb      	bls.n	800cf98 <chSchWakeupS+0x18>
  tp->p_prev = cp->p_prev;
 800cfa0:	685a      	ldr	r2, [r3, #4]
 800cfa2:	e9c4 3200 	strd	r3, r2, [r4]
  tp->p_prev->p_next = tp;
 800cfa6:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 800cfa8:	605c      	str	r4, [r3, #4]
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
  }
}
 800cfaa:	bc70      	pop	{r4, r5, r6}
 800cfac:	4770      	bx	lr
  tp->p_state = CH_STATE_READY;
 800cfae:	7732      	strb	r2, [r6, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
 800cfb0:	461a      	mov	r2, r3
    cp = cp->p_next;
 800cfb2:	6812      	ldr	r2, [r2, #0]
  } while (cp->p_prio >= tp->p_prio);
 800cfb4:	6891      	ldr	r1, [r2, #8]
 800cfb6:	4288      	cmp	r0, r1
 800cfb8:	d9fb      	bls.n	800cfb2 <chSchWakeupS+0x32>
  tp->p_prev = cp->p_prev;
 800cfba:	6851      	ldr	r1, [r2, #4]
 800cfbc:	6071      	str	r1, [r6, #4]
    ntp->p_state = CH_STATE_CURRENT;
 800cfbe:	2001      	movs	r0, #1
  tp->p_next = cp;
 800cfc0:	6032      	str	r2, [r6, #0]
  tp->p_prev->p_next = tp;
 800cfc2:	600e      	str	r6, [r1, #0]
  cp->p_prev = tp;
 800cfc4:	6056      	str	r6, [r2, #4]
    ntp->p_state = CH_STATE_CURRENT;
 800cfc6:	7720      	strb	r0, [r4, #28]
    chSysSwitch(ntp, otp);
 800cfc8:	4631      	mov	r1, r6
 800cfca:	4620      	mov	r0, r4
    setcurrp(ntp);
 800cfcc:	619c      	str	r4, [r3, #24]
}
 800cfce:	bc70      	pop	{r4, r5, r6}
    chSysSwitch(ntp, otp);
 800cfd0:	f7ff b89e 	b.w	800c110 <_port_switch>
 800cfd4:	20000c40 	.word	0x20000c40
	...

0800cfe0 <chSchIsPreemptionRequired>:
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.r_queue);
 800cfe0:	4a08      	ldr	r2, [pc, #32]	; (800d004 <chSchIsPreemptionRequired+0x24>)
  tprio_t p2 = currp->p_prio;
 800cfe2:	6993      	ldr	r3, [r2, #24]
  tprio_t p1 = firstprio(&ch.rlist.r_queue);
 800cfe4:	6811      	ldr	r1, [r2, #0]
#if CH_CFG_TIME_QUANTUM > 0
  /* If the running thread has not reached its time quantum, reschedule only
     if the first thread on the ready queue has a higher priority.
     Otherwise, if the running thread has used up its time quantum, reschedule
     if the first thread on the ready queue has equal or higher priority.*/
  return (currp->p_preempt > (tslices_t)0) ? (p1 > p2) : (p1 >= p2);
 800cfe6:	7fda      	ldrb	r2, [r3, #31]
  tprio_t p1 = firstprio(&ch.rlist.r_queue);
 800cfe8:	6888      	ldr	r0, [r1, #8]
  tprio_t p2 = currp->p_prio;
 800cfea:	689b      	ldr	r3, [r3, #8]
  return (currp->p_preempt > (tslices_t)0) ? (p1 > p2) : (p1 >= p2);
 800cfec:	b922      	cbnz	r2, 800cff8 <chSchIsPreemptionRequired+0x18>
 800cfee:	4298      	cmp	r0, r3
 800cff0:	bf34      	ite	cc
 800cff2:	2000      	movcc	r0, #0
 800cff4:	2001      	movcs	r0, #1
#else
  /* If the round robin preemption feature is not enabled then performs a
     simpler comparison.*/
  return p1 > p2;
#endif
}
 800cff6:	4770      	bx	lr
  return (currp->p_preempt > (tslices_t)0) ? (p1 > p2) : (p1 >= p2);
 800cff8:	4298      	cmp	r0, r3
 800cffa:	bf94      	ite	ls
 800cffc:	2000      	movls	r0, #0
 800cffe:	2001      	movhi	r0, #1
 800d000:	4770      	bx	lr
 800d002:	bf00      	nop
 800d004:	20000c40 	.word	0x20000c40
	...

0800d010 <chSchDoRescheduleBehind>:
 * @special
 */
void chSchDoRescheduleBehind(void) {
  thread_t *otp;

  otp = currp;
 800d010:	4b0d      	ldr	r3, [pc, #52]	; (800d048 <chSchDoRescheduleBehind+0x38>)
  thread_t *tp = tqp->p_next;
 800d012:	6818      	ldr	r0, [r3, #0]
void chSchDoRescheduleBehind(void) {
 800d014:	b470      	push	{r4, r5, r6}
  tqp->p_next = tp->p_next;
 800d016:	6802      	ldr	r2, [r0, #0]
  otp = currp;
 800d018:	699c      	ldr	r4, [r3, #24]
 800d01a:	601a      	str	r2, [r3, #0]
  /* Picks the first thread from the ready queue and makes it current.*/
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
 800d01c:	68a1      	ldr	r1, [r4, #8]
  tqp->p_next->p_prev = (thread_t *)tqp;
 800d01e:	6053      	str	r3, [r2, #4]
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 800d020:	2601      	movs	r6, #1
#if CH_CFG_TIME_QUANTUM > 0
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
 800d022:	2504      	movs	r5, #4
  tp->p_state = CH_STATE_READY;
 800d024:	2200      	movs	r2, #0
  currp->p_state = CH_STATE_CURRENT;
 800d026:	7706      	strb	r6, [r0, #28]
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 800d028:	6198      	str	r0, [r3, #24]
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
 800d02a:	77e5      	strb	r5, [r4, #31]
  tp->p_state = CH_STATE_READY;
 800d02c:	7722      	strb	r2, [r4, #28]
    cp = cp->p_next;
 800d02e:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 800d030:	689a      	ldr	r2, [r3, #8]
 800d032:	4291      	cmp	r1, r2
 800d034:	d9fb      	bls.n	800d02e <chSchDoRescheduleBehind+0x1e>
  tp->p_prev = cp->p_prev;
 800d036:	685a      	ldr	r2, [r3, #4]
#endif
  (void) chSchReadyI(otp);
  chSysSwitch(currp, otp);
 800d038:	4621      	mov	r1, r4
  tp->p_prev = cp->p_prev;
 800d03a:	e9c4 3200 	strd	r3, r2, [r4]
  tp->p_prev->p_next = tp;
 800d03e:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 800d040:	605c      	str	r4, [r3, #4]
}
 800d042:	bc70      	pop	{r4, r5, r6}
  chSysSwitch(currp, otp);
 800d044:	f7ff b864 	b.w	800c110 <_port_switch>
 800d048:	20000c40 	.word	0x20000c40
 800d04c:	00000000 	.word	0x00000000

0800d050 <chSchDoRescheduleAhead>:
 * @special
 */
void chSchDoRescheduleAhead(void) {
  thread_t *otp, *cp;

  otp = currp;
 800d050:	4b0c      	ldr	r3, [pc, #48]	; (800d084 <chSchDoRescheduleAhead+0x34>)
  thread_t *tp = tqp->p_next;
 800d052:	6818      	ldr	r0, [r3, #0]
void chSchDoRescheduleAhead(void) {
 800d054:	b430      	push	{r4, r5}
  tqp->p_next = tp->p_next;
 800d056:	6802      	ldr	r2, [r0, #0]
  otp = currp;
 800d058:	699c      	ldr	r4, [r3, #24]
 800d05a:	601a      	str	r2, [r3, #0]
  /* Picks the first thread from the ready queue and makes it current.*/
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
 800d05c:	68a1      	ldr	r1, [r4, #8]
  tqp->p_next->p_prev = (thread_t *)tqp;
 800d05e:	6053      	str	r3, [r2, #4]
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 800d060:	2501      	movs	r5, #1

  otp->p_state = CH_STATE_READY;
 800d062:	2200      	movs	r2, #0
  currp->p_state = CH_STATE_CURRENT;
 800d064:	7705      	strb	r5, [r0, #28]
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 800d066:	6198      	str	r0, [r3, #24]
  otp->p_state = CH_STATE_READY;
 800d068:	7722      	strb	r2, [r4, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 800d06a:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio > otp->p_prio);
 800d06c:	689a      	ldr	r2, [r3, #8]
 800d06e:	4291      	cmp	r1, r2
 800d070:	d3fb      	bcc.n	800d06a <chSchDoRescheduleAhead+0x1a>
  /* Insertion on p_prev.*/
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
 800d072:	685a      	ldr	r2, [r3, #4]
  otp->p_prev->p_next = otp;
  cp->p_prev = otp;

  chSysSwitch(currp, otp);
 800d074:	4621      	mov	r1, r4
  otp->p_prev = cp->p_prev;
 800d076:	e9c4 3200 	strd	r3, r2, [r4]
  otp->p_prev->p_next = otp;
 800d07a:	6014      	str	r4, [r2, #0]
  cp->p_prev = otp;
 800d07c:	605c      	str	r4, [r3, #4]
}
 800d07e:	bc30      	pop	{r4, r5}
  chSysSwitch(currp, otp);
 800d080:	f7ff b846 	b.w	800c110 <_port_switch>
 800d084:	20000c40 	.word	0x20000c40
	...

0800d090 <chSchDoReschedule>:
void chSchDoReschedule(void) {

#if CH_CFG_TIME_QUANTUM > 0
  /* If CH_CFG_TIME_QUANTUM is enabled then there are two different scenarios
     to handle on preemption: time quantum elapsed or not.*/
  if (currp->p_preempt == (tslices_t)0) {
 800d090:	4b03      	ldr	r3, [pc, #12]	; (800d0a0 <chSchDoReschedule+0x10>)
 800d092:	699b      	ldr	r3, [r3, #24]
 800d094:	7fdb      	ldrb	r3, [r3, #31]
 800d096:	b10b      	cbz	r3, 800d09c <chSchDoReschedule+0xc>
    chSchDoRescheduleBehind();
  }
  else {
    /* The thread didn't consume all its time quantum so it is put ahead of
       threads with equal priority and does not acquire a new time quantum.*/
    chSchDoRescheduleAhead();
 800d098:	f7ff bfda 	b.w	800d050 <chSchDoRescheduleAhead>
    chSchDoRescheduleBehind();
 800d09c:	f7ff bfb8 	b.w	800d010 <chSchDoRescheduleBehind>
 800d0a0:	20000c40 	.word	0x20000c40
	...

0800d0b0 <_thread_init>:
 * @param[in] prio      the priority level for the new thread
 * @return              The same thread pointer passed as parameter.
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {
 800d0b0:	b470      	push	{r4, r5, r6}
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 800d0b2:	4c0e      	ldr	r4, [pc, #56]	; (800d0ec <_thread_init+0x3c>)
  tp->p_realprio = prio;
 800d0b4:	6401      	str	r1, [r0, #64]	; 0x40
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
 800d0b6:	2204      	movs	r2, #4
  REG_INSERT(tp);
 800d0b8:	6965      	ldr	r5, [r4, #20]
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
 800d0ba:	77c2      	strb	r2, [r0, #31]
  tp->p_prio = prio;
 800d0bc:	6081      	str	r1, [r0, #8]
  tp->p_mtxlist = NULL;
 800d0be:	2200      	movs	r2, #0
  tp->p_refs = (trefs_t)1;
 800d0c0:	2101      	movs	r1, #1
  tp->p_state = CH_STATE_WTSTART;
 800d0c2:	2602      	movs	r6, #2
  tp->p_refs = (trefs_t)1;
 800d0c4:	7781      	strb	r1, [r0, #30]
  tp->p_epending = (eventmask_t)0;
 800d0c6:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
  tp->p_time = (systime_t)0;
 800d0ca:	6202      	str	r2, [r0, #32]
  tp->p_name = NULL;
 800d0cc:	6182      	str	r2, [r0, #24]
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
 800d0ce:	f100 0128 	add.w	r1, r0, #40	; 0x28
#endif
#if CH_CFG_USE_MESSAGES == TRUE
  queue_init(&tp->p_msgqueue);
 800d0d2:	f100 022c 	add.w	r2, r0, #44	; 0x2c
  REG_INSERT(tp);
 800d0d6:	6145      	str	r5, [r0, #20]
 800d0d8:	6104      	str	r4, [r0, #16]
  tp->p_state = CH_STATE_WTSTART;
 800d0da:	8386      	strh	r6, [r0, #28]
  REG_INSERT(tp);
 800d0dc:	6128      	str	r0, [r5, #16]
 800d0de:	6160      	str	r0, [r4, #20]
  tqp->p_next = (thread_t *)tqp;
 800d0e0:	e9c0 120a 	strd	r1, r2, [r0, #40]	; 0x28
  tqp->p_prev = (thread_t *)tqp;
 800d0e4:	6302      	str	r2, [r0, #48]	; 0x30
#endif
#if defined(CH_CFG_THREAD_INIT_HOOK)
  CH_CFG_THREAD_INIT_HOOK(tp);
#endif
  return tp;
}
 800d0e6:	bc70      	pop	{r4, r5, r6}
 800d0e8:	4770      	bx	lr
 800d0ea:	bf00      	nop
 800d0ec:	20000c40 	.word	0x20000c40

0800d0f0 <chThdCreateStatic>:
 *                      the thread into the working space area.
 *
 * @api
 */
thread_t *chThdCreateStatic(void *wsp, size_t size,
                            tprio_t prio, tfunc_t pf, void *arg) {
 800d0f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0f2:	461d      	mov	r5, r3
 800d0f4:	4604      	mov	r4, r0
 800d0f6:	2320      	movs	r3, #32
 800d0f8:	f383 8811 	msr	BASEPRI, r3
  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 800d0fc:	3964      	subs	r1, #100	; 0x64
 800d0fe:	4401      	add	r1, r0
  REG_INSERT(tp);
 800d100:	4e13      	ldr	r6, [pc, #76]	; (800d150 <chThdCreateStatic+0x60>)
  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 800d102:	4b14      	ldr	r3, [pc, #80]	; (800d154 <chThdCreateStatic+0x64>)
  REG_INSERT(tp);
 800d104:	6977      	ldr	r7, [r6, #20]
  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 800d106:	60c1      	str	r1, [r0, #12]
 800d108:	640d      	str	r5, [r1, #64]	; 0x40
 800d10a:	9d06      	ldr	r5, [sp, #24]
 800d10c:	644d      	str	r5, [r1, #68]	; 0x44
 800d10e:	660b      	str	r3, [r1, #96]	; 0x60
  tp->p_state = CH_STATE_WTSTART;
 800d110:	2502      	movs	r5, #2
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
 800d112:	2304      	movs	r3, #4
  tp->p_prio = prio;
 800d114:	6082      	str	r2, [r0, #8]
  tp->p_realprio = prio;
 800d116:	6402      	str	r2, [r0, #64]	; 0x40
  tp->p_state = CH_STATE_WTSTART;
 800d118:	8385      	strh	r5, [r0, #28]
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
 800d11a:	77c3      	strb	r3, [r0, #31]
  tp->p_mtxlist = NULL;
 800d11c:	2500      	movs	r5, #0
  queue_init(&tp->p_msgqueue);
 800d11e:	f100 032c 	add.w	r3, r0, #44	; 0x2c
  list_init(&tp->p_waiting);
 800d122:	f100 0228 	add.w	r2, r0, #40	; 0x28
  tp->p_refs = (trefs_t)1;
 800d126:	2101      	movs	r1, #1
 800d128:	7781      	strb	r1, [r0, #30]
  REG_INSERT(tp);
 800d12a:	e9c0 6704 	strd	r6, r7, [r0, #16]
  tp->p_epending = (eventmask_t)0;
 800d12e:	e9c0 550e 	strd	r5, r5, [r0, #56]	; 0x38
  tp->p_time = (systime_t)0;
 800d132:	6205      	str	r5, [r0, #32]
  tp->p_name = NULL;
 800d134:	6185      	str	r5, [r0, #24]
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateI(wsp, size, prio, pf, arg);
  chSchWakeupS(tp, MSG_OK);
 800d136:	4629      	mov	r1, r5
  REG_INSERT(tp);
 800d138:	6138      	str	r0, [r7, #16]
  tqp->p_next = (thread_t *)tqp;
 800d13a:	e9c0 230a 	strd	r2, r3, [r0, #40]	; 0x28
  tqp->p_prev = (thread_t *)tqp;
 800d13e:	6303      	str	r3, [r0, #48]	; 0x30
 800d140:	6170      	str	r0, [r6, #20]
  chSchWakeupS(tp, MSG_OK);
 800d142:	f7ff ff1d 	bl	800cf80 <chSchWakeupS>
 800d146:	f385 8811 	msr	BASEPRI, r5
  chSysUnlock();

  return tp;
}
 800d14a:	4620      	mov	r0, r4
 800d14c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d14e:	bf00      	nop
 800d150:	20000c40 	.word	0x20000c40
 800d154:	0800c129 	.word	0x0800c129
	...

0800d160 <chThdSleep>:
 *                      - @a TIME_IMMEDIATE this value is not allowed.
 *                      .
 *
 * @api
 */
void chThdSleep(systime_t time) {
 800d160:	b508      	push	{r3, lr}
 800d162:	4601      	mov	r1, r0
 800d164:	2320      	movs	r3, #32
 800d166:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chThdSleepS(systime_t time) {

  chDbgCheck(time != TIME_IMMEDIATE);

  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, time);
 800d16a:	2008      	movs	r0, #8
 800d16c:	f7ff fee0 	bl	800cf30 <chSchGoSleepTimeoutS>
 800d170:	2300      	movs	r3, #0
 800d172:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  chThdSleepS(time);
  chSysUnlock();
}
 800d176:	bd08      	pop	{r3, pc}
	...

0800d180 <chThdExitS>:
 *
 * @param[in] msg       thread exit code
 *
 * @sclass
 */
void chThdExitS(msg_t msg) {
 800d180:	b538      	push	{r3, r4, r5, lr}
  thread_t *tp = currp;
 800d182:	4b0e      	ldr	r3, [pc, #56]	; (800d1bc <chThdExitS+0x3c>)
 800d184:	699c      	ldr	r4, [r3, #24]
  return (bool)(tlp->p_next != (thread_t *)tlp);
 800d186:	6aa3      	ldr	r3, [r4, #40]	; 0x28

  tp->p_u.exitcode = msg;
 800d188:	6260      	str	r0, [r4, #36]	; 0x24
#if defined(CH_CFG_THREAD_EXIT_HOOK)
  CH_CFG_THREAD_EXIT_HOOK(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  while (list_notempty(&tp->p_waiting)) {
 800d18a:	f104 0528 	add.w	r5, r4, #40	; 0x28
 800d18e:	42ab      	cmp	r3, r5
 800d190:	d007      	beq.n	800d1a2 <chThdExitS+0x22>
  tlp->p_next = tp->p_next;
 800d192:	681a      	ldr	r2, [r3, #0]
 800d194:	62a2      	str	r2, [r4, #40]	; 0x28
    (void) chSchReadyI(list_remove(&tp->p_waiting));
 800d196:	4618      	mov	r0, r3
 800d198:	f7ff fe9a 	bl	800ced0 <chSchReadyI>
  return (bool)(tlp->p_next != (thread_t *)tlp);
 800d19c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  while (list_notempty(&tp->p_waiting)) {
 800d19e:	42ab      	cmp	r3, r5
 800d1a0:	d1f7      	bne.n	800d192 <chThdExitS+0x12>
  }
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  /* Static threads are immediately removed from the registry because
     there is no memory to recover.*/
  if ((tp->p_flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC) {
 800d1a2:	7f63      	ldrb	r3, [r4, #29]
 800d1a4:	079b      	lsls	r3, r3, #30
 800d1a6:	d104      	bne.n	800d1b2 <chThdExitS+0x32>
    REG_REMOVE(tp);
 800d1a8:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 800d1ac:	611a      	str	r2, [r3, #16]
 800d1ae:	6922      	ldr	r2, [r4, #16]
 800d1b0:	6153      	str	r3, [r2, #20]
  }
#endif
  chSchGoSleepS(CH_STATE_FINAL);
 800d1b2:	200f      	movs	r0, #15

  /* The thread never returns here.*/
  chDbgAssert(false, "zombies apocalypse");
}
 800d1b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chSchGoSleepS(CH_STATE_FINAL);
 800d1b8:	f7ff bea2 	b.w	800cf00 <chSchGoSleepS>
 800d1bc:	20000c40 	.word	0x20000c40

0800d1c0 <chThdExit>:
 800d1c0:	2320      	movs	r3, #32
 800d1c2:	f383 8811 	msr	BASEPRI, r3
  chThdExitS(msg);
 800d1c6:	f7ff bfdb 	b.w	800d180 <chThdExitS>
 800d1ca:	bf00      	nop
 800d1cc:	0000      	movs	r0, r0
	...

0800d1d0 <chThdResumeI>:
 *
 * @iclass
 */
void chThdResumeI(thread_reference_t *trp, msg_t msg) {

  if (*trp != NULL) {
 800d1d0:	6803      	ldr	r3, [r0, #0]
 800d1d2:	b12b      	cbz	r3, 800d1e0 <chThdResumeI+0x10>
    thread_t *tp = *trp;

    chDbgAssert(tp->p_state == CH_STATE_SUSPENDED,
                "not THD_STATE_SUSPENDED");

    *trp = NULL;
 800d1d4:	2200      	movs	r2, #0
 800d1d6:	6002      	str	r2, [r0, #0]
    tp->p_u.rdymsg = msg;
    (void) chSchReadyI(tp);
 800d1d8:	4618      	mov	r0, r3
    tp->p_u.rdymsg = msg;
 800d1da:	6259      	str	r1, [r3, #36]	; 0x24
    (void) chSchReadyI(tp);
 800d1dc:	f7ff be78 	b.w	800ced0 <chSchReadyI>
  }
}
 800d1e0:	4770      	bx	lr
 800d1e2:	bf00      	nop
	...

0800d1f0 <chThdEnqueueTimeoutS>:
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {

  if (TIME_IMMEDIATE == timeout) {
 800d1f0:	b169      	cbz	r1, 800d20e <chThdEnqueueTimeoutS+0x1e>
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);
 800d1f2:	4b08      	ldr	r3, [pc, #32]	; (800d214 <chThdEnqueueTimeoutS+0x24>)
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {
 800d1f4:	b410      	push	{r4}
 800d1f6:	4602      	mov	r2, r0
  tp->p_prev = tqp->p_prev;
 800d1f8:	6844      	ldr	r4, [r0, #4]
  queue_insert(currp, tqp);
 800d1fa:	699b      	ldr	r3, [r3, #24]

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 800d1fc:	2004      	movs	r0, #4
 800d1fe:	e9c3 2400 	strd	r2, r4, [r3]
  tp->p_prev->p_next = tp;
 800d202:	6023      	str	r3, [r4, #0]
  tqp->p_prev = tp;
 800d204:	6053      	str	r3, [r2, #4]
}
 800d206:	f85d 4b04 	ldr.w	r4, [sp], #4
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 800d20a:	f7ff be91 	b.w	800cf30 <chSchGoSleepTimeoutS>
}
 800d20e:	f04f 30ff 	mov.w	r0, #4294967295
 800d212:	4770      	bx	lr
 800d214:	20000c40 	.word	0x20000c40
	...

0800d220 <chThdDequeueNextI>:
  return (bool)(tqp->p_next != (const thread_t *)tqp);
 800d220:	6802      	ldr	r2, [r0, #0]
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  if (queue_notempty(tqp)) {
 800d222:	4290      	cmp	r0, r2
 800d224:	d00a      	beq.n	800d23c <chThdDequeueNextI+0x1c>
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {
 800d226:	b410      	push	{r4}
  tqp->p_next = tp->p_next;
 800d228:	6814      	ldr	r4, [r2, #0]
 800d22a:	6004      	str	r4, [r0, #0]
 800d22c:	4603      	mov	r3, r0
  tqp->p_next->p_prev = (thread_t *)tqp;
 800d22e:	6063      	str	r3, [r4, #4]
  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
  (void) chSchReadyI(tp);
 800d230:	4610      	mov	r0, r2
  tp->p_u.rdymsg = msg;
 800d232:	6251      	str	r1, [r2, #36]	; 0x24
    chThdDoDequeueNextI(tqp, msg);
  }
}
 800d234:	f85d 4b04 	ldr.w	r4, [sp], #4
  (void) chSchReadyI(tp);
 800d238:	f7ff be4a 	b.w	800ced0 <chSchReadyI>
 800d23c:	4770      	bx	lr
 800d23e:	bf00      	nop

0800d240 <chThdDequeueAllI>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 800d240:	b538      	push	{r3, r4, r5, lr}
  return (bool)(tqp->p_next != (const thread_t *)tqp);
 800d242:	6803      	ldr	r3, [r0, #0]

  while (queue_notempty(tqp)) {
 800d244:	4298      	cmp	r0, r3
 800d246:	d00b      	beq.n	800d260 <chThdDequeueAllI+0x20>
 800d248:	4604      	mov	r4, r0
 800d24a:	460d      	mov	r5, r1
  tqp->p_next = tp->p_next;
 800d24c:	681a      	ldr	r2, [r3, #0]
 800d24e:	6022      	str	r2, [r4, #0]
 800d250:	4618      	mov	r0, r3
  tqp->p_next->p_prev = (thread_t *)tqp;
 800d252:	6054      	str	r4, [r2, #4]
  tp->p_u.rdymsg = msg;
 800d254:	625d      	str	r5, [r3, #36]	; 0x24
  (void) chSchReadyI(tp);
 800d256:	f7ff fe3b 	bl	800ced0 <chSchReadyI>
  return (bool)(tqp->p_next != (const thread_t *)tqp);
 800d25a:	6823      	ldr	r3, [r4, #0]
 800d25c:	429c      	cmp	r4, r3
 800d25e:	d1f5      	bne.n	800d24c <chThdDequeueAllI+0xc>
    chThdDoDequeueNextI(tqp, msg);
  }
}
 800d260:	bd38      	pop	{r3, r4, r5, pc}
 800d262:	bf00      	nop
	...

0800d270 <chTMStartMeasurementX>:
 800d270:	4b01      	ldr	r3, [pc, #4]	; (800d278 <chTMStartMeasurementX+0x8>)
 800d272:	685b      	ldr	r3, [r3, #4]
 *
 * @xclass
 */
NOINLINE void chTMStartMeasurementX(time_measurement_t *tmp) {

  tmp->last = chSysGetRealtimeCounterX();
 800d274:	6083      	str	r3, [r0, #8]
}
 800d276:	4770      	bx	lr
 800d278:	e0001000 	.word	0xe0001000
 800d27c:	00000000 	.word	0x00000000

0800d280 <chTMStopMeasurementX>:
 800d280:	4b0f      	ldr	r3, [pc, #60]	; (800d2c0 <chTMStopMeasurementX+0x40>)
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 800d282:	4a10      	ldr	r2, [pc, #64]	; (800d2c4 <chTMStopMeasurementX+0x44>)
 800d284:	685b      	ldr	r3, [r3, #4]
  tmp->n++;
 800d286:	68c1      	ldr	r1, [r0, #12]
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 800d288:	b4f0      	push	{r4, r5, r6, r7}
  tmp->last = (now - tmp->last) - offset;
 800d28a:	6884      	ldr	r4, [r0, #8]
  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 800d28c:	6f96      	ldr	r6, [r2, #120]	; 0x78
  if (tmp->last > tmp->worst) {
 800d28e:	6842      	ldr	r2, [r0, #4]
  tmp->last = (now - tmp->last) - offset;
 800d290:	1b1b      	subs	r3, r3, r4
  tmp->cumulative += (rttime_t)tmp->last;
 800d292:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
  tmp->last = (now - tmp->last) - offset;
 800d296:	1b9b      	subs	r3, r3, r6
  tmp->cumulative += (rttime_t)tmp->last;
 800d298:	18e6      	adds	r6, r4, r3
 800d29a:	f145 0700 	adc.w	r7, r5, #0
  tmp->n++;
 800d29e:	3101      	adds	r1, #1
  if (tmp->last > tmp->worst) {
 800d2a0:	4293      	cmp	r3, r2
  tmp->last = (now - tmp->last) - offset;
 800d2a2:	e9c0 3102 	strd	r3, r1, [r0, #8]
  tmp->cumulative += (rttime_t)tmp->last;
 800d2a6:	e9c0 6704 	strd	r6, r7, [r0, #16]
  if (tmp->last > tmp->worst) {
 800d2aa:	d805      	bhi.n	800d2b8 <chTMStopMeasurementX+0x38>
  else if (tmp->last < tmp->best) {
 800d2ac:	6802      	ldr	r2, [r0, #0]
 800d2ae:	4293      	cmp	r3, r2
    tmp->best = tmp->last;
 800d2b0:	bf38      	it	cc
 800d2b2:	6003      	strcc	r3, [r0, #0]
}
 800d2b4:	bcf0      	pop	{r4, r5, r6, r7}
 800d2b6:	4770      	bx	lr
    tmp->worst = tmp->last;
 800d2b8:	6043      	str	r3, [r0, #4]
}
 800d2ba:	bcf0      	pop	{r4, r5, r6, r7}
 800d2bc:	4770      	bx	lr
 800d2be:	bf00      	nop
 800d2c0:	e0001000 	.word	0xe0001000
 800d2c4:	20000c40 	.word	0x20000c40
	...

0800d2d0 <_tm_init>:
void _tm_init(void) {
 800d2d0:	b510      	push	{r4, lr}
  ch.tm.offset = (rtcnt_t)0;
 800d2d2:	4c0c      	ldr	r4, [pc, #48]	; (800d304 <_tm_init+0x34>)
void _tm_init(void) {
 800d2d4:	b086      	sub	sp, #24
  ch.tm.offset = (rtcnt_t)0;
 800d2d6:	2300      	movs	r3, #0
  tmp->best       = (rtcnt_t)-1;
 800d2d8:	f04f 31ff 	mov.w	r1, #4294967295
  tmp->cumulative = (rttime_t)0;
 800d2dc:	2200      	movs	r2, #0
  chTMStartMeasurementX(&tm);
 800d2de:	4668      	mov	r0, sp
  ch.tm.offset = (rtcnt_t)0;
 800d2e0:	67a3      	str	r3, [r4, #120]	; 0x78
  tmp->last       = (rtcnt_t)0;
 800d2e2:	e9cd 3301 	strd	r3, r3, [sp, #4]
  tmp->n          = (ucnt_t)0;
 800d2e6:	9303      	str	r3, [sp, #12]
  tmp->cumulative = (rttime_t)0;
 800d2e8:	2300      	movs	r3, #0
 800d2ea:	e9cd 2304 	strd	r2, r3, [sp, #16]
  tmp->best       = (rtcnt_t)-1;
 800d2ee:	9100      	str	r1, [sp, #0]
  chTMStartMeasurementX(&tm);
 800d2f0:	f7ff ffbe 	bl	800d270 <chTMStartMeasurementX>
  chTMStopMeasurementX(&tm);
 800d2f4:	4668      	mov	r0, sp
 800d2f6:	f7ff ffc3 	bl	800d280 <chTMStopMeasurementX>
  ch.tm.offset = tm.last;
 800d2fa:	9b02      	ldr	r3, [sp, #8]
 800d2fc:	67a3      	str	r3, [r4, #120]	; 0x78
}
 800d2fe:	b006      	add	sp, #24
 800d300:	bd10      	pop	{r4, pc}
 800d302:	bf00      	nop
 800d304:	20000c40 	.word	0x20000c40
	...

0800d310 <chMtxObjectInit>:
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->m_queue);
  mp->m_owner = NULL;
 800d310:	2300      	movs	r3, #0
  tqp->p_prev = (thread_t *)tqp;
 800d312:	e9c0 0000 	strd	r0, r0, [r0]
 800d316:	6083      	str	r3, [r0, #8]
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
  mp->m_cnt = (cnt_t)0;
#endif
}
 800d318:	4770      	bx	lr
 800d31a:	bf00      	nop
 800d31c:	0000      	movs	r0, r0
	...

0800d320 <chEvtSignalI>:
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
 800d320:	6b83      	ldr	r3, [r0, #56]	; 0x38
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 800d322:	7f02      	ldrb	r2, [r0, #28]
  tp->p_epending |= events;
 800d324:	4319      	orrs	r1, r3
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 800d326:	2a0a      	cmp	r2, #10
  tp->p_epending |= events;
 800d328:	6381      	str	r1, [r0, #56]	; 0x38
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 800d32a:	d009      	beq.n	800d340 <chEvtSignalI+0x20>
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
 800d32c:	2a0b      	cmp	r2, #11
 800d32e:	d000      	beq.n	800d332 <chEvtSignalI+0x12>
      ((tp->p_state == CH_STATE_WTANDEVT) &&
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
    tp->p_u.rdymsg = MSG_OK;
    (void) chSchReadyI(tp);
  }
}
 800d330:	4770      	bx	lr
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
 800d332:	6a43      	ldr	r3, [r0, #36]	; 0x24
      ((tp->p_state == CH_STATE_WTANDEVT) &&
 800d334:	438b      	bics	r3, r1
 800d336:	d1fb      	bne.n	800d330 <chEvtSignalI+0x10>
    tp->p_u.rdymsg = MSG_OK;
 800d338:	2300      	movs	r3, #0
 800d33a:	6243      	str	r3, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
 800d33c:	f7ff bdc8 	b.w	800ced0 <chSchReadyI>
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
 800d340:	6a43      	ldr	r3, [r0, #36]	; 0x24
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 800d342:	4219      	tst	r1, r3
 800d344:	d1f8      	bne.n	800d338 <chEvtSignalI+0x18>
 800d346:	4770      	bx	lr
	...

0800d350 <chEvtBroadcastFlagsI>:
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 800d350:	b570      	push	{r4, r5, r6, lr}
  elp = esp->es_next;
 800d352:	6804      	ldr	r4, [r0, #0]
  while (elp != (event_listener_t *)esp) {
 800d354:	42a0      	cmp	r0, r4
 800d356:	d00f      	beq.n	800d378 <chEvtBroadcastFlagsI+0x28>
 800d358:	4606      	mov	r6, r0
 800d35a:	460d      	mov	r5, r1
    elp->el_flags |= flags;
 800d35c:	68e3      	ldr	r3, [r4, #12]
 800d35e:	432b      	orrs	r3, r5
 800d360:	60e3      	str	r3, [r4, #12]
    if ((flags == (eventflags_t)0) ||
 800d362:	b115      	cbz	r5, 800d36a <chEvtBroadcastFlagsI+0x1a>
        ((elp->el_flags & elp->el_wflags) != (eventflags_t)0)) {
 800d364:	6922      	ldr	r2, [r4, #16]
    if ((flags == (eventflags_t)0) ||
 800d366:	4213      	tst	r3, r2
 800d368:	d003      	beq.n	800d372 <chEvtBroadcastFlagsI+0x22>
      chEvtSignalI(elp->el_listener, elp->el_events);
 800d36a:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
 800d36e:	f7ff ffd7 	bl	800d320 <chEvtSignalI>
    elp = elp->el_next;
 800d372:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
 800d374:	42a6      	cmp	r6, r4
 800d376:	d1f1      	bne.n	800d35c <chEvtBroadcastFlagsI+0xc>
}
 800d378:	bd70      	pop	{r4, r5, r6, pc}
 800d37a:	bf00      	nop
 800d37c:	0000      	movs	r0, r0
	...

0800d380 <chEvtWaitAny>:
 *                      for, @p ALL_EVENTS enables all the events
 * @return              The mask of the served and cleared events.
 *
 * @api
 */
eventmask_t chEvtWaitAny(eventmask_t events) {
 800d380:	b538      	push	{r3, r4, r5, lr}
  thread_t *ctp = currp;
 800d382:	4b0c      	ldr	r3, [pc, #48]	; (800d3b4 <chEvtWaitAny+0x34>)
 800d384:	699d      	ldr	r5, [r3, #24]
 800d386:	2320      	movs	r3, #32
 800d388:	f383 8811 	msr	BASEPRI, r3
  eventmask_t m;

  chSysLock();
  m = ctp->p_epending & events;
 800d38c:	6bab      	ldr	r3, [r5, #56]	; 0x38
  if (m == (eventmask_t)0) {
 800d38e:	ea13 0400 	ands.w	r4, r3, r0
 800d392:	d106      	bne.n	800d3a2 <chEvtWaitAny+0x22>
 800d394:	4604      	mov	r4, r0
    ctp->p_u.ewmask = events;
 800d396:	6268      	str	r0, [r5, #36]	; 0x24
    chSchGoSleepS(CH_STATE_WTOREVT);
 800d398:	200a      	movs	r0, #10
 800d39a:	f7ff fdb1 	bl	800cf00 <chSchGoSleepS>
    m = ctp->p_epending & events;
 800d39e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800d3a0:	401c      	ands	r4, r3
  }
  ctp->p_epending &= ~m;
 800d3a2:	ea23 0304 	bic.w	r3, r3, r4
 800d3a6:	63ab      	str	r3, [r5, #56]	; 0x38
 800d3a8:	2300      	movs	r3, #0
 800d3aa:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return m;
}
 800d3ae:	4620      	mov	r0, r4
 800d3b0:	bd38      	pop	{r3, r4, r5, pc}
 800d3b2:	bf00      	nop
 800d3b4:	20000c40 	.word	0x20000c40
	...

0800d3c0 <chIQObjectInit>:
 * @param[in] link      application defined pointer
 *
 * @init
 */
void chIQObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                    qnotify_t infy, void *link) {
 800d3c0:	b430      	push	{r4, r5}
 800d3c2:	9c02      	ldr	r4, [sp, #8]
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
  iqp->q_notify  = infy;
  iqp->q_link    = link;
 800d3c4:	6204      	str	r4, [r0, #32]
  iqp->q_counter = 0;
 800d3c6:	2500      	movs	r5, #0
  iqp->q_top     = bp + size;
 800d3c8:	440a      	add	r2, r1
  iqp->q_counter = 0;
 800d3ca:	6085      	str	r5, [r0, #8]
  iqp->q_top     = bp + size;
 800d3cc:	6102      	str	r2, [r0, #16]
 800d3ce:	e9c0 0000 	strd	r0, r0, [r0]
  iqp->q_buffer  = bp;
 800d3d2:	60c1      	str	r1, [r0, #12]
  iqp->q_wrptr   = bp;
 800d3d4:	e9c0 1105 	strd	r1, r1, [r0, #20]
  iqp->q_notify  = infy;
 800d3d8:	61c3      	str	r3, [r0, #28]
}
 800d3da:	bc30      	pop	{r4, r5}
 800d3dc:	4770      	bx	lr
 800d3de:	bf00      	nop

0800d3e0 <chIQPutI>:
 */
static inline bool chIQIsFullI(input_queue_t *iqp) {

  chDbgCheckClassI();

  return (bool)((iqp->q_wrptr == iqp->q_rdptr) && (iqp->q_counter != 0U));
 800d3e0:	e9d0 3205 	ldrd	r3, r2, [r0, #20]
 800d3e4:	4293      	cmp	r3, r2
 800d3e6:	d011      	beq.n	800d40c <chIQPutI+0x2c>

  if (chIQIsFullI(iqp)) {
    return Q_FULL;
  }

  iqp->q_counter++;
 800d3e8:	6882      	ldr	r2, [r0, #8]
msg_t chIQPutI(input_queue_t *iqp, uint8_t b) {
 800d3ea:	b510      	push	{r4, lr}
  iqp->q_counter++;
 800d3ec:	3201      	adds	r2, #1
  *iqp->q_wrptr++ = b;
 800d3ee:	1c5c      	adds	r4, r3, #1
  iqp->q_counter++;
 800d3f0:	6082      	str	r2, [r0, #8]
  *iqp->q_wrptr++ = b;
 800d3f2:	6144      	str	r4, [r0, #20]
 800d3f4:	7019      	strb	r1, [r3, #0]
  if (iqp->q_wrptr >= iqp->q_top) {
 800d3f6:	e9d0 3204 	ldrd	r3, r2, [r0, #16]
 800d3fa:	429a      	cmp	r2, r3
 800d3fc:	d301      	bcc.n	800d402 <chIQPutI+0x22>
    iqp->q_wrptr = iqp->q_buffer;
 800d3fe:	68c3      	ldr	r3, [r0, #12]
 800d400:	6143      	str	r3, [r0, #20]
  }

  chThdDequeueNextI(&iqp->q_waiting, Q_OK);
 800d402:	2100      	movs	r1, #0
 800d404:	f7ff ff0c 	bl	800d220 <chThdDequeueNextI>

  return Q_OK;
 800d408:	2000      	movs	r0, #0
}
 800d40a:	bd10      	pop	{r4, pc}
 800d40c:	6882      	ldr	r2, [r0, #8]
 800d40e:	2a00      	cmp	r2, #0
 800d410:	d0ea      	beq.n	800d3e8 <chIQPutI+0x8>
    return Q_FULL;
 800d412:	f06f 0003 	mvn.w	r0, #3
}
 800d416:	4770      	bx	lr
	...

0800d420 <chIQGetTimeout>:
 * @retval Q_TIMEOUT    if the specified time expired.
 * @retval Q_RESET      if the queue has been reset.
 *
 * @api
 */
msg_t chIQGetTimeout(input_queue_t *iqp, systime_t timeout) {
 800d420:	b570      	push	{r4, r5, r6, lr}
 800d422:	2320      	movs	r3, #32
 800d424:	460e      	mov	r6, r1
 800d426:	4604      	mov	r4, r0
 800d428:	f383 8811 	msr	BASEPRI, r3
  uint8_t b;

  chSysLock();
  if (iqp->q_notify != NULL) {
 800d42c:	69c3      	ldr	r3, [r0, #28]
 800d42e:	b12b      	cbz	r3, 800d43c <chIQGetTimeout+0x1c>
    iqp->q_notify(iqp);
 800d430:	4798      	blx	r3
 800d432:	e003      	b.n	800d43c <chIQGetTimeout+0x1c>
  }

  while (chIQIsEmptyI(iqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&iqp->q_waiting, timeout);
 800d434:	f7ff fedc 	bl	800d1f0 <chThdEnqueueTimeoutS>
    if (msg < Q_OK) {
 800d438:	2800      	cmp	r0, #0
 800d43a:	db15      	blt.n	800d468 <chIQGetTimeout+0x48>
  return (bool)(chQSpaceI(iqp) == 0U);
 800d43c:	68a5      	ldr	r5, [r4, #8]
    msg_t msg = chThdEnqueueTimeoutS(&iqp->q_waiting, timeout);
 800d43e:	4631      	mov	r1, r6
 800d440:	4620      	mov	r0, r4
  while (chIQIsEmptyI(iqp)) {
 800d442:	2d00      	cmp	r5, #0
 800d444:	d0f6      	beq.n	800d434 <chIQGetTimeout+0x14>
      return msg;
    }
  }

  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 800d446:	69a1      	ldr	r1, [r4, #24]
  iqp->q_counter--;
 800d448:	68a3      	ldr	r3, [r4, #8]
  if (iqp->q_rdptr >= iqp->q_top) {
 800d44a:	6925      	ldr	r5, [r4, #16]
  b = *iqp->q_rdptr++;
 800d44c:	1c4a      	adds	r2, r1, #1
  iqp->q_counter--;
 800d44e:	3b01      	subs	r3, #1
  if (iqp->q_rdptr >= iqp->q_top) {
 800d450:	42aa      	cmp	r2, r5
  iqp->q_counter--;
 800d452:	60a3      	str	r3, [r4, #8]
  b = *iqp->q_rdptr++;
 800d454:	61a2      	str	r2, [r4, #24]
    iqp->q_rdptr = iqp->q_buffer;
 800d456:	bf28      	it	cs
 800d458:	68e3      	ldrcs	r3, [r4, #12]
  b = *iqp->q_rdptr++;
 800d45a:	7808      	ldrb	r0, [r1, #0]
    iqp->q_rdptr = iqp->q_buffer;
 800d45c:	bf28      	it	cs
 800d45e:	61a3      	strcs	r3, [r4, #24]
 800d460:	2300      	movs	r3, #0
 800d462:	f383 8811 	msr	BASEPRI, r3
  }
  chSysUnlock();

  return (msg_t)b;
}
 800d466:	bd70      	pop	{r4, r5, r6, pc}
 800d468:	f385 8811 	msr	BASEPRI, r5
 800d46c:	bd70      	pop	{r4, r5, r6, pc}
 800d46e:	bf00      	nop

0800d470 <chIQReadTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t chIQReadTimeout(input_queue_t *iqp, uint8_t *bp,
                       size_t n, systime_t timeout) {
 800d470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d474:	4604      	mov	r4, r0
 800d476:	b083      	sub	sp, #12
 800d478:	4689      	mov	r9, r1
 800d47a:	4693      	mov	fp, r2
 800d47c:	461d      	mov	r5, r3
  qnotify_t nfy = iqp->q_notify;
 800d47e:	f8d0 801c 	ldr.w	r8, [r0, #28]
 800d482:	2720      	movs	r7, #32
 800d484:	f387 8811 	msr	BASEPRI, r7
  size_t r = 0;
 800d488:	2600      	movs	r6, #0
 800d48a:	9701      	str	r7, [sp, #4]
 800d48c:	46b2      	mov	sl, r6

  chDbgCheck(n > 0U);

  chSysLock();
  while (true) {
    if (nfy != NULL) {
 800d48e:	f1b8 0f00 	cmp.w	r8, #0
 800d492:	d005      	beq.n	800d4a0 <chIQReadTimeout+0x30>
      nfy(iqp);
 800d494:	4620      	mov	r0, r4
 800d496:	47c0      	blx	r8
 800d498:	e002      	b.n	800d4a0 <chIQReadTimeout+0x30>
    }

    while (chIQIsEmptyI(iqp)) {
      if (chThdEnqueueTimeoutS(&iqp->q_waiting, timeout) != Q_OK) {
 800d49a:	f7ff fea9 	bl	800d1f0 <chThdEnqueueTimeoutS>
 800d49e:	b9e0      	cbnz	r0, 800d4da <chIQReadTimeout+0x6a>
 800d4a0:	68a7      	ldr	r7, [r4, #8]
 800d4a2:	4629      	mov	r1, r5
 800d4a4:	4620      	mov	r0, r4
    while (chIQIsEmptyI(iqp)) {
 800d4a6:	2f00      	cmp	r7, #0
 800d4a8:	d0f7      	beq.n	800d49a <chIQReadTimeout+0x2a>
        return r;
      }
    }

    iqp->q_counter--;
    *bp++ = *iqp->q_rdptr++;
 800d4aa:	69a2      	ldr	r2, [r4, #24]
    iqp->q_counter--;
 800d4ac:	68a3      	ldr	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
 800d4ae:	1c51      	adds	r1, r2, #1
    iqp->q_counter--;
 800d4b0:	3b01      	subs	r3, #1
    *bp++ = *iqp->q_rdptr++;
 800d4b2:	61a1      	str	r1, [r4, #24]
    iqp->q_counter--;
 800d4b4:	60a3      	str	r3, [r4, #8]
    *bp++ = *iqp->q_rdptr++;
 800d4b6:	7813      	ldrb	r3, [r2, #0]
 800d4b8:	f809 3b01 	strb.w	r3, [r9], #1
    if (iqp->q_rdptr >= iqp->q_top) {
 800d4bc:	6923      	ldr	r3, [r4, #16]
 800d4be:	69a2      	ldr	r2, [r4, #24]
 800d4c0:	429a      	cmp	r2, r3
      iqp->q_rdptr = iqp->q_buffer;
 800d4c2:	bf24      	itt	cs
 800d4c4:	68e3      	ldrcs	r3, [r4, #12]
 800d4c6:	61a3      	strcs	r3, [r4, #24]
 800d4c8:	f38a 8811 	msr	BASEPRI, sl
    }
    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/

    r++;
 800d4cc:	3601      	adds	r6, #1
    if (--n == 0U) {
 800d4ce:	45b3      	cmp	fp, r6
 800d4d0:	d005      	beq.n	800d4de <chIQReadTimeout+0x6e>
 800d4d2:	9b01      	ldr	r3, [sp, #4]
 800d4d4:	f383 8811 	msr	BASEPRI, r3
 800d4d8:	e7d9      	b.n	800d48e <chIQReadTimeout+0x1e>
 800d4da:	f387 8811 	msr	BASEPRI, r7
      return r;
    }

    chSysLock();
  }
}
 800d4de:	4630      	mov	r0, r6
 800d4e0:	b003      	add	sp, #12
 800d4e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4e6:	bf00      	nop
	...

0800d4f0 <chOQObjectInit>:
 * @param[in] link      application defined pointer
 *
 * @init
 */
void chOQObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                    qnotify_t onfy, void *link) {
 800d4f0:	b430      	push	{r4, r5}
 800d4f2:	9c02      	ldr	r4, [sp, #8]

  chThdQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
 800d4f4:	6082      	str	r2, [r0, #8]
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
 800d4f6:	188d      	adds	r5, r1, r2
  oqp->q_buffer  = bp;
 800d4f8:	e9c0 1503 	strd	r1, r5, [r0, #12]
  oqp->q_notify  = onfy;
  oqp->q_link    = link;
 800d4fc:	e9c0 3407 	strd	r3, r4, [r0, #28]
 800d500:	e9c0 0000 	strd	r0, r0, [r0]
  oqp->q_wrptr   = bp;
 800d504:	e9c0 1105 	strd	r1, r1, [r0, #20]
}
 800d508:	bc30      	pop	{r4, r5}
 800d50a:	4770      	bx	lr
 800d50c:	0000      	movs	r0, r0
	...

0800d510 <chOQPutTimeout>:
 * @retval Q_TIMEOUT    if the specified time expired.
 * @retval Q_RESET      if the queue has been reset.
 *
 * @api
 */
msg_t chOQPutTimeout(output_queue_t *oqp, uint8_t b, systime_t timeout) {
 800d510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d512:	4604      	mov	r4, r0
 800d514:	460f      	mov	r7, r1
 800d516:	4616      	mov	r6, r2
 800d518:	2320      	movs	r3, #32
 800d51a:	f383 8811 	msr	BASEPRI, r3
 800d51e:	e003      	b.n	800d528 <chOQPutTimeout+0x18>

  chSysLock();
  while (chOQIsFullI(oqp)) {
    msg_t msg = chThdEnqueueTimeoutS(&oqp->q_waiting, timeout);
 800d520:	f7ff fe66 	bl	800d1f0 <chThdEnqueueTimeoutS>
    if (msg < Q_OK) {
 800d524:	2800      	cmp	r0, #0
 800d526:	db18      	blt.n	800d55a <chOQPutTimeout+0x4a>
 */
static inline bool chOQIsFullI(output_queue_t *oqp) {

  chDbgCheckClassI();

  return (bool)(chQSpaceI(oqp) == 0U);
 800d528:	68a5      	ldr	r5, [r4, #8]
    msg_t msg = chThdEnqueueTimeoutS(&oqp->q_waiting, timeout);
 800d52a:	4631      	mov	r1, r6
 800d52c:	4620      	mov	r0, r4
  while (chOQIsFullI(oqp)) {
 800d52e:	2d00      	cmp	r5, #0
 800d530:	d0f6      	beq.n	800d520 <chOQPutTimeout+0x10>
      return msg;
    }
  }

  oqp->q_counter--;
  *oqp->q_wrptr++ = b;
 800d532:	6962      	ldr	r2, [r4, #20]
  oqp->q_counter--;
 800d534:	68a3      	ldr	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 800d536:	1c51      	adds	r1, r2, #1
  oqp->q_counter--;
 800d538:	3b01      	subs	r3, #1
  *oqp->q_wrptr++ = b;
 800d53a:	6161      	str	r1, [r4, #20]
  oqp->q_counter--;
 800d53c:	60a3      	str	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 800d53e:	7017      	strb	r7, [r2, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
 800d540:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800d544:	429a      	cmp	r2, r3
    oqp->q_wrptr = oqp->q_buffer;
 800d546:	bf24      	itt	cs
 800d548:	68e3      	ldrcs	r3, [r4, #12]
 800d54a:	6163      	strcs	r3, [r4, #20]
  }

  if (oqp->q_notify != NULL) {
 800d54c:	69e3      	ldr	r3, [r4, #28]
 800d54e:	b103      	cbz	r3, 800d552 <chOQPutTimeout+0x42>
    oqp->q_notify(oqp);
 800d550:	4798      	blx	r3
 800d552:	2000      	movs	r0, #0
 800d554:	f380 8811 	msr	BASEPRI, r0
  }
  chSysUnlock();

  return Q_OK;
}
 800d558:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d55a:	f385 8811 	msr	BASEPRI, r5
 800d55e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d560 <chOQGetI>:
 * @return              The byte value from the queue.
 * @retval Q_EMPTY      if the queue is empty.
 *
 * @iclass
 */
msg_t chOQGetI(output_queue_t *oqp) {
 800d560:	b538      	push	{r3, r4, r5, lr}
  return (bool)((oqp->q_wrptr == oqp->q_rdptr) && (oqp->q_counter != 0U));
 800d562:	e9d0 2305 	ldrd	r2, r3, [r0, #20]
 800d566:	429a      	cmp	r2, r3
 800d568:	d00f      	beq.n	800d58a <chOQGetI+0x2a>

  if (chOQIsEmptyI(oqp)) {
    return Q_EMPTY;
  }

  oqp->q_counter++;
 800d56a:	6882      	ldr	r2, [r0, #8]
  b = *oqp->q_rdptr++;
  if (oqp->q_rdptr >= oqp->q_top) {
 800d56c:	6905      	ldr	r5, [r0, #16]
  b = *oqp->q_rdptr++;
 800d56e:	1c59      	adds	r1, r3, #1
  oqp->q_counter++;
 800d570:	3201      	adds	r2, #1
 800d572:	6082      	str	r2, [r0, #8]
  b = *oqp->q_rdptr++;
 800d574:	6181      	str	r1, [r0, #24]
  if (oqp->q_rdptr >= oqp->q_top) {
 800d576:	42a9      	cmp	r1, r5
  b = *oqp->q_rdptr++;
 800d578:	781c      	ldrb	r4, [r3, #0]
  if (oqp->q_rdptr >= oqp->q_top) {
 800d57a:	d301      	bcc.n	800d580 <chOQGetI+0x20>
    oqp->q_rdptr = oqp->q_buffer;
 800d57c:	68c3      	ldr	r3, [r0, #12]
 800d57e:	6183      	str	r3, [r0, #24]
  }

  chThdDequeueNextI(&oqp->q_waiting, Q_OK);
 800d580:	2100      	movs	r1, #0
 800d582:	f7ff fe4d 	bl	800d220 <chThdDequeueNextI>

  return (msg_t)b;
 800d586:	4620      	mov	r0, r4
}
 800d588:	bd38      	pop	{r3, r4, r5, pc}
 800d58a:	6882      	ldr	r2, [r0, #8]
 800d58c:	2a00      	cmp	r2, #0
 800d58e:	d0ec      	beq.n	800d56a <chOQGetI+0xa>
    return Q_EMPTY;
 800d590:	f06f 0002 	mvn.w	r0, #2
}
 800d594:	bd38      	pop	{r3, r4, r5, pc}
 800d596:	bf00      	nop
	...

0800d5a0 <chOQWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t chOQWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                        size_t n, systime_t timeout) {
 800d5a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5a4:	b083      	sub	sp, #12
 800d5a6:	4604      	mov	r4, r0
 800d5a8:	460d      	mov	r5, r1
 800d5aa:	4616      	mov	r6, r2
 800d5ac:	9301      	str	r3, [sp, #4]
  qnotify_t nfy = oqp->q_notify;
 800d5ae:	f8d0 801c 	ldr.w	r8, [r0, #28]
 800d5b2:	f04f 0920 	mov.w	r9, #32
 800d5b6:	f389 8811 	msr	BASEPRI, r9
  size_t w = 0;
 800d5ba:	2700      	movs	r7, #0
 800d5bc:	46ba      	mov	sl, r7
  return (bool)(chQSpaceI(oqp) == 0U);
 800d5be:	68a3      	ldr	r3, [r4, #8]
        return w;
      }
    }
    
    oqp->q_counter--;
    *oqp->q_wrptr++ = *bp++;
 800d5c0:	f105 0b01 	add.w	fp, r5, #1
    if (oqp->q_wrptr >= oqp->q_top) {
      oqp->q_wrptr = oqp->q_buffer;
    }

    if (nfy != NULL) {
      nfy(oqp);
 800d5c4:	4620      	mov	r0, r4
    while (chOQIsFullI(oqp)) {
 800d5c6:	b303      	cbz	r3, 800d60a <chOQWriteTimeout+0x6a>
    *oqp->q_wrptr++ = *bp++;
 800d5c8:	6961      	ldr	r1, [r4, #20]
    oqp->q_counter--;
 800d5ca:	68a3      	ldr	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
 800d5cc:	1c4a      	adds	r2, r1, #1
    oqp->q_counter--;
 800d5ce:	3b01      	subs	r3, #1
    *oqp->q_wrptr++ = *bp++;
 800d5d0:	6162      	str	r2, [r4, #20]
    oqp->q_counter--;
 800d5d2:	60a3      	str	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
 800d5d4:	782b      	ldrb	r3, [r5, #0]
 800d5d6:	700b      	strb	r3, [r1, #0]
    if (oqp->q_wrptr >= oqp->q_top) {
 800d5d8:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
 800d5dc:	4299      	cmp	r1, r3
      oqp->q_wrptr = oqp->q_buffer;
 800d5de:	bf24      	itt	cs
 800d5e0:	68e3      	ldrcs	r3, [r4, #12]
 800d5e2:	6163      	strcs	r3, [r4, #20]
    if (nfy != NULL) {
 800d5e4:	f1b8 0f00 	cmp.w	r8, #0
 800d5e8:	d000      	beq.n	800d5ec <chOQWriteTimeout+0x4c>
      nfy(oqp);
 800d5ea:	47c0      	blx	r8
 800d5ec:	f38a 8811 	msr	BASEPRI, sl
    }
    chSysUnlock(); /* Gives a preemption chance in a controlled point.*/

    w++;
    if (--n == 0U) {
 800d5f0:	3e01      	subs	r6, #1
    w++;
 800d5f2:	f107 0701 	add.w	r7, r7, #1
    if (--n == 0U) {
 800d5f6:	d012      	beq.n	800d61e <chOQWriteTimeout+0x7e>
 800d5f8:	f389 8811 	msr	BASEPRI, r9
 800d5fc:	68a3      	ldr	r3, [r4, #8]
    *oqp->q_wrptr++ = *bp++;
 800d5fe:	465d      	mov	r5, fp
 800d600:	f105 0b01 	add.w	fp, r5, #1
      nfy(oqp);
 800d604:	4620      	mov	r0, r4
    while (chOQIsFullI(oqp)) {
 800d606:	2b00      	cmp	r3, #0
 800d608:	d1de      	bne.n	800d5c8 <chOQWriteTimeout+0x28>
      if (chThdEnqueueTimeoutS(&oqp->q_waiting, timeout) != Q_OK) {
 800d60a:	9901      	ldr	r1, [sp, #4]
 800d60c:	9300      	str	r3, [sp, #0]
 800d60e:	4620      	mov	r0, r4
 800d610:	f7ff fdee 	bl	800d1f0 <chThdEnqueueTimeoutS>
 800d614:	9b00      	ldr	r3, [sp, #0]
 800d616:	2800      	cmp	r0, #0
 800d618:	d0d1      	beq.n	800d5be <chOQWriteTimeout+0x1e>
 800d61a:	f383 8811 	msr	BASEPRI, r3
      return w;
    }
    chSysLock();
  }
}
 800d61e:	4638      	mov	r0, r7
 800d620:	b003      	add	sp, #12
 800d622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d626:	bf00      	nop
	...

0800d630 <_core_init>:
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 800d630:	4a05      	ldr	r2, [pc, #20]	; (800d648 <_core_init+0x18>)
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 800d632:	4b06      	ldr	r3, [pc, #24]	; (800d64c <_core_init+0x1c>)
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 800d634:	4806      	ldr	r0, [pc, #24]	; (800d650 <_core_init+0x20>)
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 800d636:	4907      	ldr	r1, [pc, #28]	; (800d654 <_core_init+0x24>)
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 800d638:	f022 0207 	bic.w	r2, r2, #7
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 800d63c:	f023 0307 	bic.w	r3, r3, #7
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 800d640:	6002      	str	r2, [r0, #0]
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 800d642:	600b      	str	r3, [r1, #0]

  nextmem = (uint8_t *)&buffer[0];
  endmem = (uint8_t *)&buffer[MEM_ALIGN_NEXT(CH_CFG_MEMCORE_SIZE) /
                              MEM_ALIGN_SIZE];
#endif
}
 800d644:	4770      	bx	lr
 800d646:	bf00      	nop
 800d648:	20002bbf 	.word	0x20002bbf
 800d64c:	20020000 	.word	0x20020000
 800d650:	20000e9c 	.word	0x20000e9c
 800d654:	20000e98 	.word	0x20000e98
	...

0800d660 <chCoreAlloc>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAlloc(size_t size) {
 800d660:	4603      	mov	r3, r0
 800d662:	2220      	movs	r2, #32
 800d664:	f382 8811 	msr	BASEPRI, r2

  chDbgCheckClassI();

  size = MEM_ALIGN_NEXT(size);
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
 800d668:	4908      	ldr	r1, [pc, #32]	; (800d68c <chCoreAlloc+0x2c>)
 800d66a:	4a09      	ldr	r2, [pc, #36]	; (800d690 <chCoreAlloc+0x30>)
 800d66c:	6808      	ldr	r0, [r1, #0]
 800d66e:	6812      	ldr	r2, [r2, #0]
  size = MEM_ALIGN_NEXT(size);
 800d670:	3307      	adds	r3, #7
 800d672:	f023 0307 	bic.w	r3, r3, #7
  if ((size_t)(endmem - nextmem) < size) {
 800d676:	1a12      	subs	r2, r2, r0
 800d678:	4293      	cmp	r3, r2
  /*lint -restore*/
    return NULL;
  }
  p = nextmem;
  nextmem += size;
 800d67a:	bf9a      	itte	ls
 800d67c:	181b      	addls	r3, r3, r0
 800d67e:	600b      	strls	r3, [r1, #0]
    return NULL;
 800d680:	2000      	movhi	r0, #0
 800d682:	2300      	movs	r3, #0
 800d684:	f383 8811 	msr	BASEPRI, r3
}
 800d688:	4770      	bx	lr
 800d68a:	bf00      	nop
 800d68c:	20000e9c 	.word	0x20000e9c
 800d690:	20000e98 	.word	0x20000e98
	...

0800d6a0 <_heap_init>:
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.h_provider = chCoreAlloc;
 800d6a0:	4b04      	ldr	r3, [pc, #16]	; (800d6b4 <_heap_init+0x14>)
 800d6a2:	4a05      	ldr	r2, [pc, #20]	; (800d6b8 <_heap_init+0x18>)
 800d6a4:	601a      	str	r2, [r3, #0]
  default_heap.h_free.h.u.next = NULL;
  default_heap.h_free.h.size = 0;
#if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  chMtxObjectInit(&default_heap.h_mtx);
 800d6a6:	f103 0010 	add.w	r0, r3, #16
  default_heap.h_free.h.u.next = NULL;
 800d6aa:	2200      	movs	r2, #0
  default_heap.h_free.h.size = 0;
 800d6ac:	e9c3 2202 	strd	r2, r2, [r3, #8]
  chMtxObjectInit(&default_heap.h_mtx);
 800d6b0:	f7ff be2e 	b.w	800d310 <chMtxObjectInit>
 800d6b4:	20000ea0 	.word	0x20000ea0
 800d6b8:	0800d661 	.word	0x0800d661
 800d6bc:	00000000 	.word	0x00000000

0800d6c0 <SVC_Handler>:
 * @details The SVC vector is used for exception mode re-entering after a
 *          context switch.
 * @note    The PendSV vector is only used in advanced kernel mode.
 */
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void SVC_Handler(void) {
 800d6c0:	b480      	push	{r7}
/*lint -restore*/
  struct port_extctx *ctxp;

#if CORTEX_USE_FPU
  /* Enforcing unstacking of the FP part of the context.*/
  FPU->FPCCR &= ~FPU_FPCCR_LSPACT_Msk;
 800d6c2:	4a09      	ldr	r2, [pc, #36]	; (800d6e8 <SVC_Handler+0x28>)
 800d6c4:	6853      	ldr	r3, [r2, #4]
 800d6c6:	f023 0301 	bic.w	r3, r3, #1
void SVC_Handler(void) {
 800d6ca:	af00      	add	r7, sp, #0
  FPU->FPCCR &= ~FPU_FPCCR_LSPACT_Msk;
 800d6cc:	6053      	str	r3, [r2, #4]
  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 800d6ce:	f3ef 8309 	mrs	r3, PSP
  /* The port_extctx structure is pointed by the PSP register.*/
  ctxp = (struct port_extctx *)__get_PSP();

  /* Discarding the current exception context and positioning the stack to
     point to the real one.*/
  ctxp++;
 800d6d2:	3368      	adds	r3, #104	; 0x68
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 800d6d4:	f383 8809 	msr	PSP, r3
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800d6d8:	2300      	movs	r3, #0
 800d6da:	f383 8811 	msr	BASEPRI, r3
  /* Restoring real position of the original stack frame.*/
  __set_PSP((uint32_t)ctxp);

  /* Restoring the normal interrupts status.*/
  port_unlock_from_isr();
}
 800d6de:	46bd      	mov	sp, r7
 800d6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6e4:	4770      	bx	lr
 800d6e6:	bf00      	nop
 800d6e8:	e000ef30 	.word	0xe000ef30
 800d6ec:	00000000 	.word	0x00000000

0800d6f0 <_port_irq_epilogue>:
/*===========================================================================*/

/**
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {
 800d6f0:	b598      	push	{r3, r4, r7, lr}
 800d6f2:	2320      	movs	r3, #32
 800d6f4:	af00      	add	r7, sp, #0
 800d6f6:	f383 8811 	msr	BASEPRI, r3

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 800d6fa:	4b11      	ldr	r3, [pc, #68]	; (800d740 <_port_irq_epilogue+0x50>)
 800d6fc:	685b      	ldr	r3, [r3, #4]
 800d6fe:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 800d702:	d102      	bne.n	800d70a <_port_irq_epilogue+0x1a>
 800d704:	f383 8811 	msr	BASEPRI, r3
    /* Note, returning without unlocking is intentional, this is done in
       order to keep the rest of the context switch atomic.*/
    return;
  }
  port_unlock_from_isr();
}
 800d708:	bd98      	pop	{r3, r4, r7, pc}
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  uint32_t result;

  /* Empty asm statement works as a scheduling barrier */
  __ASM volatile ("");
  __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 800d70a:	eef1 3a10 	vmrs	r3, fpscr
  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 800d70e:	f3ef 8409 	mrs	r4, PSP
    ctxp->fpscr = (regarm_t)FPU->FPDSCR;
 800d712:	4b0c      	ldr	r3, [pc, #48]	; (800d744 <_port_irq_epilogue+0x54>)
    ctxp->xpsr = (regarm_t)0x01000000;
 800d714:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    ctxp->fpscr = (regarm_t)FPU->FPDSCR;
 800d718:	68db      	ldr	r3, [r3, #12]
 800d71a:	f844 3c08 	str.w	r3, [r4, #-8]
    ctxp->xpsr = (regarm_t)0x01000000;
 800d71e:	f844 2c4c 	str.w	r2, [r4, #-76]
    ctxp--;
 800d722:	f1a4 0368 	sub.w	r3, r4, #104	; 0x68
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 800d726:	f383 8809 	msr	PSP, r3
    if (chSchIsPreemptionRequired()) {
 800d72a:	f7ff fc59 	bl	800cfe0 <chSchIsPreemptionRequired>
 800d72e:	b118      	cbz	r0, 800d738 <_port_irq_epilogue+0x48>
      ctxp->pc = (regarm_t)_port_switch_from_isr;
 800d730:	4b05      	ldr	r3, [pc, #20]	; (800d748 <_port_irq_epilogue+0x58>)
 800d732:	f844 3c50 	str.w	r3, [r4, #-80]
}
 800d736:	bd98      	pop	{r3, r4, r7, pc}
      ctxp->pc = (regarm_t)_port_exit_from_isr;
 800d738:	4b04      	ldr	r3, [pc, #16]	; (800d74c <_port_irq_epilogue+0x5c>)
 800d73a:	f844 3c50 	str.w	r3, [r4, #-80]
}
 800d73e:	bd98      	pop	{r3, r4, r7, pc}
 800d740:	e000ed00 	.word	0xe000ed00
 800d744:	e000ef30 	.word	0xe000ef30
 800d748:	0800c139 	.word	0x0800c139
 800d74c:	0800c13c 	.word	0x0800c13c

0800d750 <halInit>:
 *          board-specific initialization is performed by invoking
 *          @p boardInit() (usually defined in @p board.c).
 *
 * @init
 */
void halInit(void) {
 800d750:	b508      	push	{r3, lr}

  /* Initializes the OS Abstraction Layer.*/
  osalInit();

  /* Platform low level initializations.*/
  hal_lld_init();
 800d752:	f000 fddd 	bl	800e310 <hal_lld_init>

#if (HAL_USE_PAL == TRUE) || defined(__DOXYGEN__)
  palInit(&pal_default_config);
 800d756:	480c      	ldr	r0, [pc, #48]	; (800d788 <halInit+0x38>)
 800d758:	f000 ffea 	bl	800e730 <_pal_lld_init>
#endif
#if (HAL_USE_ADC == TRUE) || defined(__DOXYGEN__)
  adcInit();
#endif
#if (HAL_USE_CAN == TRUE) || defined(__DOXYGEN__)
  canInit();
 800d75c:	f000 f818 	bl	800d790 <canInit>
#endif
#if (HAL_USE_GPT == TRUE) || defined(__DOXYGEN__)
  gptInit();
#endif
#if (HAL_USE_I2C == TRUE) || defined(__DOXYGEN__)
  i2cInit();
 800d760:	f000 f83e 	bl	800d7e0 <i2cInit>
#endif
#if (HAL_USE_I2S == TRUE) || defined(__DOXYGEN__)
  i2sInit();
#endif
#if (HAL_USE_ICU == TRUE) || defined(__DOXYGEN__)
  icuInit();
 800d764:	f000 f84c 	bl	800d800 <icuInit>
#endif
#if (HAL_USE_PWM == TRUE) || defined(__DOXYGEN__)
  pwmInit();
#endif
#if (HAL_USE_SERIAL == TRUE) || defined(__DOXYGEN__)
  sdInit();
 800d768:	f000 f89a 	bl	800d8a0 <sdInit>
#endif
#if (HAL_USE_SDC == TRUE) || defined(__DOXYGEN__)
  sdcInit();
#endif
#if (HAL_USE_SPI == TRUE) || defined(__DOXYGEN__)
  spiInit();
 800d76c:	f000 f8f8 	bl	800d960 <spiInit>
#endif
#if (HAL_USE_UART == TRUE) || defined(__DOXYGEN__)
  uartInit();
 800d770:	f000 f90e 	bl	800d990 <uartInit>
#endif
#if (HAL_USE_USB == TRUE) || defined(__DOXYGEN__)
  usbInit();
 800d774:	f000 f91c 	bl	800d9b0 <usbInit>
#endif
#if (HAL_USE_MMC_SPI == TRUE) || defined(__DOXYGEN__)
  mmcInit();
#endif
#if (HAL_USE_SERIAL_USB == TRUE) || defined(__DOXYGEN__)
  sduInit();
 800d778:	f000 f8ea 	bl	800d950 <sduInit>
  halCommunityInit();
#endif
#endif

  /* Board specific initialization.*/
  boardInit();
 800d77c:	f001 feb8 	bl	800f4f0 <boardInit>
 *  configured to require it.
 */
#if OSAL_ST_MODE != OSAL_ST_MODE_NONE
  stInit();
#endif
}
 800d780:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  stInit();
 800d784:	f000 b8fc 	b.w	800d980 <stInit>
 800d788:	08013c80 	.word	0x08013c80
 800d78c:	00000000 	.word	0x00000000

0800d790 <canInit>:
 *
 * @init
 */
void canInit(void) {

  can_lld_init();
 800d790:	f000 bfb6 	b.w	800e700 <can_lld_init>
	...

0800d7a0 <canObjectInit>:
 *
 * @param[out] canp     pointer to the @p CANDriver object
 *
 * @init
 */
void canObjectInit(CANDriver *canp) {
 800d7a0:	b430      	push	{r4, r5}

  canp->state    = CAN_STOP;
  canp->config   = NULL;
 800d7a2:	2100      	movs	r1, #0
  canp->state    = CAN_STOP;
 800d7a4:	2401      	movs	r4, #1
  osalThreadQueueObjectInit(&canp->txqueue);
  osalThreadQueueObjectInit(&canp->rxqueue);
  osalEventObjectInit(&canp->rxfull_event);
 800d7a6:	f100 0218 	add.w	r2, r0, #24
  osalEventObjectInit(&canp->txempty_event);
 800d7aa:	f100 031c 	add.w	r3, r0, #28
  osalEventObjectInit(&canp->error_event);
 800d7ae:	f100 0520 	add.w	r5, r0, #32
  canp->state    = CAN_STOP;
 800d7b2:	7004      	strb	r4, [r0, #0]
  canp->config   = NULL;
 800d7b4:	6041      	str	r1, [r0, #4]
#if CAN_USE_SLEEP_MODE == TRUE
  osalEventObjectInit(&canp->sleep_event);
 800d7b6:	f100 0424 	add.w	r4, r0, #36	; 0x24
  osalEventObjectInit(&canp->wakeup_event);
 800d7ba:	f100 0128 	add.w	r1, r0, #40	; 0x28
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->es_next = (event_listener_t *)esp;
 800d7be:	6182      	str	r2, [r0, #24]
 800d7c0:	61c3      	str	r3, [r0, #28]
  osalThreadQueueObjectInit(&canp->txqueue);
 800d7c2:	f100 0208 	add.w	r2, r0, #8
  osalThreadQueueObjectInit(&canp->rxqueue);
 800d7c6:	f100 0310 	add.w	r3, r0, #16
 800d7ca:	e9c0 5408 	strd	r5, r4, [r0, #32]
 800d7ce:	6281      	str	r1, [r0, #40]	; 0x28
 800d7d0:	e9c0 2202 	strd	r2, r2, [r0, #8]
 800d7d4:	e9c0 3304 	strd	r3, r3, [r0, #16]
#endif
}
 800d7d8:	bc30      	pop	{r4, r5}
 800d7da:	4770      	bx	lr
 800d7dc:	0000      	movs	r0, r0
	...

0800d7e0 <i2cInit>:
 *
 * @init
 */
void i2cInit(void) {

  i2c_lld_init();
 800d7e0:	f001 b9ce 	b.w	800eb80 <i2c_lld_init>
	...

0800d7f0 <i2cObjectInit>:
 *
 * @init
 */
void i2cObjectInit(I2CDriver *i2cp) {

  i2cp->state  = I2C_STOP;
 800d7f0:	2201      	movs	r2, #1
  i2cp->config = NULL;
 800d7f2:	2300      	movs	r3, #0
  i2cp->state  = I2C_STOP;
 800d7f4:	7002      	strb	r2, [r0, #0]
  i2cp->config = NULL;
 800d7f6:	6043      	str	r3, [r0, #4]
 * @init
 */
static inline void osalMutexObjectInit(mutex_t *mp) {

#if CH_CFG_USE_MUTEXES
  chMtxObjectInit(mp);
 800d7f8:	300c      	adds	r0, #12
 800d7fa:	f7ff bd89 	b.w	800d310 <chMtxObjectInit>
 800d7fe:	bf00      	nop

0800d800 <icuInit>:
 *
 * @init
 */
void icuInit(void) {

  icu_lld_init();
 800d800:	f001 bcee 	b.w	800f1e0 <icu_lld_init>
	...

0800d810 <icuObjectInit>:
 *
 * @init
 */
void icuObjectInit(ICUDriver *icup) {

  icup->state  = ICU_STOP;
 800d810:	2201      	movs	r2, #1
  icup->config = NULL;
 800d812:	2300      	movs	r3, #0
  icup->state  = ICU_STOP;
 800d814:	7002      	strb	r2, [r0, #0]
  icup->config = NULL;
 800d816:	6043      	str	r3, [r0, #4]
}
 800d818:	4770      	bx	lr
 800d81a:	bf00      	nop
 800d81c:	0000      	movs	r0, r0
	...

0800d820 <readt>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
}

static size_t readt(void *ip, uint8_t *bp, size_t n, systime_t timeout) {

  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
 800d820:	300c      	adds	r0, #12
 800d822:	f7ff be25 	b.w	800d470 <chIQReadTimeout>
 800d826:	bf00      	nop
	...

0800d830 <read>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
 800d830:	300c      	adds	r0, #12
 800d832:	f04f 33ff 	mov.w	r3, #4294967295
 800d836:	f7ff be1b 	b.w	800d470 <chIQReadTimeout>
 800d83a:	bf00      	nop
 800d83c:	0000      	movs	r0, r0
	...

0800d840 <writet>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
 800d840:	3030      	adds	r0, #48	; 0x30
 800d842:	f7ff bead 	b.w	800d5a0 <chOQWriteTimeout>
 800d846:	bf00      	nop
	...

0800d850 <write>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
 800d850:	3030      	adds	r0, #48	; 0x30
 800d852:	f04f 33ff 	mov.w	r3, #4294967295
 800d856:	f7ff bea3 	b.w	800d5a0 <chOQWriteTimeout>
 800d85a:	bf00      	nop
 800d85c:	0000      	movs	r0, r0
	...

0800d860 <gett>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
 800d860:	300c      	adds	r0, #12
 800d862:	f7ff bddd 	b.w	800d420 <chIQGetTimeout>
 800d866:	bf00      	nop
	...

0800d870 <get>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
 800d870:	300c      	adds	r0, #12
 800d872:	f04f 31ff 	mov.w	r1, #4294967295
 800d876:	f7ff bdd3 	b.w	800d420 <chIQGetTimeout>
 800d87a:	bf00      	nop
 800d87c:	0000      	movs	r0, r0
	...

0800d880 <putt>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
 800d880:	3030      	adds	r0, #48	; 0x30
 800d882:	f7ff be45 	b.w	800d510 <chOQPutTimeout>
 800d886:	bf00      	nop
	...

0800d890 <put>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
 800d890:	3030      	adds	r0, #48	; 0x30
 800d892:	f04f 32ff 	mov.w	r2, #4294967295
 800d896:	f7ff be3b 	b.w	800d510 <chOQPutTimeout>
 800d89a:	bf00      	nop
 800d89c:	0000      	movs	r0, r0
	...

0800d8a0 <sdInit>:
 *
 * @init
 */
void sdInit(void) {

  sd_lld_init();
 800d8a0:	f001 bd6e 	b.w	800f380 <sd_lld_init>
	...

0800d8b0 <sdObjectInit>:
 *                      some data is written in the Queue. The value can be
 *                      @p NULL.
 *
 * @init
 */
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {
 800d8b0:	b570      	push	{r4, r5, r6, lr}

  sdp->vmt = &vmt;
 800d8b2:	4b0e      	ldr	r3, [pc, #56]	; (800d8ec <sdObjectInit+0x3c>)
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {
 800d8b4:	4604      	mov	r4, r0
 800d8b6:	b082      	sub	sp, #8
  sdp->vmt = &vmt;
 800d8b8:	f840 3b04 	str.w	r3, [r0], #4
  osalEventObjectInit(&sdp->event);
  sdp->state = SD_STOP;
 800d8bc:	2601      	movs	r6, #1
  iqObjectInit(&sdp->iqueue, sdp->ib, SERIAL_BUFFERS_SIZE, inotify, sdp);
 800d8be:	9400      	str	r4, [sp, #0]
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {
 800d8c0:	4615      	mov	r5, r2
  iqObjectInit(&sdp->iqueue, sdp->ib, SERIAL_BUFFERS_SIZE, inotify, sdp);
 800d8c2:	460b      	mov	r3, r1
 800d8c4:	6060      	str	r0, [r4, #4]
 800d8c6:	f104 0154 	add.w	r1, r4, #84	; 0x54
 800d8ca:	f104 000c 	add.w	r0, r4, #12
  sdp->state = SD_STOP;
 800d8ce:	7226      	strb	r6, [r4, #8]
  iqObjectInit(&sdp->iqueue, sdp->ib, SERIAL_BUFFERS_SIZE, inotify, sdp);
 800d8d0:	2210      	movs	r2, #16
 800d8d2:	f7ff fd75 	bl	800d3c0 <chIQObjectInit>
  oqObjectInit(&sdp->oqueue, sdp->ob, SERIAL_BUFFERS_SIZE, onotify, sdp);
 800d8d6:	9400      	str	r4, [sp, #0]
 800d8d8:	462b      	mov	r3, r5
 800d8da:	f104 0164 	add.w	r1, r4, #100	; 0x64
 800d8de:	f104 0030 	add.w	r0, r4, #48	; 0x30
 800d8e2:	2210      	movs	r2, #16
 800d8e4:	f7ff fe04 	bl	800d4f0 <chOQObjectInit>
}
 800d8e8:	b002      	add	sp, #8
 800d8ea:	bd70      	pop	{r4, r5, r6, pc}
 800d8ec:	08013b20 	.word	0x08013b20

0800d8f0 <sdStart>:
 *                      If this parameter is set to @p NULL then a default
 *                      configuration is used.
 *
 * @api
 */
void sdStart(SerialDriver *sdp, const SerialConfig *config) {
 800d8f0:	b510      	push	{r4, lr}
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 800d8f2:	2320      	movs	r3, #32
 800d8f4:	4604      	mov	r4, r0
 800d8f6:	f383 8811 	msr	BASEPRI, r3
  osalDbgCheck(sdp != NULL);

  osalSysLock();
  osalDbgAssert((sdp->state == SD_STOP) || (sdp->state == SD_READY),
                "invalid state");
  sd_lld_start(sdp, config);
 800d8fa:	f001 fd51 	bl	800f3a0 <sd_lld_start>
  sdp->state = SD_READY;
 800d8fe:	2302      	movs	r3, #2
 800d900:	7223      	strb	r3, [r4, #8]
 800d902:	2300      	movs	r3, #0
 800d904:	f383 8811 	msr	BASEPRI, r3
  osalSysUnlock();
}
 800d908:	bd10      	pop	{r4, pc}
 800d90a:	bf00      	nop
 800d90c:	0000      	movs	r0, r0
	...

0800d910 <sdIncomingDataI>:
 * @param[in] sdp       pointer to a @p SerialDriver structure
 * @param[in] b         the byte to be written in the driver's Input Queue
 *
 * @iclass
 */
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {
 800d910:	b538      	push	{r3, r4, r5, lr}
  return (bool)(chQSpaceI(iqp) == 0U);
 800d912:	6943      	ldr	r3, [r0, #20]
 800d914:	4604      	mov	r4, r0
 800d916:	460d      	mov	r5, r1

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
 800d918:	b13b      	cbz	r3, 800d92a <sdIncomingDataI+0x1a>
    chnAddFlagsI(sdp, CHN_INPUT_AVAILABLE);
  if (iqPutI(&sdp->iqueue, b) < Q_OK)
 800d91a:	4629      	mov	r1, r5
 800d91c:	f104 000c 	add.w	r0, r4, #12
 800d920:	f7ff fd5e 	bl	800d3e0 <chIQPutI>
 800d924:	2800      	cmp	r0, #0
 800d926:	db0b      	blt.n	800d940 <sdIncomingDataI+0x30>
    chnAddFlagsI(sdp, SD_OVERRUN_ERROR);
}
 800d928:	bd38      	pop	{r3, r4, r5, pc}
  chEvtBroadcastFlagsI(esp, flags);
 800d92a:	2104      	movs	r1, #4
 800d92c:	4408      	add	r0, r1
 800d92e:	f7ff fd0f 	bl	800d350 <chEvtBroadcastFlagsI>
  if (iqPutI(&sdp->iqueue, b) < Q_OK)
 800d932:	4629      	mov	r1, r5
 800d934:	f104 000c 	add.w	r0, r4, #12
 800d938:	f7ff fd52 	bl	800d3e0 <chIQPutI>
 800d93c:	2800      	cmp	r0, #0
 800d93e:	daf3      	bge.n	800d928 <sdIncomingDataI+0x18>
 800d940:	1d20      	adds	r0, r4, #4
 800d942:	2180      	movs	r1, #128	; 0x80
}
 800d944:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d948:	f7ff bd02 	b.w	800d350 <chEvtBroadcastFlagsI>
 800d94c:	0000      	movs	r0, r0
	...

0800d950 <sduInit>:
 *          no need to explicitly initialize the driver.
 *
 * @init
 */
void sduInit(void) {
}
 800d950:	4770      	bx	lr
 800d952:	bf00      	nop
	...

0800d960 <spiInit>:
 *
 * @init
 */
void spiInit(void) {

  spi_lld_init();
 800d960:	f001 bbc6 	b.w	800f0f0 <spi_lld_init>
	...

0800d970 <spiObjectInit>:
 *
 * @init
 */
void spiObjectInit(SPIDriver *spip) {

  spip->state = SPI_STOP;
 800d970:	2201      	movs	r2, #1
  spip->config = NULL;
 800d972:	2300      	movs	r3, #0
  spip->state = SPI_STOP;
 800d974:	7002      	strb	r2, [r0, #0]
#if SPI_USE_WAIT == TRUE
  spip->thread = NULL;
 800d976:	e9c0 3301 	strd	r3, r3, [r0, #4]
  chMtxObjectInit(mp);
 800d97a:	300c      	adds	r0, #12
 800d97c:	f7ff bcc8 	b.w	800d310 <chMtxObjectInit>

0800d980 <stInit>:
 *
 * @init
 */
void stInit(void) {

  st_lld_init();
 800d980:	f001 bc4e 	b.w	800f220 <st_lld_init>
	...

0800d990 <uartInit>:
 *
 * @init
 */
void uartInit(void) {

  uart_lld_init();
 800d990:	f001 bd8e 	b.w	800f4b0 <uart_lld_init>
	...

0800d9a0 <uartObjectInit>:
 * @init
 */
void uartObjectInit(UARTDriver *uartp) {

  uartp->state   = UART_STOP;
  uartp->txstate = UART_TX_IDLE;
 800d9a0:	2300      	movs	r3, #0
  uartp->state   = UART_STOP;
 800d9a2:	2201      	movs	r2, #1
 800d9a4:	7002      	strb	r2, [r0, #0]
  uartp->txstate = UART_TX_IDLE;
 800d9a6:	7043      	strb	r3, [r0, #1]
  uartp->rxstate = UART_RX_IDLE;
 800d9a8:	7083      	strb	r3, [r0, #2]
  uartp->config  = NULL;
 800d9aa:	6043      	str	r3, [r0, #4]
  /* Optional, user-defined initializer.*/
#if defined(UART_DRIVER_EXT_INIT_HOOK)
  UART_DRIVER_EXT_INIT_HOOK(uartp);
#endif
}
 800d9ac:	4770      	bx	lr
 800d9ae:	bf00      	nop

0800d9b0 <usbInit>:
 *
 * @init
 */
void usbInit(void) {

  usb_lld_init();
 800d9b0:	f001 b8fe 	b.w	800ebb0 <usb_lld_init>
	...

0800d9c0 <usbObjectInit>:
  unsigned i;

  usbp->state        = USB_STOP;
  usbp->config       = NULL;
  for (i = 0; i < (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->in_params[i]  = NULL;
 800d9c0:	2300      	movs	r3, #0
  usbp->state        = USB_STOP;
 800d9c2:	2201      	movs	r2, #1
 800d9c4:	7002      	strb	r2, [r0, #0]
    usbp->in_params[i]  = NULL;
 800d9c6:	61c3      	str	r3, [r0, #28]
    usbp->out_params[i] = NULL;
 800d9c8:	6283      	str	r3, [r0, #40]	; 0x28
    usbp->in_params[i]  = NULL;
 800d9ca:	6203      	str	r3, [r0, #32]
    usbp->out_params[i] = NULL;
 800d9cc:	62c3      	str	r3, [r0, #44]	; 0x2c
    usbp->in_params[i]  = NULL;
 800d9ce:	6243      	str	r3, [r0, #36]	; 0x24
    usbp->out_params[i] = NULL;
 800d9d0:	6303      	str	r3, [r0, #48]	; 0x30
  usbp->config       = NULL;
 800d9d2:	e9c0 3301 	strd	r3, r3, [r0, #4]
  }
  usbp->transmitting = 0;
  usbp->receiving    = 0;
}
 800d9d6:	4770      	bx	lr
	...

0800d9e0 <_usb_reset>:
 */
void _usb_reset(USBDriver *usbp) {
  unsigned i;

  usbp->state         = USB_READY;
  usbp->status        = 0;
 800d9e0:	2200      	movs	r2, #0
  usbp->state         = USB_READY;
 800d9e2:	2102      	movs	r1, #2
 800d9e4:	7001      	strb	r1, [r0, #0]
  usbp->status        = 0;
 800d9e6:	64c2      	str	r2, [r0, #76]	; 0x4c
  usbp->address       = 0;
  usbp->configuration = 0;
  usbp->transmitting  = 0;
  usbp->receiving     = 0;
 800d9e8:	e9c0 2202 	strd	r2, r2, [r0, #8]

  /* Invalidates all endpoints into the USBDriver structure.*/
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->epc[i] = NULL;
 800d9ec:	e9c0 2204 	strd	r2, r2, [r0, #16]
 800d9f0:	6182      	str	r2, [r0, #24]
  }

  /* EP0 state machine initialization.*/
  usbp->ep0state = USB_EP0_WAITING_SETUP;
 800d9f2:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34

  /* Low level reset.*/
  usb_lld_reset(usbp);
 800d9f6:	f001 b8f3 	b.w	800ebe0 <usb_lld_reset>
 800d9fa:	bf00      	nop
 800d9fc:	0000      	movs	r0, r0
	...

0800da00 <_usb_ep0setup>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0setup(USBDriver *usbp, usbep_t ep) {
 800da00:	b570      	push	{r4, r5, r6, lr}
  size_t max;

  usbp->ep0state = USB_EP0_WAITING_SETUP;
 800da02:	2300      	movs	r3, #0
void _usb_ep0setup(USBDriver *usbp, usbep_t ep) {
 800da04:	4604      	mov	r4, r0
  usbp->ep0state = USB_EP0_WAITING_SETUP;
 800da06:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  usbReadSetup(usbp, ep, usbp->setup);
 800da0a:	f100 0244 	add.w	r2, r0, #68	; 0x44
 800da0e:	f001 f977 	bl	800ed00 <usb_lld_read_setup>

  /* First verify if the application has an handler installed for this
     request.*/
  /*lint -save -e9007 [13.5] No side effects, it is intentional.*/
  if ((usbp->config->requests_hook_cb == NULL) ||
 800da12:	6863      	ldr	r3, [r4, #4]
 800da14:	689b      	ldr	r3, [r3, #8]
 800da16:	2b00      	cmp	r3, #0
 800da18:	d033      	beq.n	800da82 <_usb_ep0setup+0x82>
      !(usbp->config->requests_hook_cb(usbp))) {
 800da1a:	4620      	mov	r0, r4
 800da1c:	4798      	blx	r3
  if ((usbp->config->requests_hook_cb == NULL) ||
 800da1e:	b380      	cbz	r0, 800da82 <_usb_ep0setup+0x82>
 800da20:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800da22:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
  hw |= (uint16_t)*p << 8U;
 800da26:	f894 004b 	ldrb.w	r0, [r4, #75]	; 0x4b
 800da2a:	f894 204a 	ldrb.w	r2, [r4, #74]	; 0x4a
  }
#endif
  /* Transfer preparation. The request handler must have populated
     correctly the fields ep0next, ep0n and ep0endcb using the macro
     usbSetupTransfer().*/
  max = (size_t)get_hword(&usbp->setup[6]);
 800da2e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  /* The transfer size cannot exceed the specified amount.*/
  if (usbp->ep0n > max) {
 800da32:	428a      	cmp	r2, r1
 800da34:	bf2c      	ite	cs
 800da36:	460a      	movcs	r2, r1
    usbp->ep0n = max;
 800da38:	63e2      	strcc	r2, [r4, #60]	; 0x3c
  }
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
 800da3a:	0618      	lsls	r0, r3, #24
 800da3c:	68e1      	ldr	r1, [r4, #12]
 800da3e:	f100 8099 	bmi.w	800db74 <_usb_ep0setup+0x174>
#endif
    }
  }
  else {
    /* OUT phase.*/
    if (usbp->ep0n != 0U) {
 800da42:	2a00      	cmp	r2, #0
 800da44:	d07b      	beq.n	800db3e <_usb_ep0setup+0x13e>
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 800da46:	698b      	ldr	r3, [r1, #24]
      /* Starts the receive phase.*/
      usbp->ep0state = USB_EP0_RX;
      usbPrepareReceive(usbp, 0, usbp->ep0next, usbp->ep0n);
 800da48:	6ba0      	ldr	r0, [r4, #56]	; 0x38
  osp->rxqueued           = false;
 800da4a:	2100      	movs	r1, #0
      usbp->ep0state = USB_EP0_RX;
 800da4c:	2504      	movs	r5, #4
 800da4e:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
  osp->mode.linear.rxbuf  = buf;
 800da52:	60d8      	str	r0, [r3, #12]
  osp->rxsize             = n;
 800da54:	605a      	str	r2, [r3, #4]
  osp->rxqueued           = false;
 800da56:	7019      	strb	r1, [r3, #0]
  osp->rxcnt              = 0;
 800da58:	6099      	str	r1, [r3, #8]
  usb_lld_prepare_receive(usbp, ep);
 800da5a:	4620      	mov	r0, r4
 800da5c:	f001 f960 	bl	800ed20 <usb_lld_prepare_receive>
 800da60:	2320      	movs	r3, #32
 800da62:	f383 8811 	msr	BASEPRI, r3
  if (usbGetReceiveStatusI(usbp, ep)) {
 800da66:	8963      	ldrh	r3, [r4, #10]
 800da68:	f013 0101 	ands.w	r1, r3, #1
 800da6c:	d105      	bne.n	800da7a <_usb_ep0setup+0x7a>
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800da6e:	f043 0301 	orr.w	r3, r3, #1
 800da72:	8163      	strh	r3, [r4, #10]
  usb_lld_start_out(usbp, ep);
 800da74:	4620      	mov	r0, r4
 800da76:	f001 fad3 	bl	800f020 <usb_lld_start_out>
 800da7a:	2300      	movs	r3, #0
 800da7c:	f383 8811 	msr	BASEPRI, r3
#else
      usb_lld_end_setup(usbp, ep);
#endif
    }
  }
}
 800da80:	bd70      	pop	{r4, r5, r6, pc}
    if (((usbp->setup[0] & USB_RTYPE_TYPE_MASK) != USB_RTYPE_TYPE_STD) ||
 800da82:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800da86:	f013 0560 	ands.w	r5, r3, #96	; 0x60
 800da8a:	4618      	mov	r0, r3
 800da8c:	d011      	beq.n	800dab2 <_usb_ep0setup+0xb2>
      usb_lld_stall_in(usbp, 0);
 800da8e:	2100      	movs	r1, #0
 800da90:	4620      	mov	r0, r4
 800da92:	f001 fafd 	bl	800f090 <usb_lld_stall_in>
      usb_lld_stall_out(usbp, 0);
 800da96:	2100      	movs	r1, #0
 800da98:	4620      	mov	r0, r4
 800da9a:	f001 fae9 	bl	800f070 <usb_lld_stall_out>
      _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 800da9e:	6863      	ldr	r3, [r4, #4]
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	b113      	cbz	r3, 800daaa <_usb_ep0setup+0xaa>
 800daa4:	2105      	movs	r1, #5
 800daa6:	4620      	mov	r0, r4
 800daa8:	4798      	blx	r3
      usbp->ep0state = USB_EP0_ERROR;
 800daaa:	2306      	movs	r3, #6
 800daac:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 800dab0:	bd70      	pop	{r4, r5, r6, pc}
           ((uint32_t)usbp->setup[1] << 8U))) {
 800dab2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 800dab6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
                                        USB_RTYPE_TYPE_MASK)) |
 800daba:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 800dabe:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800dac2:	f000 8114 	beq.w	800dcee <_usb_ep0setup+0x2ee>
 800dac6:	d917      	bls.n	800daf8 <_usb_ep0setup+0xf8>
 800dac8:	f5b2 6fc0 	cmp.w	r2, #1536	; 0x600
 800dacc:	f000 80f6 	beq.w	800dcbc <_usb_ep0setup+0x2bc>
 800dad0:	f240 8099 	bls.w	800dc06 <_usb_ep0setup+0x206>
 800dad4:	f5b2 6f10 	cmp.w	r2, #2304	; 0x900
 800dad8:	d073      	beq.n	800dbc2 <_usb_ep0setup+0x1c2>
 800dada:	f640 4102 	movw	r1, #3074	; 0xc02
 800dade:	428a      	cmp	r2, r1
 800dae0:	f000 80d2 	beq.w	800dc88 <_usb_ep0setup+0x288>
 800dae4:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800dae8:	d1d1      	bne.n	800da8e <_usb_ep0setup+0x8e>
    usbSetupTransfer(usbp, &usbp->configuration, 1, NULL);
 800daea:	f104 024f 	add.w	r2, r4, #79	; 0x4f
 800daee:	2101      	movs	r1, #1
 800daf0:	6425      	str	r5, [r4, #64]	; 0x40
 800daf2:	e9c4 210e 	strd	r2, r1, [r4, #56]	; 0x38
 800daf6:	e796      	b.n	800da26 <_usb_ep0setup+0x26>
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 800daf8:	2a02      	cmp	r2, #2
 800dafa:	f000 80ab 	beq.w	800dc54 <_usb_ep0setup+0x254>
 800dafe:	f240 80a1 	bls.w	800dc44 <_usb_ep0setup+0x244>
 800db02:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800db06:	d06f      	beq.n	800dbe8 <_usb_ep0setup+0x1e8>
 800db08:	f5b2 7f81 	cmp.w	r2, #258	; 0x102
 800db0c:	d1bf      	bne.n	800da8e <_usb_ep0setup+0x8e>
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT) {
 800db0e:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800db12:	2b00      	cmp	r3, #0
 800db14:	d1bb      	bne.n	800da8e <_usb_ep0setup+0x8e>
    if ((usbp->setup[4] & 0x0FU) != 0U) {
 800db16:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 800db1a:	f013 010f 	ands.w	r1, r3, #15
 800db1e:	d007      	beq.n	800db30 <_usb_ep0setup+0x130>
      if ((usbp->setup[4] & 0x80U) != 0U) {
 800db20:	061e      	lsls	r6, r3, #24
        usb_lld_clear_in(usbp, usbp->setup[4] & 0x0FU);
 800db22:	4620      	mov	r0, r4
      if ((usbp->setup[4] & 0x80U) != 0U) {
 800db24:	f100 80fb 	bmi.w	800dd1e <_usb_ep0setup+0x31e>
        usb_lld_clear_out(usbp, usbp->setup[4] & 0x0FU);
 800db28:	f001 fac2 	bl	800f0b0 <usb_lld_clear_out>
 800db2c:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
    usbSetupTransfer(usbp, NULL, 0, NULL);
 800db30:	2300      	movs	r3, #0
 800db32:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
 800db36:	6423      	str	r3, [r4, #64]	; 0x40
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
 800db38:	0603      	lsls	r3, r0, #24
 800db3a:	68e1      	ldr	r1, [r4, #12]
 800db3c:	d436      	bmi.n	800dbac <_usb_ep0setup+0x1ac>
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 800db3e:	694a      	ldr	r2, [r1, #20]
  isp->txqueued           = false;
 800db40:	2300      	movs	r3, #0
      usbp->ep0state = USB_EP0_SENDING_STS;
 800db42:	2105      	movs	r1, #5
 800db44:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
  usb_lld_prepare_transmit(usbp, ep);
 800db48:	4620      	mov	r0, r4
 800db4a:	4619      	mov	r1, r3
  isp->txqueued           = false;
 800db4c:	7013      	strb	r3, [r2, #0]
  isp->mode.linear.txbuf  = buf;
 800db4e:	60d3      	str	r3, [r2, #12]
  isp->txcnt              = 0;
 800db50:	e9c2 3301 	strd	r3, r3, [r2, #4]
  usb_lld_prepare_transmit(usbp, ep);
 800db54:	f001 f954 	bl	800ee00 <usb_lld_prepare_transmit>
 800db58:	2320      	movs	r3, #32
 800db5a:	f383 8811 	msr	BASEPRI, r3
  if (usbGetTransmitStatusI(usbp, ep)) {
 800db5e:	8923      	ldrh	r3, [r4, #8]
 800db60:	f013 0101 	ands.w	r1, r3, #1
 800db64:	d189      	bne.n	800da7a <_usb_ep0setup+0x7a>
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800db66:	f043 0301 	orr.w	r3, r3, #1
 800db6a:	8123      	strh	r3, [r4, #8]
  usb_lld_start_in(usbp, ep);
 800db6c:	4620      	mov	r0, r4
 800db6e:	f001 fa67 	bl	800f040 <usb_lld_start_in>
 800db72:	e782      	b.n	800da7a <_usb_ep0setup+0x7a>
    if (usbp->ep0n != 0U) {
 800db74:	b1d2      	cbz	r2, 800dbac <_usb_ep0setup+0x1ac>
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 800db76:	694b      	ldr	r3, [r1, #20]
      usbPrepareTransmit(usbp, 0, usbp->ep0next, usbp->ep0n);
 800db78:	6ba0      	ldr	r0, [r4, #56]	; 0x38
  isp->txqueued           = false;
 800db7a:	2100      	movs	r1, #0
      usbp->ep0state = USB_EP0_TX;
 800db7c:	2501      	movs	r5, #1
 800db7e:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
  isp->mode.linear.txbuf  = buf;
 800db82:	60d8      	str	r0, [r3, #12]
  isp->txsize             = n;
 800db84:	605a      	str	r2, [r3, #4]
  isp->txqueued           = false;
 800db86:	7019      	strb	r1, [r3, #0]
  isp->txcnt              = 0;
 800db88:	6099      	str	r1, [r3, #8]
  usb_lld_prepare_transmit(usbp, ep);
 800db8a:	4620      	mov	r0, r4
 800db8c:	f001 f938 	bl	800ee00 <usb_lld_prepare_transmit>
 800db90:	2320      	movs	r3, #32
 800db92:	f383 8811 	msr	BASEPRI, r3
  if (usbGetTransmitStatusI(usbp, ep)) {
 800db96:	8923      	ldrh	r3, [r4, #8]
 800db98:	ea13 0105 	ands.w	r1, r3, r5
 800db9c:	f47f af6d 	bne.w	800da7a <_usb_ep0setup+0x7a>
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800dba0:	432b      	orrs	r3, r5
 800dba2:	8123      	strh	r3, [r4, #8]
  usb_lld_start_in(usbp, ep);
 800dba4:	4620      	mov	r0, r4
 800dba6:	f001 fa4b 	bl	800f040 <usb_lld_start_in>
 800dbaa:	e766      	b.n	800da7a <_usb_ep0setup+0x7a>
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 800dbac:	698a      	ldr	r2, [r1, #24]
  osp->rxqueued           = false;
 800dbae:	2300      	movs	r3, #0
      usbp->ep0state = USB_EP0_WAITING_STS;
 800dbb0:	2103      	movs	r1, #3
 800dbb2:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
  usb_lld_prepare_receive(usbp, ep);
 800dbb6:	4619      	mov	r1, r3
  osp->rxqueued           = false;
 800dbb8:	7013      	strb	r3, [r2, #0]
  osp->mode.linear.rxbuf  = buf;
 800dbba:	60d3      	str	r3, [r2, #12]
  osp->rxcnt              = 0;
 800dbbc:	e9c2 3301 	strd	r3, r3, [r2, #4]
 800dbc0:	e74b      	b.n	800da5a <_usb_ep0setup+0x5a>
    usbp->configuration = usbp->setup[2];
 800dbc2:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800dbc6:	f884 304f 	strb.w	r3, [r4, #79]	; 0x4f
    if (usbp->configuration == 0U) {
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	f040 809e 	bne.w	800dd0c <_usb_ep0setup+0x30c>
      usbp->state = USB_SELECTED;
 800dbd0:	2303      	movs	r3, #3
 800dbd2:	7023      	strb	r3, [r4, #0]
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_CONFIGURED);
 800dbd4:	6863      	ldr	r3, [r4, #4]
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d0a9      	beq.n	800db30 <_usb_ep0setup+0x130>
 800dbdc:	4620      	mov	r0, r4
 800dbde:	2102      	movs	r1, #2
 800dbe0:	4798      	blx	r3
 800dbe2:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 800dbe6:	e7a3      	b.n	800db30 <_usb_ep0setup+0x130>
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
 800dbe8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800dbec:	2b01      	cmp	r3, #1
 800dbee:	f47f af4e 	bne.w	800da8e <_usb_ep0setup+0x8e>
      usbp->status &= ~2U;
 800dbf2:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
      usbSetupTransfer(usbp, NULL, 0, NULL);
 800dbf6:	63a5      	str	r5, [r4, #56]	; 0x38
      usbp->status &= ~2U;
 800dbf8:	f023 0302 	bic.w	r3, r3, #2
      usbSetupTransfer(usbp, NULL, 0, NULL);
 800dbfc:	e9c4 550f 	strd	r5, r5, [r4, #60]	; 0x3c
      usbp->status &= ~2U;
 800dc00:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
 800dc04:	e798      	b.n	800db38 <_usb_ep0setup+0x138>
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 800dc06:	f240 3302 	movw	r3, #770	; 0x302
 800dc0a:	429a      	cmp	r2, r3
 800dc0c:	d043      	beq.n	800dc96 <_usb_ep0setup+0x296>
 800dc0e:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 800dc12:	f47f af3c 	bne.w	800da8e <_usb_ep0setup+0x8e>
    if ((usbp->setup[0] == USB_RTYPE_RECIPIENT_DEVICE) &&
 800dc16:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
 800dc1a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800dc1e:	d187      	bne.n	800db30 <_usb_ep0setup+0x130>
  usbp->address = usbp->setup[2];
 800dc20:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800dc24:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
  usb_lld_set_address(usbp);
 800dc28:	4620      	mov	r0, r4
 800dc2a:	f001 f839 	bl	800eca0 <usb_lld_set_address>
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_ADDRESS);
 800dc2e:	6863      	ldr	r3, [r4, #4]
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	b113      	cbz	r3, 800dc3a <_usb_ep0setup+0x23a>
 800dc34:	2101      	movs	r1, #1
 800dc36:	4620      	mov	r0, r4
 800dc38:	4798      	blx	r3
  usbp->state = USB_SELECTED;
 800dc3a:	2303      	movs	r3, #3
 800dc3c:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 800dc40:	7023      	strb	r3, [r4, #0]
 800dc42:	e775      	b.n	800db30 <_usb_ep0setup+0x130>
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 800dc44:	b9ea      	cbnz	r2, 800dc82 <_usb_ep0setup+0x282>
    usbSetupTransfer(usbp, (uint8_t *)&usbp->status, 2, NULL);
 800dc46:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 800dc4a:	2102      	movs	r1, #2
 800dc4c:	6422      	str	r2, [r4, #64]	; 0x40
 800dc4e:	e9c4 010e 	strd	r0, r1, [r4, #56]	; 0x38
 800dc52:	e6e8      	b.n	800da26 <_usb_ep0setup+0x26>
    if ((usbp->setup[4] & 0x80U) != 0U) {
 800dc54:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 800dc58:	f003 010f 	and.w	r1, r3, #15
 800dc5c:	061b      	lsls	r3, r3, #24
      switch (usb_lld_get_status_in(usbp, usbp->setup[4] & 0x0FU)) {
 800dc5e:	4620      	mov	r0, r4
    if ((usbp->setup[4] & 0x80U) != 0U) {
 800dc60:	d457      	bmi.n	800dd12 <_usb_ep0setup+0x312>
      switch (usb_lld_get_status_out(usbp, usbp->setup[4] & 0x0FU)) {
 800dc62:	f001 f82d 	bl	800ecc0 <usb_lld_get_status_out>
 800dc66:	2801      	cmp	r0, #1
 800dc68:	d057      	beq.n	800dd1a <_usb_ep0setup+0x31a>
 800dc6a:	2802      	cmp	r0, #2
 800dc6c:	f47f af0f 	bne.w	800da8e <_usb_ep0setup+0x8e>
        usbSetupTransfer(usbp, (uint8_t *)active_status, 2, NULL);
 800dc70:	4b30      	ldr	r3, [pc, #192]	; (800dd34 <_usb_ep0setup+0x334>)
 800dc72:	63a3      	str	r3, [r4, #56]	; 0x38
 800dc74:	2102      	movs	r1, #2
 800dc76:	2300      	movs	r3, #0
 800dc78:	e9c4 130f 	strd	r1, r3, [r4, #60]	; 0x3c
 800dc7c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800dc80:	e6d1      	b.n	800da26 <_usb_ep0setup+0x26>
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 800dc82:	2a01      	cmp	r2, #1
 800dc84:	f47f af03 	bne.w	800da8e <_usb_ep0setup+0x8e>
    usbSetupTransfer(usbp, (uint8_t *)zero_status, 2, NULL);
 800dc88:	4a2b      	ldr	r2, [pc, #172]	; (800dd38 <_usb_ep0setup+0x338>)
 800dc8a:	63a2      	str	r2, [r4, #56]	; 0x38
 800dc8c:	2102      	movs	r1, #2
 800dc8e:	2200      	movs	r2, #0
 800dc90:	e9c4 120f 	strd	r1, r2, [r4, #60]	; 0x3c
 800dc94:	e6c7      	b.n	800da26 <_usb_ep0setup+0x26>
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT) {
 800dc96:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	f47f aef7 	bne.w	800da8e <_usb_ep0setup+0x8e>
    if ((usbp->setup[4] & 0x0FU) != 0U) {
 800dca0:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 800dca4:	f013 010f 	ands.w	r1, r3, #15
 800dca8:	f43f af42 	beq.w	800db30 <_usb_ep0setup+0x130>
      if ((usbp->setup[4] & 0x80U) != 0U) {
 800dcac:	061d      	lsls	r5, r3, #24
        usb_lld_stall_in(usbp, usbp->setup[4] & 0x0FU);
 800dcae:	4620      	mov	r0, r4
      if ((usbp->setup[4] & 0x80U) != 0U) {
 800dcb0:	d43a      	bmi.n	800dd28 <_usb_ep0setup+0x328>
        usb_lld_stall_out(usbp, usbp->setup[4] & 0x0FU);
 800dcb2:	f001 f9dd 	bl	800f070 <usb_lld_stall_out>
 800dcb6:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 800dcba:	e739      	b.n	800db30 <_usb_ep0setup+0x130>
  hw |= (uint16_t)*p << 8U;
 800dcbc:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
    dp = usbp->config->get_descriptor_cb(usbp, usbp->setup[3],
 800dcc0:	6861      	ldr	r1, [r4, #4]
  hw |= (uint16_t)*p << 8U;
 800dcc2:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
    dp = usbp->config->get_descriptor_cb(usbp, usbp->setup[3],
 800dcc6:	684e      	ldr	r6, [r1, #4]
 800dcc8:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
 800dccc:	f894 1047 	ldrb.w	r1, [r4, #71]	; 0x47
 800dcd0:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800dcd4:	4620      	mov	r0, r4
 800dcd6:	47b0      	blx	r6
    if (dp == NULL) {
 800dcd8:	2800      	cmp	r0, #0
 800dcda:	f43f aed8 	beq.w	800da8e <_usb_ep0setup+0x8e>
    usbSetupTransfer(usbp, (uint8_t *)dp->ud_string, dp->ud_size, NULL);
 800dcde:	e9d0 1300 	ldrd	r1, r3, [r0]
 800dce2:	6425      	str	r5, [r4, #64]	; 0x40
 800dce4:	e9c4 310e 	strd	r3, r1, [r4, #56]	; 0x38
 800dce8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800dcec:	e69b      	b.n	800da26 <_usb_ep0setup+0x26>
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
 800dcee:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800dcf2:	2b01      	cmp	r3, #1
 800dcf4:	f47f aecb 	bne.w	800da8e <_usb_ep0setup+0x8e>
      usbp->status |= 2U;
 800dcf8:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
      usbSetupTransfer(usbp, NULL, 0, NULL);
 800dcfc:	63a5      	str	r5, [r4, #56]	; 0x38
      usbp->status |= 2U;
 800dcfe:	f043 0302 	orr.w	r3, r3, #2
      usbSetupTransfer(usbp, NULL, 0, NULL);
 800dd02:	e9c4 550f 	strd	r5, r5, [r4, #60]	; 0x3c
      usbp->status |= 2U;
 800dd06:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
 800dd0a:	e715      	b.n	800db38 <_usb_ep0setup+0x138>
      usbp->state = USB_ACTIVE;
 800dd0c:	2304      	movs	r3, #4
 800dd0e:	7023      	strb	r3, [r4, #0]
 800dd10:	e760      	b.n	800dbd4 <_usb_ep0setup+0x1d4>
      switch (usb_lld_get_status_in(usbp, usbp->setup[4] & 0x0FU)) {
 800dd12:	f000 ffe5 	bl	800ece0 <usb_lld_get_status_in>
 800dd16:	2801      	cmp	r0, #1
 800dd18:	d1a7      	bne.n	800dc6a <_usb_ep0setup+0x26a>
        usbSetupTransfer(usbp, (uint8_t *)halted_status, 2, NULL);
 800dd1a:	4b08      	ldr	r3, [pc, #32]	; (800dd3c <_usb_ep0setup+0x33c>)
 800dd1c:	e7a9      	b.n	800dc72 <_usb_ep0setup+0x272>
        usb_lld_clear_in(usbp, usbp->setup[4] & 0x0FU);
 800dd1e:	f001 f9d7 	bl	800f0d0 <usb_lld_clear_in>
 800dd22:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 800dd26:	e703      	b.n	800db30 <_usb_ep0setup+0x130>
        usb_lld_stall_in(usbp, usbp->setup[4] & 0x0FU);
 800dd28:	f001 f9b2 	bl	800f090 <usb_lld_stall_in>
 800dd2c:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 800dd30:	e6fe      	b.n	800db30 <_usb_ep0setup+0x130>
 800dd32:	bf00      	nop
 800dd34:	08013b40 	.word	0x08013b40
 800dd38:	08013b60 	.word	0x08013b60
 800dd3c:	08013b50 	.word	0x08013b50

0800dd40 <_usb_ep0in>:
 */
void _usb_ep0in(USBDriver *usbp, usbep_t ep) {
  size_t max;

  (void)ep;
  switch (usbp->ep0state) {
 800dd40:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
void _usb_ep0in(USBDriver *usbp, usbep_t ep) {
 800dd44:	b510      	push	{r4, lr}
 800dd46:	4604      	mov	r4, r0
  switch (usbp->ep0state) {
 800dd48:	2b06      	cmp	r3, #6
 800dd4a:	d823      	bhi.n	800dd94 <_usb_ep0in+0x54>
 800dd4c:	e8df f003 	tbb	[pc, r3]
 800dd50:	58042a58 	.word	0x58042a58
 800dd54:	2358      	.short	0x2358
 800dd56:	58          	.byte	0x58
 800dd57:	00          	.byte	0x00
 800dd58:	68c3      	ldr	r3, [r0, #12]
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 800dd5a:	699a      	ldr	r2, [r3, #24]
      return;
    }
    /* Falls into, it is intentional.*/
  case USB_EP0_WAITING_TX0:
    /* Transmit phase over, receiving the zero sized status packet.*/
    usbp->ep0state = USB_EP0_WAITING_STS;
 800dd5c:	2103      	movs	r1, #3
  osp->rxqueued           = false;
 800dd5e:	2300      	movs	r3, #0
    usbp->ep0state = USB_EP0_WAITING_STS;
 800dd60:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
  usb_lld_prepare_receive(usbp, ep);
 800dd64:	4620      	mov	r0, r4
 800dd66:	4619      	mov	r1, r3
  osp->rxqueued           = false;
 800dd68:	7013      	strb	r3, [r2, #0]
  osp->mode.linear.rxbuf  = buf;
 800dd6a:	60d3      	str	r3, [r2, #12]
  osp->rxcnt              = 0;
 800dd6c:	e9c2 3301 	strd	r3, r3, [r2, #4]
  usb_lld_prepare_receive(usbp, ep);
 800dd70:	f000 ffd6 	bl	800ed20 <usb_lld_prepare_receive>
 800dd74:	2320      	movs	r3, #32
 800dd76:	f383 8811 	msr	BASEPRI, r3
  if (usbGetReceiveStatusI(usbp, ep)) {
 800dd7a:	8963      	ldrh	r3, [r4, #10]
 800dd7c:	f013 0101 	ands.w	r1, r3, #1
 800dd80:	d105      	bne.n	800dd8e <_usb_ep0in+0x4e>
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800dd82:	f043 0301 	orr.w	r3, r3, #1
 800dd86:	8163      	strh	r3, [r4, #10]
  usb_lld_start_out(usbp, ep);
 800dd88:	4620      	mov	r0, r4
 800dd8a:	f001 f949 	bl	800f020 <usb_lld_start_out>
 800dd8e:	2300      	movs	r3, #0
 800dd90:	f383 8811 	msr	BASEPRI, r3
    usbp->ep0state = USB_EP0_ERROR;
    return;
  default:
    osalDbgAssert(false, "EP0 state machine invalid state");
  }
}
 800dd94:	bd10      	pop	{r4, pc}
    if (usbp->ep0endcb != NULL) {
 800dd96:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800dd98:	b103      	cbz	r3, 800dd9c <_usb_ep0in+0x5c>
      usbp->ep0endcb(usbp);
 800dd9a:	4798      	blx	r3
    usbp->ep0state = USB_EP0_WAITING_SETUP;
 800dd9c:	2300      	movs	r3, #0
 800dd9e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 800dda2:	bd10      	pop	{r4, pc}
  hw |= (uint16_t)*p << 8U;
 800dda4:	f890 004b 	ldrb.w	r0, [r0, #75]	; 0x4b
 800dda8:	f894 204a 	ldrb.w	r2, [r4, #74]	; 0x4a
    if ((usbp->ep0n < max) &&
 800ddac:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800ddae:	68e3      	ldr	r3, [r4, #12]
    max = (size_t)get_hword(&usbp->setup[6]);
 800ddb0:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
    if ((usbp->ep0n < max) &&
 800ddb4:	4291      	cmp	r1, r2
 800ddb6:	d2d0      	bcs.n	800dd5a <_usb_ep0in+0x1a>
        ((usbp->ep0n % usbp->epc[0]->in_maxsize) == 0U)) {
 800ddb8:	8a18      	ldrh	r0, [r3, #16]
 800ddba:	fbb1 f2f0 	udiv	r2, r1, r0
 800ddbe:	fb00 1212 	mls	r2, r0, r2, r1
    if ((usbp->ep0n < max) &&
 800ddc2:	2a00      	cmp	r2, #0
 800ddc4:	d1c9      	bne.n	800dd5a <_usb_ep0in+0x1a>
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 800ddc6:	695b      	ldr	r3, [r3, #20]
  usb_lld_prepare_transmit(usbp, ep);
 800ddc8:	4611      	mov	r1, r2
  isp->txqueued           = false;
 800ddca:	701a      	strb	r2, [r3, #0]
  isp->mode.linear.txbuf  = buf;
 800ddcc:	60da      	str	r2, [r3, #12]
  isp->txcnt              = 0;
 800ddce:	e9c3 2201 	strd	r2, r2, [r3, #4]
  usb_lld_prepare_transmit(usbp, ep);
 800ddd2:	4620      	mov	r0, r4
 800ddd4:	f001 f814 	bl	800ee00 <usb_lld_prepare_transmit>
 800ddd8:	2320      	movs	r3, #32
 800ddda:	f383 8811 	msr	BASEPRI, r3
  if (usbGetTransmitStatusI(usbp, ep)) {
 800ddde:	8923      	ldrh	r3, [r4, #8]
 800dde0:	f013 0101 	ands.w	r1, r3, #1
 800dde4:	d105      	bne.n	800ddf2 <_usb_ep0in+0xb2>
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800dde6:	f043 0301 	orr.w	r3, r3, #1
 800ddea:	8123      	strh	r3, [r4, #8]
  usb_lld_start_in(usbp, ep);
 800ddec:	4620      	mov	r0, r4
 800ddee:	f001 f927 	bl	800f040 <usb_lld_start_in>
 800ddf2:	2300      	movs	r3, #0
 800ddf4:	f383 8811 	msr	BASEPRI, r3
      usbp->ep0state = USB_EP0_WAITING_TX0;
 800ddf8:	2302      	movs	r3, #2
 800ddfa:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 800ddfe:	bd10      	pop	{r4, pc}
    usb_lld_stall_in(usbp, 0);
 800de00:	2100      	movs	r1, #0
 800de02:	f001 f945 	bl	800f090 <usb_lld_stall_in>
    usb_lld_stall_out(usbp, 0);
 800de06:	2100      	movs	r1, #0
 800de08:	4620      	mov	r0, r4
 800de0a:	f001 f931 	bl	800f070 <usb_lld_stall_out>
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 800de0e:	6863      	ldr	r3, [r4, #4]
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	b113      	cbz	r3, 800de1a <_usb_ep0in+0xda>
 800de14:	2105      	movs	r1, #5
 800de16:	4620      	mov	r0, r4
 800de18:	4798      	blx	r3
    usbp->ep0state = USB_EP0_ERROR;
 800de1a:	2306      	movs	r3, #6
 800de1c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 800de20:	bd10      	pop	{r4, pc}
 800de22:	bf00      	nop
	...

0800de30 <_usb_ep0out>:
 * @notapi
 */
void _usb_ep0out(USBDriver *usbp, usbep_t ep) {

  (void)ep;
  switch (usbp->ep0state) {
 800de30:	f890 2034 	ldrb.w	r2, [r0, #52]	; 0x34
 800de34:	2a06      	cmp	r2, #6
 800de36:	d814      	bhi.n	800de62 <_usb_ep0out+0x32>
 800de38:	2301      	movs	r3, #1
 800de3a:	4093      	lsls	r3, r2
 800de3c:	f013 0f67 	tst.w	r3, #103	; 0x67
void _usb_ep0out(USBDriver *usbp, usbep_t ep) {
 800de40:	b510      	push	{r4, lr}
 800de42:	4604      	mov	r4, r0
 800de44:	d127      	bne.n	800de96 <_usb_ep0out+0x66>
 800de46:	f013 0208 	ands.w	r2, r3, #8
 800de4a:	d00b      	beq.n	800de64 <_usb_ep0out+0x34>
    return;
  case USB_EP0_WAITING_STS:
    /* Status packet received, it must be zero sized, invoking the callback
       if defined.*/
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
    if (usbGetReceiveTransactionSizeI(usbp, 0) != 0U) {
 800de4c:	68c3      	ldr	r3, [r0, #12]
 800de4e:	699b      	ldr	r3, [r3, #24]
 800de50:	689b      	ldr	r3, [r3, #8]
 800de52:	b92b      	cbnz	r3, 800de60 <_usb_ep0out+0x30>
      break;
    }
#endif
    if (usbp->ep0endcb != NULL) {
 800de54:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800de56:	b103      	cbz	r3, 800de5a <_usb_ep0out+0x2a>
      usbp->ep0endcb(usbp);
 800de58:	4798      	blx	r3
    }
    usbp->ep0state = USB_EP0_WAITING_SETUP;
 800de5a:	2300      	movs	r3, #0
 800de5c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    usbp->ep0state = USB_EP0_ERROR;
    return;
  default:
    osalDbgAssert(false, "EP0 state machine invalid state");
  }
}
 800de60:	bd10      	pop	{r4, pc}
 800de62:	4770      	bx	lr
 800de64:	06db      	lsls	r3, r3, #27
 800de66:	d5fb      	bpl.n	800de60 <_usb_ep0out+0x30>
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 800de68:	68c3      	ldr	r3, [r0, #12]
 800de6a:	695b      	ldr	r3, [r3, #20]
    usbp->ep0state = USB_EP0_SENDING_STS;
 800de6c:	2105      	movs	r1, #5
 800de6e:	f880 1034 	strb.w	r1, [r0, #52]	; 0x34
  isp->txqueued           = false;
 800de72:	701a      	strb	r2, [r3, #0]
  isp->mode.linear.txbuf  = buf;
 800de74:	60da      	str	r2, [r3, #12]
  isp->txcnt              = 0;
 800de76:	e9c3 2201 	strd	r2, r2, [r3, #4]
  usb_lld_prepare_transmit(usbp, ep);
 800de7a:	4611      	mov	r1, r2
 800de7c:	f000 ffc0 	bl	800ee00 <usb_lld_prepare_transmit>
 800de80:	2320      	movs	r3, #32
 800de82:	f383 8811 	msr	BASEPRI, r3
  if (usbGetTransmitStatusI(usbp, ep)) {
 800de86:	8923      	ldrh	r3, [r4, #8]
 800de88:	f013 0101 	ands.w	r1, r3, #1
 800de8c:	d014      	beq.n	800deb8 <_usb_ep0out+0x88>
 800de8e:	2300      	movs	r3, #0
 800de90:	f383 8811 	msr	BASEPRI, r3
}
 800de94:	bd10      	pop	{r4, pc}
    usb_lld_stall_in(usbp, 0);
 800de96:	2100      	movs	r1, #0
 800de98:	f001 f8fa 	bl	800f090 <usb_lld_stall_in>
    usb_lld_stall_out(usbp, 0);
 800de9c:	2100      	movs	r1, #0
 800de9e:	4620      	mov	r0, r4
 800dea0:	f001 f8e6 	bl	800f070 <usb_lld_stall_out>
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 800dea4:	6863      	ldr	r3, [r4, #4]
 800dea6:	681b      	ldr	r3, [r3, #0]
 800dea8:	b113      	cbz	r3, 800deb0 <_usb_ep0out+0x80>
 800deaa:	2105      	movs	r1, #5
 800deac:	4620      	mov	r0, r4
 800deae:	4798      	blx	r3
    usbp->ep0state = USB_EP0_ERROR;
 800deb0:	2306      	movs	r3, #6
 800deb2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 800deb6:	bd10      	pop	{r4, pc}
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800deb8:	f043 0301 	orr.w	r3, r3, #1
 800debc:	8123      	strh	r3, [r4, #8]
  usb_lld_start_in(usbp, ep);
 800debe:	4620      	mov	r0, r4
 800dec0:	f001 f8be 	bl	800f040 <usb_lld_start_in>
 800dec4:	e7e3      	b.n	800de8e <_usb_ep0out+0x5e>
 800dec6:	bf00      	nop
	...

0800ded0 <nvicEnableVector>:
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {

  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 800ded0:	0943      	lsrs	r3, r0, #5
void nvicEnableVector(uint32_t n, uint32_t prio) {
 800ded2:	b410      	push	{r4}
 800ded4:	009b      	lsls	r3, r3, #2
  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 800ded6:	f100 4460 	add.w	r4, r0, #3758096384	; 0xe0000000
 800deda:	f504 4461 	add.w	r4, r4, #57600	; 0xe100
 800dede:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 800dee2:	0109      	lsls	r1, r1, #4
 800dee4:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 800dee8:	f000 001f 	and.w	r0, r0, #31
 800deec:	2201      	movs	r2, #1
  NVIC->IP[n]        = NVIC_PRIORITY_MASK(prio);
 800deee:	b2c9      	uxtb	r1, r1
 800def0:	f884 1300 	strb.w	r1, [r4, #768]	; 0x300
  NVIC->ICPR[n >> 5] = 1 << (n & 0x1F);
 800def4:	fa02 f000 	lsl.w	r0, r2, r0
 800def8:	f8c3 0180 	str.w	r0, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5] = 1 << (n & 0x1F);
}
 800defc:	f85d 4b04 	ldr.w	r4, [sp], #4
  NVIC->ISER[n >> 5] = 1 << (n & 0x1F);
 800df00:	6018      	str	r0, [r3, #0]
}
 800df02:	4770      	bx	lr
	...

0800df10 <nvicSetSystemHandlerPriority>:
 */
void nvicSetSystemHandlerPriority(uint32_t handler, uint32_t prio) {

  osalDbgCheck(handler <= 12);

  SCB->SHP[handler] = NVIC_PRIORITY_MASK(prio);
 800df10:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800df14:	f500 406d 	add.w	r0, r0, #60672	; 0xed00
 800df18:	0109      	lsls	r1, r1, #4
 800df1a:	b2c9      	uxtb	r1, r1
 800df1c:	7601      	strb	r1, [r0, #24]
}
 800df1e:	4770      	bx	lr

0800df20 <Vector6C>:
/**
 * @brief   DMA1 stream 0 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector6C) {
 800df20:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 0) & STM32_DMA_ISR_MASK;
 800df22:	4b07      	ldr	r3, [pc, #28]	; (800df40 <Vector6C+0x20>)
  DMA1->LIFCR = flags << 0;
  if (dma_isr_redir[0].dma_func)
 800df24:	4a07      	ldr	r2, [pc, #28]	; (800df44 <Vector6C+0x24>)
  flags = (DMA1->LISR >> 0) & STM32_DMA_ISR_MASK;
 800df26:	6819      	ldr	r1, [r3, #0]
 800df28:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 0;
 800df2c:	6099      	str	r1, [r3, #8]
  if (dma_isr_redir[0].dma_func)
 800df2e:	6813      	ldr	r3, [r2, #0]
 800df30:	b10b      	cbz	r3, 800df36 <Vector6C+0x16>
    dma_isr_redir[0].dma_func(dma_isr_redir[0].dma_param, flags);
 800df32:	6850      	ldr	r0, [r2, #4]
 800df34:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
}
 800df36:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 800df3a:	f7ff bbd9 	b.w	800d6f0 <_port_irq_epilogue>
 800df3e:	bf00      	nop
 800df40:	40026000 	.word	0x40026000
 800df44:	20000ec0 	.word	0x20000ec0
	...

0800df50 <Vector70>:
OSAL_IRQ_HANDLER(Vector70) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 6) & STM32_DMA_ISR_MASK;
 800df50:	4b08      	ldr	r3, [pc, #32]	; (800df74 <Vector70+0x24>)
  DMA1->LIFCR = flags << 6;
  if (dma_isr_redir[1].dma_func)
 800df52:	4809      	ldr	r0, [pc, #36]	; (800df78 <Vector70+0x28>)
  flags = (DMA1->LISR >> 6) & STM32_DMA_ISR_MASK;
 800df54:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[1].dma_func)
 800df56:	6882      	ldr	r2, [r0, #8]
  flags = (DMA1->LISR >> 6) & STM32_DMA_ISR_MASK;
 800df58:	0989      	lsrs	r1, r1, #6
 800df5a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(Vector70) {
 800df5e:	b510      	push	{r4, lr}
  DMA1->LIFCR = flags << 6;
 800df60:	018c      	lsls	r4, r1, #6
 800df62:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[1].dma_func)
 800df64:	b10a      	cbz	r2, 800df6a <Vector70+0x1a>
    dma_isr_redir[1].dma_func(dma_isr_redir[1].dma_param, flags);
 800df66:	68c0      	ldr	r0, [r0, #12]
 800df68:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800df6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800df6e:	f7ff bbbf 	b.w	800d6f0 <_port_irq_epilogue>
 800df72:	bf00      	nop
 800df74:	40026000 	.word	0x40026000
 800df78:	20000ec0 	.word	0x20000ec0
 800df7c:	00000000 	.word	0x00000000

0800df80 <Vector74>:
OSAL_IRQ_HANDLER(Vector74) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 16) & STM32_DMA_ISR_MASK;
 800df80:	4b08      	ldr	r3, [pc, #32]	; (800dfa4 <Vector74+0x24>)
  DMA1->LIFCR = flags << 16;
  if (dma_isr_redir[2].dma_func)
 800df82:	4809      	ldr	r0, [pc, #36]	; (800dfa8 <Vector74+0x28>)
  flags = (DMA1->LISR >> 16) & STM32_DMA_ISR_MASK;
 800df84:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[2].dma_func)
 800df86:	6902      	ldr	r2, [r0, #16]
  flags = (DMA1->LISR >> 16) & STM32_DMA_ISR_MASK;
 800df88:	0c09      	lsrs	r1, r1, #16
 800df8a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(Vector74) {
 800df8e:	b510      	push	{r4, lr}
  DMA1->LIFCR = flags << 16;
 800df90:	040c      	lsls	r4, r1, #16
 800df92:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[2].dma_func)
 800df94:	b10a      	cbz	r2, 800df9a <Vector74+0x1a>
    dma_isr_redir[2].dma_func(dma_isr_redir[2].dma_param, flags);
 800df96:	6940      	ldr	r0, [r0, #20]
 800df98:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800df9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800df9e:	f7ff bba7 	b.w	800d6f0 <_port_irq_epilogue>
 800dfa2:	bf00      	nop
 800dfa4:	40026000 	.word	0x40026000
 800dfa8:	20000ec0 	.word	0x20000ec0
 800dfac:	00000000 	.word	0x00000000

0800dfb0 <Vector78>:
OSAL_IRQ_HANDLER(Vector78) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 22) & STM32_DMA_ISR_MASK;
 800dfb0:	4b08      	ldr	r3, [pc, #32]	; (800dfd4 <Vector78+0x24>)
  DMA1->LIFCR = flags << 22;
  if (dma_isr_redir[3].dma_func)
 800dfb2:	4809      	ldr	r0, [pc, #36]	; (800dfd8 <Vector78+0x28>)
  flags = (DMA1->LISR >> 22) & STM32_DMA_ISR_MASK;
 800dfb4:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[3].dma_func)
 800dfb6:	6982      	ldr	r2, [r0, #24]
  flags = (DMA1->LISR >> 22) & STM32_DMA_ISR_MASK;
 800dfb8:	0d89      	lsrs	r1, r1, #22
 800dfba:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(Vector78) {
 800dfbe:	b510      	push	{r4, lr}
  DMA1->LIFCR = flags << 22;
 800dfc0:	058c      	lsls	r4, r1, #22
 800dfc2:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[3].dma_func)
 800dfc4:	b10a      	cbz	r2, 800dfca <Vector78+0x1a>
    dma_isr_redir[3].dma_func(dma_isr_redir[3].dma_param, flags);
 800dfc6:	69c0      	ldr	r0, [r0, #28]
 800dfc8:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800dfca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800dfce:	f7ff bb8f 	b.w	800d6f0 <_port_irq_epilogue>
 800dfd2:	bf00      	nop
 800dfd4:	40026000 	.word	0x40026000
 800dfd8:	20000ec0 	.word	0x20000ec0
 800dfdc:	00000000 	.word	0x00000000

0800dfe0 <Vector7C>:
/**
 * @brief   DMA1 stream 4 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector7C) {
 800dfe0:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 0) & STM32_DMA_ISR_MASK;
 800dfe2:	4b07      	ldr	r3, [pc, #28]	; (800e000 <Vector7C+0x20>)
  DMA1->HIFCR = flags << 0;
  if (dma_isr_redir[4].dma_func)
 800dfe4:	4807      	ldr	r0, [pc, #28]	; (800e004 <Vector7C+0x24>)
  flags = (DMA1->HISR >> 0) & STM32_DMA_ISR_MASK;
 800dfe6:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[4].dma_func)
 800dfe8:	6a02      	ldr	r2, [r0, #32]
  flags = (DMA1->HISR >> 0) & STM32_DMA_ISR_MASK;
 800dfea:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 0;
 800dfee:	60d9      	str	r1, [r3, #12]
  if (dma_isr_redir[4].dma_func)
 800dff0:	b10a      	cbz	r2, 800dff6 <Vector7C+0x16>
    dma_isr_redir[4].dma_func(dma_isr_redir[4].dma_param, flags);
 800dff2:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800dff4:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800dff6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 800dffa:	f7ff bb79 	b.w	800d6f0 <_port_irq_epilogue>
 800dffe:	bf00      	nop
 800e000:	40026000 	.word	0x40026000
 800e004:	20000ec0 	.word	0x20000ec0
	...

0800e010 <Vector80>:
OSAL_IRQ_HANDLER(Vector80) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 6) & STM32_DMA_ISR_MASK;
 800e010:	4b08      	ldr	r3, [pc, #32]	; (800e034 <Vector80+0x24>)
  DMA1->HIFCR = flags << 6;
  if (dma_isr_redir[5].dma_func)
 800e012:	4809      	ldr	r0, [pc, #36]	; (800e038 <Vector80+0x28>)
  flags = (DMA1->HISR >> 6) & STM32_DMA_ISR_MASK;
 800e014:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[5].dma_func)
 800e016:	6a82      	ldr	r2, [r0, #40]	; 0x28
  flags = (DMA1->HISR >> 6) & STM32_DMA_ISR_MASK;
 800e018:	0989      	lsrs	r1, r1, #6
 800e01a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(Vector80) {
 800e01e:	b510      	push	{r4, lr}
  DMA1->HIFCR = flags << 6;
 800e020:	018c      	lsls	r4, r1, #6
 800e022:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[5].dma_func)
 800e024:	b10a      	cbz	r2, 800e02a <Vector80+0x1a>
    dma_isr_redir[5].dma_func(dma_isr_redir[5].dma_param, flags);
 800e026:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800e028:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800e02a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800e02e:	f7ff bb5f 	b.w	800d6f0 <_port_irq_epilogue>
 800e032:	bf00      	nop
 800e034:	40026000 	.word	0x40026000
 800e038:	20000ec0 	.word	0x20000ec0
 800e03c:	00000000 	.word	0x00000000

0800e040 <Vector84>:
OSAL_IRQ_HANDLER(Vector84) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 16) & STM32_DMA_ISR_MASK;
 800e040:	4b08      	ldr	r3, [pc, #32]	; (800e064 <Vector84+0x24>)
  DMA1->HIFCR = flags << 16;
  if (dma_isr_redir[6].dma_func)
 800e042:	4809      	ldr	r0, [pc, #36]	; (800e068 <Vector84+0x28>)
  flags = (DMA1->HISR >> 16) & STM32_DMA_ISR_MASK;
 800e044:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[6].dma_func)
 800e046:	6b02      	ldr	r2, [r0, #48]	; 0x30
  flags = (DMA1->HISR >> 16) & STM32_DMA_ISR_MASK;
 800e048:	0c09      	lsrs	r1, r1, #16
 800e04a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(Vector84) {
 800e04e:	b510      	push	{r4, lr}
  DMA1->HIFCR = flags << 16;
 800e050:	040c      	lsls	r4, r1, #16
 800e052:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[6].dma_func)
 800e054:	b10a      	cbz	r2, 800e05a <Vector84+0x1a>
    dma_isr_redir[6].dma_func(dma_isr_redir[6].dma_param, flags);
 800e056:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800e058:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800e05a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800e05e:	f7ff bb47 	b.w	800d6f0 <_port_irq_epilogue>
 800e062:	bf00      	nop
 800e064:	40026000 	.word	0x40026000
 800e068:	20000ec0 	.word	0x20000ec0
 800e06c:	00000000 	.word	0x00000000

0800e070 <VectorFC>:
OSAL_IRQ_HANDLER(VectorFC) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 22) & STM32_DMA_ISR_MASK;
 800e070:	4b08      	ldr	r3, [pc, #32]	; (800e094 <VectorFC+0x24>)
  DMA1->HIFCR = flags << 22;
  if (dma_isr_redir[7].dma_func)
 800e072:	4809      	ldr	r0, [pc, #36]	; (800e098 <VectorFC+0x28>)
  flags = (DMA1->HISR >> 22) & STM32_DMA_ISR_MASK;
 800e074:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[7].dma_func)
 800e076:	6b82      	ldr	r2, [r0, #56]	; 0x38
  flags = (DMA1->HISR >> 22) & STM32_DMA_ISR_MASK;
 800e078:	0d89      	lsrs	r1, r1, #22
 800e07a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(VectorFC) {
 800e07e:	b510      	push	{r4, lr}
  DMA1->HIFCR = flags << 22;
 800e080:	058c      	lsls	r4, r1, #22
 800e082:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[7].dma_func)
 800e084:	b10a      	cbz	r2, 800e08a <VectorFC+0x1a>
    dma_isr_redir[7].dma_func(dma_isr_redir[7].dma_param, flags);
 800e086:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 800e088:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800e08a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800e08e:	f7ff bb2f 	b.w	800d6f0 <_port_irq_epilogue>
 800e092:	bf00      	nop
 800e094:	40026000 	.word	0x40026000
 800e098:	20000ec0 	.word	0x20000ec0
 800e09c:	00000000 	.word	0x00000000

0800e0a0 <Vector120>:
/**
 * @brief   DMA2 stream 0 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector120) {
 800e0a0:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 0) & STM32_DMA_ISR_MASK;
 800e0a2:	4b07      	ldr	r3, [pc, #28]	; (800e0c0 <Vector120+0x20>)
  DMA2->LIFCR = flags << 0;
  if (dma_isr_redir[8].dma_func)
 800e0a4:	4807      	ldr	r0, [pc, #28]	; (800e0c4 <Vector120+0x24>)
  flags = (DMA2->LISR >> 0) & STM32_DMA_ISR_MASK;
 800e0a6:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[8].dma_func)
 800e0a8:	6c02      	ldr	r2, [r0, #64]	; 0x40
  flags = (DMA2->LISR >> 0) & STM32_DMA_ISR_MASK;
 800e0aa:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 0;
 800e0ae:	6099      	str	r1, [r3, #8]
  if (dma_isr_redir[8].dma_func)
 800e0b0:	b10a      	cbz	r2, 800e0b6 <Vector120+0x16>
    dma_isr_redir[8].dma_func(dma_isr_redir[8].dma_param, flags);
 800e0b2:	6c40      	ldr	r0, [r0, #68]	; 0x44
 800e0b4:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800e0b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 800e0ba:	f7ff bb19 	b.w	800d6f0 <_port_irq_epilogue>
 800e0be:	bf00      	nop
 800e0c0:	40026400 	.word	0x40026400
 800e0c4:	20000ec0 	.word	0x20000ec0
	...

0800e0d0 <Vector124>:
OSAL_IRQ_HANDLER(Vector124) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 6) & STM32_DMA_ISR_MASK;
 800e0d0:	4b08      	ldr	r3, [pc, #32]	; (800e0f4 <Vector124+0x24>)
  DMA2->LIFCR = flags << 6;
  if (dma_isr_redir[9].dma_func)
 800e0d2:	4809      	ldr	r0, [pc, #36]	; (800e0f8 <Vector124+0x28>)
  flags = (DMA2->LISR >> 6) & STM32_DMA_ISR_MASK;
 800e0d4:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[9].dma_func)
 800e0d6:	6c82      	ldr	r2, [r0, #72]	; 0x48
  flags = (DMA2->LISR >> 6) & STM32_DMA_ISR_MASK;
 800e0d8:	0989      	lsrs	r1, r1, #6
 800e0da:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(Vector124) {
 800e0de:	b510      	push	{r4, lr}
  DMA2->LIFCR = flags << 6;
 800e0e0:	018c      	lsls	r4, r1, #6
 800e0e2:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[9].dma_func)
 800e0e4:	b10a      	cbz	r2, 800e0ea <Vector124+0x1a>
    dma_isr_redir[9].dma_func(dma_isr_redir[9].dma_param, flags);
 800e0e6:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 800e0e8:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800e0ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800e0ee:	f7ff baff 	b.w	800d6f0 <_port_irq_epilogue>
 800e0f2:	bf00      	nop
 800e0f4:	40026400 	.word	0x40026400
 800e0f8:	20000ec0 	.word	0x20000ec0
 800e0fc:	00000000 	.word	0x00000000

0800e100 <Vector128>:
OSAL_IRQ_HANDLER(Vector128) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 16) & STM32_DMA_ISR_MASK;
 800e100:	4b08      	ldr	r3, [pc, #32]	; (800e124 <Vector128+0x24>)
  DMA2->LIFCR = flags << 16;
  if (dma_isr_redir[10].dma_func)
 800e102:	4809      	ldr	r0, [pc, #36]	; (800e128 <Vector128+0x28>)
  flags = (DMA2->LISR >> 16) & STM32_DMA_ISR_MASK;
 800e104:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[10].dma_func)
 800e106:	6d02      	ldr	r2, [r0, #80]	; 0x50
  flags = (DMA2->LISR >> 16) & STM32_DMA_ISR_MASK;
 800e108:	0c09      	lsrs	r1, r1, #16
 800e10a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(Vector128) {
 800e10e:	b510      	push	{r4, lr}
  DMA2->LIFCR = flags << 16;
 800e110:	040c      	lsls	r4, r1, #16
 800e112:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[10].dma_func)
 800e114:	b10a      	cbz	r2, 800e11a <Vector128+0x1a>
    dma_isr_redir[10].dma_func(dma_isr_redir[10].dma_param, flags);
 800e116:	6d40      	ldr	r0, [r0, #84]	; 0x54
 800e118:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800e11a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800e11e:	f7ff bae7 	b.w	800d6f0 <_port_irq_epilogue>
 800e122:	bf00      	nop
 800e124:	40026400 	.word	0x40026400
 800e128:	20000ec0 	.word	0x20000ec0
 800e12c:	00000000 	.word	0x00000000

0800e130 <Vector12C>:
OSAL_IRQ_HANDLER(Vector12C) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 22) & STM32_DMA_ISR_MASK;
 800e130:	4b08      	ldr	r3, [pc, #32]	; (800e154 <Vector12C+0x24>)
  DMA2->LIFCR = flags << 22;
  if (dma_isr_redir[11].dma_func)
 800e132:	4809      	ldr	r0, [pc, #36]	; (800e158 <Vector12C+0x28>)
  flags = (DMA2->LISR >> 22) & STM32_DMA_ISR_MASK;
 800e134:	6819      	ldr	r1, [r3, #0]
  if (dma_isr_redir[11].dma_func)
 800e136:	6d82      	ldr	r2, [r0, #88]	; 0x58
  flags = (DMA2->LISR >> 22) & STM32_DMA_ISR_MASK;
 800e138:	0d89      	lsrs	r1, r1, #22
 800e13a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(Vector12C) {
 800e13e:	b510      	push	{r4, lr}
  DMA2->LIFCR = flags << 22;
 800e140:	058c      	lsls	r4, r1, #22
 800e142:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[11].dma_func)
 800e144:	b10a      	cbz	r2, 800e14a <Vector12C+0x1a>
    dma_isr_redir[11].dma_func(dma_isr_redir[11].dma_param, flags);
 800e146:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 800e148:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800e14a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800e14e:	f7ff bacf 	b.w	800d6f0 <_port_irq_epilogue>
 800e152:	bf00      	nop
 800e154:	40026400 	.word	0x40026400
 800e158:	20000ec0 	.word	0x20000ec0
 800e15c:	00000000 	.word	0x00000000

0800e160 <Vector130>:
/**
 * @brief   DMA2 stream 4 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector130) {
 800e160:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 0) & STM32_DMA_ISR_MASK;
 800e162:	4b07      	ldr	r3, [pc, #28]	; (800e180 <Vector130+0x20>)
  DMA2->HIFCR = flags << 0;
  if (dma_isr_redir[12].dma_func)
 800e164:	4807      	ldr	r0, [pc, #28]	; (800e184 <Vector130+0x24>)
  flags = (DMA2->HISR >> 0) & STM32_DMA_ISR_MASK;
 800e166:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[12].dma_func)
 800e168:	6e02      	ldr	r2, [r0, #96]	; 0x60
  flags = (DMA2->HISR >> 0) & STM32_DMA_ISR_MASK;
 800e16a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 0;
 800e16e:	60d9      	str	r1, [r3, #12]
  if (dma_isr_redir[12].dma_func)
 800e170:	b10a      	cbz	r2, 800e176 <Vector130+0x16>
    dma_isr_redir[12].dma_func(dma_isr_redir[12].dma_param, flags);
 800e172:	6e40      	ldr	r0, [r0, #100]	; 0x64
 800e174:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800e176:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 800e17a:	f7ff bab9 	b.w	800d6f0 <_port_irq_epilogue>
 800e17e:	bf00      	nop
 800e180:	40026400 	.word	0x40026400
 800e184:	20000ec0 	.word	0x20000ec0
	...

0800e190 <Vector150>:
OSAL_IRQ_HANDLER(Vector150) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 6) & STM32_DMA_ISR_MASK;
 800e190:	4b08      	ldr	r3, [pc, #32]	; (800e1b4 <Vector150+0x24>)
  DMA2->HIFCR = flags << 6;
  if (dma_isr_redir[13].dma_func)
 800e192:	4809      	ldr	r0, [pc, #36]	; (800e1b8 <Vector150+0x28>)
  flags = (DMA2->HISR >> 6) & STM32_DMA_ISR_MASK;
 800e194:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[13].dma_func)
 800e196:	6e82      	ldr	r2, [r0, #104]	; 0x68
  flags = (DMA2->HISR >> 6) & STM32_DMA_ISR_MASK;
 800e198:	0989      	lsrs	r1, r1, #6
 800e19a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(Vector150) {
 800e19e:	b510      	push	{r4, lr}
  DMA2->HIFCR = flags << 6;
 800e1a0:	018c      	lsls	r4, r1, #6
 800e1a2:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[13].dma_func)
 800e1a4:	b10a      	cbz	r2, 800e1aa <Vector150+0x1a>
    dma_isr_redir[13].dma_func(dma_isr_redir[13].dma_param, flags);
 800e1a6:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 800e1a8:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800e1aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800e1ae:	f7ff ba9f 	b.w	800d6f0 <_port_irq_epilogue>
 800e1b2:	bf00      	nop
 800e1b4:	40026400 	.word	0x40026400
 800e1b8:	20000ec0 	.word	0x20000ec0
 800e1bc:	00000000 	.word	0x00000000

0800e1c0 <Vector154>:
OSAL_IRQ_HANDLER(Vector154) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 16) & STM32_DMA_ISR_MASK;
 800e1c0:	4b08      	ldr	r3, [pc, #32]	; (800e1e4 <Vector154+0x24>)
  DMA2->HIFCR = flags << 16;
  if (dma_isr_redir[14].dma_func)
 800e1c2:	4809      	ldr	r0, [pc, #36]	; (800e1e8 <Vector154+0x28>)
  flags = (DMA2->HISR >> 16) & STM32_DMA_ISR_MASK;
 800e1c4:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[14].dma_func)
 800e1c6:	6f02      	ldr	r2, [r0, #112]	; 0x70
  flags = (DMA2->HISR >> 16) & STM32_DMA_ISR_MASK;
 800e1c8:	0c09      	lsrs	r1, r1, #16
 800e1ca:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(Vector154) {
 800e1ce:	b510      	push	{r4, lr}
  DMA2->HIFCR = flags << 16;
 800e1d0:	040c      	lsls	r4, r1, #16
 800e1d2:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[14].dma_func)
 800e1d4:	b10a      	cbz	r2, 800e1da <Vector154+0x1a>
    dma_isr_redir[14].dma_func(dma_isr_redir[14].dma_param, flags);
 800e1d6:	6f40      	ldr	r0, [r0, #116]	; 0x74
 800e1d8:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800e1da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800e1de:	f7ff ba87 	b.w	800d6f0 <_port_irq_epilogue>
 800e1e2:	bf00      	nop
 800e1e4:	40026400 	.word	0x40026400
 800e1e8:	20000ec0 	.word	0x20000ec0
 800e1ec:	00000000 	.word	0x00000000

0800e1f0 <Vector158>:
OSAL_IRQ_HANDLER(Vector158) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 22) & STM32_DMA_ISR_MASK;
 800e1f0:	4b08      	ldr	r3, [pc, #32]	; (800e214 <Vector158+0x24>)
  DMA2->HIFCR = flags << 22;
  if (dma_isr_redir[15].dma_func)
 800e1f2:	4809      	ldr	r0, [pc, #36]	; (800e218 <Vector158+0x28>)
  flags = (DMA2->HISR >> 22) & STM32_DMA_ISR_MASK;
 800e1f4:	6859      	ldr	r1, [r3, #4]
  if (dma_isr_redir[15].dma_func)
 800e1f6:	6f82      	ldr	r2, [r0, #120]	; 0x78
  flags = (DMA2->HISR >> 22) & STM32_DMA_ISR_MASK;
 800e1f8:	0d89      	lsrs	r1, r1, #22
 800e1fa:	f001 013d 	and.w	r1, r1, #61	; 0x3d
OSAL_IRQ_HANDLER(Vector158) {
 800e1fe:	b510      	push	{r4, lr}
  DMA2->HIFCR = flags << 22;
 800e200:	058c      	lsls	r4, r1, #22
 800e202:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[15].dma_func)
 800e204:	b10a      	cbz	r2, 800e20a <Vector158+0x1a>
    dma_isr_redir[15].dma_func(dma_isr_redir[15].dma_param, flags);
 800e206:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 800e208:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800e20a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800e20e:	f7ff ba6f 	b.w	800d6f0 <_port_irq_epilogue>
 800e212:	bf00      	nop
 800e214:	40026400 	.word	0x40026400
 800e218:	20000ec0 	.word	0x20000ec0
 800e21c:	00000000 	.word	0x00000000

0800e220 <dmaInit>:
 * @init
 */
void dmaInit(void) {
  int i;

  dma_streams_mask = 0;
 800e220:	490e      	ldr	r1, [pc, #56]	; (800e25c <dmaInit+0x3c>)
 800e222:	4a0f      	ldr	r2, [pc, #60]	; (800e260 <dmaInit+0x40>)
 800e224:	480f      	ldr	r0, [pc, #60]	; (800e264 <dmaInit+0x44>)
 800e226:	2300      	movs	r3, #0
void dmaInit(void) {
 800e228:	b410      	push	{r4}
  dma_streams_mask = 0;
 800e22a:	600b      	str	r3, [r1, #0]
 800e22c:	4c0e      	ldr	r4, [pc, #56]	; (800e268 <dmaInit+0x48>)
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
    _stm32_dma_streams[i].stream->CR = 0;
 800e22e:	4619      	mov	r1, r3
 800e230:	e001      	b.n	800e236 <dmaInit+0x16>
 800e232:	f852 0c0c 	ldr.w	r0, [r2, #-12]
 800e236:	6001      	str	r1, [r0, #0]
    dma_isr_redir[i].dma_func = NULL;
 800e238:	f844 1033 	str.w	r1, [r4, r3, lsl #3]
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
 800e23c:	3301      	adds	r3, #1
 800e23e:	2b10      	cmp	r3, #16
 800e240:	f102 020c 	add.w	r2, r2, #12
 800e244:	d1f5      	bne.n	800e232 <dmaInit+0x12>
  }
  DMA1->LIFCR = 0xFFFFFFFF;
 800e246:	4909      	ldr	r1, [pc, #36]	; (800e26c <dmaInit+0x4c>)
  DMA1->HIFCR = 0xFFFFFFFF;
  DMA2->LIFCR = 0xFFFFFFFF;
 800e248:	4a09      	ldr	r2, [pc, #36]	; (800e270 <dmaInit+0x50>)
  DMA2->HIFCR = 0xFFFFFFFF;
}
 800e24a:	f85d 4b04 	ldr.w	r4, [sp], #4
  DMA1->LIFCR = 0xFFFFFFFF;
 800e24e:	f04f 33ff 	mov.w	r3, #4294967295
 800e252:	608b      	str	r3, [r1, #8]
  DMA1->HIFCR = 0xFFFFFFFF;
 800e254:	60cb      	str	r3, [r1, #12]
  DMA2->LIFCR = 0xFFFFFFFF;
 800e256:	6093      	str	r3, [r2, #8]
  DMA2->HIFCR = 0xFFFFFFFF;
 800e258:	60d3      	str	r3, [r2, #12]
}
 800e25a:	4770      	bx	lr
 800e25c:	20000f40 	.word	0x20000f40
 800e260:	08013b7c 	.word	0x08013b7c
 800e264:	40026010 	.word	0x40026010
 800e268:	20000ec0 	.word	0x20000ec0
 800e26c:	40026000 	.word	0x40026000
 800e270:	40026400 	.word	0x40026400
	...

0800e280 <dmaStreamAllocate>:
 * @special
 */
bool dmaStreamAllocate(const stm32_dma_stream_t *dmastp,
                       uint32_t priority,
                       stm32_dmaisr_t func,
                       void *param) {
 800e280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  osalDbgCheck(dmastp != NULL);

  /* Checks if the stream is already taken.*/
  if ((dma_streams_mask & (1 << dmastp->selfindex)) != 0)
 800e282:	4f20      	ldr	r7, [pc, #128]	; (800e304 <dmaStreamAllocate+0x84>)
 800e284:	7a46      	ldrb	r6, [r0, #9]
 800e286:	f8d7 c000 	ldr.w	ip, [r7]
 800e28a:	2401      	movs	r4, #1
 800e28c:	fa04 f506 	lsl.w	r5, r4, r6
 800e290:	ea15 0f0c 	tst.w	r5, ip
 800e294:	d133      	bne.n	800e2fe <dmaStreamAllocate+0x7e>
    return TRUE;

  /* Marks the stream as allocated.*/
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
 800e296:	4c1c      	ldr	r4, [pc, #112]	; (800e308 <dmaStreamAllocate+0x88>)
  dma_isr_redir[dmastp->selfindex].dma_param = param;
  dma_streams_mask |= (1 << dmastp->selfindex);
 800e298:	ea45 050c 	orr.w	r5, r5, ip
  dma_isr_redir[dmastp->selfindex].dma_param = param;
 800e29c:	eb04 0cc6 	add.w	ip, r4, r6, lsl #3

  /* Enabling DMA clocks required by the current streams set.*/
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) != 0)
 800e2a0:	f015 0fff 	tst.w	r5, #255	; 0xff
  dma_streams_mask |= (1 << dmastp->selfindex);
 800e2a4:	603d      	str	r5, [r7, #0]
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
 800e2a6:	f844 2036 	str.w	r2, [r4, r6, lsl #3]
  dma_isr_redir[dmastp->selfindex].dma_param = param;
 800e2aa:	f8cc 3004 	str.w	r3, [ip, #4]
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) != 0)
 800e2ae:	d004      	beq.n	800e2ba <dmaStreamAllocate+0x3a>
    rccEnableDMA1(FALSE);
 800e2b0:	4c16      	ldr	r4, [pc, #88]	; (800e30c <dmaStreamAllocate+0x8c>)
 800e2b2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e2b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e2b8:	6323      	str	r3, [r4, #48]	; 0x30
  if ((dma_streams_mask & STM32_DMA2_STREAMS_MASK) != 0)
 800e2ba:	f415 4f7f 	tst.w	r5, #65280	; 0xff00
 800e2be:	d116      	bne.n	800e2ee <dmaStreamAllocate+0x6e>
    rccEnableDMA2(FALSE);

  /* Putting the stream in a safe state.*/
  dmaStreamDisable(dmastp);
 800e2c0:	6805      	ldr	r5, [r0, #0]
 800e2c2:	682b      	ldr	r3, [r5, #0]
 800e2c4:	f023 031f 	bic.w	r3, r3, #31
 800e2c8:	602b      	str	r3, [r5, #0]
 800e2ca:	682c      	ldr	r4, [r5, #0]
 800e2cc:	f014 0401 	ands.w	r4, r4, #1
 800e2d0:	d1fb      	bne.n	800e2ca <dmaStreamAllocate+0x4a>
 800e2d2:	7a07      	ldrb	r7, [r0, #8]
 800e2d4:	6846      	ldr	r6, [r0, #4]
 800e2d6:	233d      	movs	r3, #61	; 0x3d
 800e2d8:	40bb      	lsls	r3, r7
  dmastp->stream->CR = STM32_DMA_CR_RESET_VALUE;
  dmastp->stream->FCR = STM32_DMA_FCR_RESET_VALUE;
 800e2da:	2721      	movs	r7, #33	; 0x21
  dmaStreamDisable(dmastp);
 800e2dc:	6033      	str	r3, [r6, #0]
  dmastp->stream->CR = STM32_DMA_CR_RESET_VALUE;
 800e2de:	602c      	str	r4, [r5, #0]
  dmastp->stream->FCR = STM32_DMA_FCR_RESET_VALUE;
 800e2e0:	616f      	str	r7, [r5, #20]

  /* Enables the associated IRQ vector if a callback is defined.*/
  if (func != NULL)
 800e2e2:	b152      	cbz	r2, 800e2fa <dmaStreamAllocate+0x7a>
    nvicEnableVector(dmastp->vector, priority);
 800e2e4:	7a80      	ldrb	r0, [r0, #10]
 800e2e6:	f7ff fdf3 	bl	800ded0 <nvicEnableVector>

  return FALSE;
 800e2ea:	4620      	mov	r0, r4
}
 800e2ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    rccEnableDMA2(FALSE);
 800e2ee:	4c07      	ldr	r4, [pc, #28]	; (800e30c <dmaStreamAllocate+0x8c>)
 800e2f0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e2f2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800e2f6:	6323      	str	r3, [r4, #48]	; 0x30
 800e2f8:	e7e2      	b.n	800e2c0 <dmaStreamAllocate+0x40>
  return FALSE;
 800e2fa:	4610      	mov	r0, r2
}
 800e2fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return TRUE;
 800e2fe:	4620      	mov	r0, r4
}
 800e300:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e302:	bf00      	nop
 800e304:	20000f40 	.word	0x20000f40
 800e308:	20000ec0 	.word	0x20000ec0
 800e30c:	40023800 	.word	0x40023800

0800e310 <hal_lld_init>:
 */
void hal_lld_init(void) {

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).*/
  rccResetAHB1(~0);
 800e310:	4b17      	ldr	r3, [pc, #92]	; (800e370 <hal_lld_init+0x60>)
 800e312:	f04f 31ff 	mov.w	r1, #4294967295
 800e316:	691a      	ldr	r2, [r3, #16]
 800e318:	2200      	movs	r2, #0
void hal_lld_init(void) {
 800e31a:	b410      	push	{r4}
  rccResetAHB1(~0);
 800e31c:	6119      	str	r1, [r3, #16]
 800e31e:	611a      	str	r2, [r3, #16]
  rccResetAHB2(~0);
 800e320:	6958      	ldr	r0, [r3, #20]
 800e322:	6159      	str	r1, [r3, #20]
 800e324:	615a      	str	r2, [r3, #20]
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
 800e326:	6a18      	ldr	r0, [r3, #32]
  PWR->CR |= PWR_CR_DBP;
 800e328:	4c12      	ldr	r4, [pc, #72]	; (800e374 <hal_lld_init+0x64>)
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
 800e32a:	f060 5080 	orn	r0, r0, #268435456	; 0x10000000
 800e32e:	6218      	str	r0, [r3, #32]
 800e330:	621a      	str	r2, [r3, #32]
  rccResetAPB2(~0);
 800e332:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800e334:	6259      	str	r1, [r3, #36]	; 0x24
 800e336:	625a      	str	r2, [r3, #36]	; 0x24

  /* PWR clock enabled.*/
  rccEnablePWRInterface(FALSE);
 800e338:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800e33a:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800e33e:	6419      	str	r1, [r3, #64]	; 0x40
  PWR->CR |= PWR_CR_DBP;
 800e340:	6821      	ldr	r1, [r4, #0]
 800e342:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800e346:	6021      	str	r1, [r4, #0]
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
 800e348:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800e34a:	f401 7140 	and.w	r1, r1, #768	; 0x300
 800e34e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800e352:	d003      	beq.n	800e35c <hal_lld_init+0x4c>
    RCC->BDCR = RCC_BDCR_BDRST;
 800e354:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800e358:	6719      	str	r1, [r3, #112]	; 0x70
    RCC->BDCR = 0;
 800e35a:	671a      	str	r2, [r3, #112]	; 0x70
  PWR->CSR &= ~PWR_CSR_BRE;
 800e35c:	4a05      	ldr	r2, [pc, #20]	; (800e374 <hal_lld_init+0x64>)

  /* Programmable voltage detector enable.*/
#if STM32_PVD_ENABLE
  PWR->CR |= PWR_CR_PVDE | (STM32_PLS & STM32_PLS_MASK);
#endif /* STM32_PVD_ENABLE */
}
 800e35e:	f85d 4b04 	ldr.w	r4, [sp], #4
  PWR->CSR &= ~PWR_CSR_BRE;
 800e362:	6853      	ldr	r3, [r2, #4]
 800e364:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e368:	6053      	str	r3, [r2, #4]
  dmaInit();
 800e36a:	f7ff bf59 	b.w	800e220 <dmaInit>
 800e36e:	bf00      	nop
 800e370:	40023800 	.word	0x40023800
 800e374:	40007000 	.word	0x40007000
	...

0800e380 <stm32_clock_init>:
 */
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* PWR clock enable.*/
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 800e380:	4b2a      	ldr	r3, [pc, #168]	; (800e42c <stm32_clock_init+0xac>)

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 800e382:	4a2b      	ldr	r2, [pc, #172]	; (800e430 <stm32_clock_init+0xb0>)
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 800e384:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
  PWR->CR = STM32_VOS;
 800e388:	f44f 4140 	mov.w	r1, #49152	; 0xc000
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 800e38c:	6418      	str	r0, [r3, #64]	; 0x40
  PWR->CR = STM32_VOS;
 800e38e:	6011      	str	r1, [r2, #0]
  PWR->CR = 0;
#endif

  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 800e390:	681a      	ldr	r2, [r3, #0]
 800e392:	f042 0201 	orr.w	r2, r2, #1
 800e396:	601a      	str	r2, [r3, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 800e398:	681a      	ldr	r2, [r3, #0]
 800e39a:	0792      	lsls	r2, r2, #30
 800e39c:	d5fc      	bpl.n	800e398 <stm32_clock_init+0x18>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW */
 800e39e:	6899      	ldr	r1, [r3, #8]
  RCC->CFGR |= RCC_CFGR_SWS_HSI;            /* Select HSI as internal*/
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 800e3a0:	4a22      	ldr	r2, [pc, #136]	; (800e42c <stm32_clock_init+0xac>)
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW */
 800e3a2:	f021 0103 	bic.w	r1, r1, #3
 800e3a6:	6099      	str	r1, [r3, #8]
  RCC->CFGR |= RCC_CFGR_SWS_HSI;            /* Select HSI as internal*/
 800e3a8:	6899      	ldr	r1, [r3, #8]
 800e3aa:	6099      	str	r1, [r3, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 800e3ac:	6893      	ldr	r3, [r2, #8]
 800e3ae:	f013 030c 	ands.w	r3, r3, #12
 800e3b2:	d1fb      	bne.n	800e3ac <stm32_clock_init+0x2c>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 800e3b4:	6810      	ldr	r0, [r2, #0]
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#else
  /* No HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON;
#endif
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
 800e3b6:	491d      	ldr	r1, [pc, #116]	; (800e42c <stm32_clock_init+0xac>)
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 800e3b8:	f000 00f9 	and.w	r0, r0, #249	; 0xf9
 800e3bc:	6010      	str	r0, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 800e3be:	6093      	str	r3, [r2, #8]
  RCC->CR |= RCC_CR_HSEON;
 800e3c0:	6813      	ldr	r3, [r2, #0]
 800e3c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e3c6:	6013      	str	r3, [r2, #0]
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
 800e3c8:	680b      	ldr	r3, [r1, #0]
 800e3ca:	0398      	lsls	r0, r3, #14
 800e3cc:	d5fc      	bpl.n	800e3c8 <stm32_clock_init+0x48>
    ;                           /* Waits until HSE is stable.               */
#endif

#if STM32_LSI_ENABLED
  /* LSI activation.*/
  RCC->CSR |= RCC_CSR_LSION;
 800e3ce:	6f4b      	ldr	r3, [r1, #116]	; 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 800e3d0:	4a16      	ldr	r2, [pc, #88]	; (800e42c <stm32_clock_init+0xac>)
  RCC->CSR |= RCC_CSR_LSION;
 800e3d2:	f043 0301 	orr.w	r3, r3, #1
 800e3d6:	674b      	str	r3, [r1, #116]	; 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 800e3d8:	6f53      	ldr	r3, [r2, #116]	; 0x74
 800e3da:	0799      	lsls	r1, r3, #30
 800e3dc:	d5fc      	bpl.n	800e3d8 <stm32_clock_init+0x58>
    ;                           /* Waits until LSI is stable.               */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
 800e3de:	4b15      	ldr	r3, [pc, #84]	; (800e434 <stm32_clock_init+0xb4>)
 800e3e0:	6053      	str	r3, [r2, #4]
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;
 800e3e2:	6813      	ldr	r3, [r2, #0]

  /* Synchronization with voltage regulator stabilization.*/
#if defined(STM32F4XX)
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 800e3e4:	4912      	ldr	r1, [pc, #72]	; (800e430 <stm32_clock_init+0xb0>)
  RCC->CR |= RCC_CR_PLLON;
 800e3e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800e3ea:	6013      	str	r3, [r2, #0]
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 800e3ec:	684b      	ldr	r3, [r1, #4]
 800e3ee:	045a      	lsls	r2, r3, #17
 800e3f0:	d5fc      	bpl.n	800e3ec <stm32_clock_init+0x6c>
      ;
#endif /* STM32_OVERDRIVE_REQUIRED */
#endif /* defined(STM32F4XX) */

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLRDY))
 800e3f2:	490e      	ldr	r1, [pc, #56]	; (800e42c <stm32_clock_init+0xac>)
 800e3f4:	680b      	ldr	r3, [r1, #0]
 800e3f6:	019b      	lsls	r3, r3, #6
 800e3f8:	d5fc      	bpl.n	800e3f4 <stm32_clock_init+0x74>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  else
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
                 FLASH_ACR_DCEN | STM32_FLASHBITS;
#else
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 800e3fa:	4b0f      	ldr	r3, [pc, #60]	; (800e438 <stm32_clock_init+0xb8>)
  RCC->CFGR = STM32_MCO2PRE | STM32_MCO2SEL | STM32_MCO1PRE | STM32_MCO1SEL |
 800e3fc:	4a0f      	ldr	r2, [pc, #60]	; (800e43c <stm32_clock_init+0xbc>)
 800e3fe:	608a      	str	r2, [r1, #8]
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 800e400:	f240 7205 	movw	r2, #1797	; 0x705
 800e404:	601a      	str	r2, [r3, #0]
               FLASH_ACR_DCEN | STM32_FLASHBITS;
#endif

  /* Switching to the configured clock source if it is different from MSI.*/
#if (STM32_SW != STM32_SW_HSI)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
 800e406:	688b      	ldr	r3, [r1, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 800e408:	4a08      	ldr	r2, [pc, #32]	; (800e42c <stm32_clock_init+0xac>)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
 800e40a:	f043 0302 	orr.w	r3, r3, #2
 800e40e:	608b      	str	r3, [r1, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 800e410:	6893      	ldr	r3, [r2, #8]
 800e412:	f003 030c 	and.w	r3, r3, #12
 800e416:	2b08      	cmp	r3, #8
 800e418:	d1fa      	bne.n	800e410 <stm32_clock_init+0x90>
#endif
#endif /* STM32_NO_INIT */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, TRUE);
 800e41a:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800e41c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e420:	6453      	str	r3, [r2, #68]	; 0x44
 800e422:	6e53      	ldr	r3, [r2, #100]	; 0x64
 800e424:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e428:	6653      	str	r3, [r2, #100]	; 0x64
}
 800e42a:	4770      	bx	lr
 800e42c:	40023800 	.word	0x40023800
 800e430:	40007000 	.word	0x40007000
 800e434:	07405408 	.word	0x07405408
 800e438:	40023c00 	.word	0x40023c00
 800e43c:	38089400 	.word	0x38089400

0800e440 <can_lld_set_filters>:
 *
 * @notapi
 */
static void can_lld_set_filters(uint32_t can2sb,
                                uint32_t num,
                                const CANFilter *cfp) {
 800e440:	b4f0      	push	{r4, r5, r6, r7}

  /* Temporarily enabling CAN1 clock.*/
  rccEnableCAN1(FALSE);
 800e442:	4d44      	ldr	r5, [pc, #272]	; (800e554 <can_lld_set_filters+0x114>)

  /* Filters initialization.*/
  CAN1->FMR = (CAN1->FMR & 0xFFFF0000) | (can2sb << 8) | CAN_FMR_FINIT;
 800e444:	4c44      	ldr	r4, [pc, #272]	; (800e558 <can_lld_set_filters+0x118>)
  rccEnableCAN1(FALSE);
 800e446:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800e448:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800e44c:	642b      	str	r3, [r5, #64]	; 0x40
  CAN1->FMR = (CAN1->FMR & 0xFFFF0000) | (can2sb << 8) | CAN_FMR_FINIT;
 800e44e:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
 800e452:	0c1b      	lsrs	r3, r3, #16
 800e454:	041b      	lsls	r3, r3, #16
 800e456:	f043 0301 	orr.w	r3, r3, #1
 800e45a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800e45e:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
  if (num > 0) {
 800e462:	2900      	cmp	r1, #0
 800e464:	d05b      	beq.n	800e51e <can_lld_set_filters+0xde>
    uint32_t i, fmask;

    /* All filters cleared.*/
    CAN1->FA1R = 0;
 800e466:	2300      	movs	r3, #0
 800e468:	f8c4 321c 	str.w	r3, [r4, #540]	; 0x21c
    CAN1->FM1R = 0;
    CAN1->FS1R = 0;
    CAN1->FFA1R = 0;
    for (i = 0; i < STM32_CAN_MAX_FILTERS; i++) {
 800e46c:	4618      	mov	r0, r3
    CAN1->FM1R = 0;
 800e46e:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
    CAN1->FS1R = 0;
 800e472:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
    CAN1->FFA1R = 0;
 800e476:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
      CAN1->sFilterRegister[i].FR1 = 0;
 800e47a:	461c      	mov	r4, r3
 800e47c:	00c3      	lsls	r3, r0, #3
 800e47e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800e482:	f503 43c8 	add.w	r3, r3, #25600	; 0x6400
    for (i = 0; i < STM32_CAN_MAX_FILTERS; i++) {
 800e486:	3001      	adds	r0, #1
 800e488:	281c      	cmp	r0, #28
      CAN1->sFilterRegister[i].FR1 = 0;
 800e48a:	f8c3 4240 	str.w	r4, [r3, #576]	; 0x240
      CAN1->sFilterRegister[i].FR2 = 0;
 800e48e:	f8c3 4244 	str.w	r4, [r3, #580]	; 0x244
    for (i = 0; i < STM32_CAN_MAX_FILTERS; i++) {
 800e492:	d1f3      	bne.n	800e47c <can_lld_set_filters+0x3c>

    /* Scanning the filters array.*/
    for (i = 0; i < num; i++) {
      fmask = 1 << cfp->filter;
      if (cfp->mode)
        CAN1->FM1R |= fmask;
 800e494:	4d30      	ldr	r5, [pc, #192]	; (800e558 <can_lld_set_filters+0x118>)
    for (i = 0; i < num; i++) {
 800e496:	2600      	movs	r6, #0
      fmask = 1 << cfp->filter;
 800e498:	2701      	movs	r7, #1
 800e49a:	6810      	ldr	r0, [r2, #0]
      if (cfp->mode)
 800e49c:	7914      	ldrb	r4, [r2, #4]
 800e49e:	00c3      	lsls	r3, r0, #3
 800e4a0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800e4a4:	f014 0f01 	tst.w	r4, #1
 800e4a8:	f503 43c8 	add.w	r3, r3, #25600	; 0x6400
    for (i = 0; i < num; i++) {
 800e4ac:	f106 0601 	add.w	r6, r6, #1
      fmask = 1 << cfp->filter;
 800e4b0:	fa07 f000 	lsl.w	r0, r7, r0
      if (cfp->mode)
 800e4b4:	d005      	beq.n	800e4c2 <can_lld_set_filters+0x82>
        CAN1->FM1R |= fmask;
 800e4b6:	f8d5 c204 	ldr.w	ip, [r5, #516]	; 0x204
 800e4ba:	ea4c 0c00 	orr.w	ip, ip, r0
 800e4be:	f8c5 c204 	str.w	ip, [r5, #516]	; 0x204
      if (cfp->scale)
 800e4c2:	f014 0f02 	tst.w	r4, #2
 800e4c6:	d005      	beq.n	800e4d4 <can_lld_set_filters+0x94>
        CAN1->FS1R |= fmask;
 800e4c8:	f8d5 c20c 	ldr.w	ip, [r5, #524]	; 0x20c
 800e4cc:	ea4c 0c00 	orr.w	ip, ip, r0
 800e4d0:	f8c5 c20c 	str.w	ip, [r5, #524]	; 0x20c
      if (cfp->assignment)
 800e4d4:	0764      	lsls	r4, r4, #29
 800e4d6:	d504      	bpl.n	800e4e2 <can_lld_set_filters+0xa2>
        CAN1->FFA1R |= fmask;
 800e4d8:	f8d5 4214 	ldr.w	r4, [r5, #532]	; 0x214
 800e4dc:	4304      	orrs	r4, r0
 800e4de:	f8c5 4214 	str.w	r4, [r5, #532]	; 0x214
      CAN1->sFilterRegister[cfp->filter].FR1 = cfp->register1;
 800e4e2:	6894      	ldr	r4, [r2, #8]
 800e4e4:	f8c3 4240 	str.w	r4, [r3, #576]	; 0x240
      CAN1->sFilterRegister[cfp->filter].FR2 = cfp->register2;
 800e4e8:	68d4      	ldr	r4, [r2, #12]
 800e4ea:	f8c3 4244 	str.w	r4, [r3, #580]	; 0x244
      CAN1->FA1R |= fmask;
 800e4ee:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
    for (i = 0; i < num; i++) {
 800e4f2:	42b1      	cmp	r1, r6
      CAN1->FA1R |= fmask;
 800e4f4:	ea40 0003 	orr.w	r0, r0, r3
      cfp++;
 800e4f8:	f102 0210 	add.w	r2, r2, #16
      CAN1->FA1R |= fmask;
 800e4fc:	f8c5 021c 	str.w	r0, [r5, #540]	; 0x21c
    for (i = 0; i < num; i++) {
 800e500:	d1cb      	bne.n	800e49a <can_lld_set_filters+0x5a>
#else
    CAN1->FS1R = 1;
    CAN1->FA1R = 1;
#endif
  }
  CAN1->FMR &= ~CAN_FMR_FINIT;
 800e502:	4915      	ldr	r1, [pc, #84]	; (800e558 <can_lld_set_filters+0x118>)

  /* Clock disabled, it will be enabled again in can_lld_start().*/
  rccDisableCAN1(FALSE);
 800e504:	4a13      	ldr	r2, [pc, #76]	; (800e554 <can_lld_set_filters+0x114>)
  CAN1->FMR &= ~CAN_FMR_FINIT;
 800e506:	f8d1 3200 	ldr.w	r3, [r1, #512]	; 0x200
 800e50a:	f023 0301 	bic.w	r3, r3, #1
 800e50e:	f8c1 3200 	str.w	r3, [r1, #512]	; 0x200
  rccDisableCAN1(FALSE);
 800e512:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800e514:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800e518:	6413      	str	r3, [r2, #64]	; 0x40
}
 800e51a:	bcf0      	pop	{r4, r5, r6, r7}
 800e51c:	4770      	bx	lr
 800e51e:	00c2      	lsls	r2, r0, #3
 800e520:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    CAN1->FS1R = 1 | (1 << can2sb);
 800e524:	2301      	movs	r3, #1
 800e526:	f502 42c8 	add.w	r2, r2, #25600	; 0x6400
 800e52a:	4083      	lsls	r3, r0
 800e52c:	f043 0301 	orr.w	r3, r3, #1
    CAN1->sFilterRegister[0].FR1 = 0;
 800e530:	f8c4 1240 	str.w	r1, [r4, #576]	; 0x240
    CAN1->sFilterRegister[0].FR2 = 0;
 800e534:	f8c4 1244 	str.w	r1, [r4, #580]	; 0x244
    CAN1->sFilterRegister[can2sb].FR1 = 0;
 800e538:	f8c2 1240 	str.w	r1, [r2, #576]	; 0x240
    CAN1->sFilterRegister[can2sb].FR2 = 0;
 800e53c:	f8c2 1244 	str.w	r1, [r2, #580]	; 0x244
    CAN1->FM1R = 0;
 800e540:	f8c4 1204 	str.w	r1, [r4, #516]	; 0x204
    CAN1->FFA1R = 0;
 800e544:	f8c4 1214 	str.w	r1, [r4, #532]	; 0x214
    CAN1->FS1R = 1 | (1 << can2sb);
 800e548:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
    CAN1->FA1R = 1 | (1 << can2sb);
 800e54c:	f8c4 321c 	str.w	r3, [r4, #540]	; 0x21c
 800e550:	e7d7      	b.n	800e502 <can_lld_set_filters+0xc2>
 800e552:	bf00      	nop
 800e554:	40023800 	.word	0x40023800
 800e558:	40006400 	.word	0x40006400
 800e55c:	00000000 	.word	0x00000000

0800e560 <Vector8C>:
/**
 * @brief   CAN1 TX interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_CAN1_TX_HANDLER) {
 800e560:	b510      	push	{r4, lr}
  canp->can->TSR = CAN_TSR_RQCP0 | CAN_TSR_RQCP1 | CAN_TSR_RQCP2;
 800e562:	4c0c      	ldr	r4, [pc, #48]	; (800e594 <Vector8C+0x34>)
 800e564:	490c      	ldr	r1, [pc, #48]	; (800e598 <Vector8C+0x38>)
 800e566:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800e568:	2320      	movs	r3, #32
 800e56a:	6091      	str	r1, [r2, #8]
 800e56c:	f383 8811 	msr	BASEPRI, r3
  chThdDequeueAllI(tqp, msg);
 800e570:	2100      	movs	r1, #0
 800e572:	f104 0008 	add.w	r0, r4, #8
 800e576:	f7fe fe63 	bl	800d240 <chThdDequeueAllI>
  chEvtBroadcastFlagsI(esp, flags);
 800e57a:	f104 001c 	add.w	r0, r4, #28
 800e57e:	2101      	movs	r1, #1
 800e580:	f7fe fee6 	bl	800d350 <chEvtBroadcastFlagsI>
 800e584:	2300      	movs	r3, #0
 800e586:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_PROLOGUE();

  can_lld_tx_handler(&CAND1);

  OSAL_IRQ_EPILOGUE();
}
 800e58a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800e58e:	f7ff b8af 	b.w	800d6f0 <_port_irq_epilogue>
 800e592:	bf00      	nop
 800e594:	20000f44 	.word	0x20000f44
 800e598:	00010101 	.word	0x00010101
 800e59c:	00000000 	.word	0x00000000

0800e5a0 <Vector90>:
/*
 * @brief   CAN1 RX0 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_CAN1_RX0_HANDLER) {
 800e5a0:	b538      	push	{r3, r4, r5, lr}
  rf0r = canp->can->RF0R;
 800e5a2:	4c16      	ldr	r4, [pc, #88]	; (800e5fc <Vector90+0x5c>)
 800e5a4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e5a6:	68dd      	ldr	r5, [r3, #12]
  if ((rf0r & CAN_RF0R_FMP0) > 0) {
 800e5a8:	07aa      	lsls	r2, r5, #30
 800e5aa:	d111      	bne.n	800e5d0 <Vector90+0x30>
  if ((rf0r & CAN_RF0R_FOVR0) > 0) {
 800e5ac:	06eb      	lsls	r3, r5, #27
 800e5ae:	d50b      	bpl.n	800e5c8 <Vector90+0x28>
    canp->can->RF0R = CAN_RF0R_FOVR0;
 800e5b0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e5b2:	2110      	movs	r1, #16
 800e5b4:	60d9      	str	r1, [r3, #12]
 800e5b6:	2320      	movs	r3, #32
 800e5b8:	f383 8811 	msr	BASEPRI, r3
 800e5bc:	4810      	ldr	r0, [pc, #64]	; (800e600 <Vector90+0x60>)
 800e5be:	f7fe fec7 	bl	800d350 <chEvtBroadcastFlagsI>
 800e5c2:	2300      	movs	r3, #0
 800e5c4:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_PROLOGUE();

  can_lld_rx0_handler(&CAND1);

  OSAL_IRQ_EPILOGUE();
}
 800e5c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  OSAL_IRQ_EPILOGUE();
 800e5cc:	f7ff b890 	b.w	800d6f0 <_port_irq_epilogue>
    canp->can->IER &= ~CAN_IER_FMPIE0;
 800e5d0:	695a      	ldr	r2, [r3, #20]
 800e5d2:	f022 0202 	bic.w	r2, r2, #2
 800e5d6:	615a      	str	r2, [r3, #20]
 800e5d8:	2320      	movs	r3, #32
 800e5da:	f383 8811 	msr	BASEPRI, r3
  chThdDequeueAllI(tqp, msg);
 800e5de:	2100      	movs	r1, #0
 800e5e0:	f104 0010 	add.w	r0, r4, #16
 800e5e4:	f7fe fe2c 	bl	800d240 <chThdDequeueAllI>
  chEvtBroadcastFlagsI(esp, flags);
 800e5e8:	f104 0018 	add.w	r0, r4, #24
 800e5ec:	2101      	movs	r1, #1
 800e5ee:	f7fe feaf 	bl	800d350 <chEvtBroadcastFlagsI>
 800e5f2:	2300      	movs	r3, #0
 800e5f4:	f383 8811 	msr	BASEPRI, r3
 800e5f8:	e7d8      	b.n	800e5ac <Vector90+0xc>
 800e5fa:	bf00      	nop
 800e5fc:	20000f44 	.word	0x20000f44
 800e600:	20000f64 	.word	0x20000f64
	...

0800e610 <Vector94>:
/**
 * @brief   CAN1 RX1 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_CAN1_RX1_HANDLER) {
 800e610:	b538      	push	{r3, r4, r5, lr}
  rf1r = canp->can->RF1R;
 800e612:	4c16      	ldr	r4, [pc, #88]	; (800e66c <Vector94+0x5c>)
 800e614:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e616:	691d      	ldr	r5, [r3, #16]
  if ((rf1r & CAN_RF1R_FMP1) > 0) {
 800e618:	07aa      	lsls	r2, r5, #30
 800e61a:	d111      	bne.n	800e640 <Vector94+0x30>
  if ((rf1r & CAN_RF1R_FOVR1) > 0) {
 800e61c:	06eb      	lsls	r3, r5, #27
 800e61e:	d50b      	bpl.n	800e638 <Vector94+0x28>
    canp->can->RF1R = CAN_RF1R_FOVR1;
 800e620:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e622:	2110      	movs	r1, #16
 800e624:	6119      	str	r1, [r3, #16]
 800e626:	2320      	movs	r3, #32
 800e628:	f383 8811 	msr	BASEPRI, r3
 800e62c:	4810      	ldr	r0, [pc, #64]	; (800e670 <Vector94+0x60>)
 800e62e:	f7fe fe8f 	bl	800d350 <chEvtBroadcastFlagsI>
 800e632:	2300      	movs	r3, #0
 800e634:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_PROLOGUE();

  can_lld_rx1_handler(&CAND1);

  OSAL_IRQ_EPILOGUE();
}
 800e638:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  OSAL_IRQ_EPILOGUE();
 800e63c:	f7ff b858 	b.w	800d6f0 <_port_irq_epilogue>
    canp->can->IER &= ~CAN_IER_FMPIE1;
 800e640:	695a      	ldr	r2, [r3, #20]
 800e642:	f022 0210 	bic.w	r2, r2, #16
 800e646:	615a      	str	r2, [r3, #20]
 800e648:	2320      	movs	r3, #32
 800e64a:	f383 8811 	msr	BASEPRI, r3
  chThdDequeueAllI(tqp, msg);
 800e64e:	2100      	movs	r1, #0
 800e650:	f104 0010 	add.w	r0, r4, #16
 800e654:	f7fe fdf4 	bl	800d240 <chThdDequeueAllI>
  chEvtBroadcastFlagsI(esp, flags);
 800e658:	f104 0018 	add.w	r0, r4, #24
 800e65c:	2102      	movs	r1, #2
 800e65e:	f7fe fe77 	bl	800d350 <chEvtBroadcastFlagsI>
 800e662:	2300      	movs	r3, #0
 800e664:	f383 8811 	msr	BASEPRI, r3
 800e668:	e7d8      	b.n	800e61c <Vector94+0xc>
 800e66a:	bf00      	nop
 800e66c:	20000f44 	.word	0x20000f44
 800e670:	20000f64 	.word	0x20000f64
	...

0800e680 <Vector98>:
/**
 * @brief   CAN1 SCE interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_CAN1_SCE_HANDLER) {
 800e680:	b538      	push	{r3, r4, r5, lr}
  msr = canp->can->MSR;
 800e682:	4d1b      	ldr	r5, [pc, #108]	; (800e6f0 <Vector98+0x70>)
 800e684:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800e686:	685c      	ldr	r4, [r3, #4]
  canp->can->MSR = CAN_MSR_ERRI | CAN_MSR_WKUI | CAN_MSR_SLAKI;
 800e688:	221c      	movs	r2, #28
 800e68a:	605a      	str	r2, [r3, #4]
  if (msr & CAN_MSR_WKUI) {
 800e68c:	0722      	lsls	r2, r4, #28
 800e68e:	d41d      	bmi.n	800e6cc <Vector98+0x4c>
  if (msr & CAN_MSR_ERRI) {
 800e690:	0763      	lsls	r3, r4, #29
 800e692:	d517      	bpl.n	800e6c4 <Vector98+0x44>
    uint32_t esr = canp->can->ESR;
 800e694:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800e696:	6993      	ldr	r3, [r2, #24]
    canp->can->ESR &= ~CAN_ESR_LEC;
 800e698:	6991      	ldr	r1, [r2, #24]
 800e69a:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 800e69e:	6191      	str	r1, [r2, #24]
    if ((esr & CAN_ESR_LEC) > 0)
 800e6a0:	f013 0f70 	tst.w	r3, #112	; 0x70
    flags = (eventflags_t)(esr & 7);
 800e6a4:	f003 0107 	and.w	r1, r3, #7
      flags |= CAN_FRAMING_ERROR;
 800e6a8:	bf18      	it	ne
 800e6aa:	f041 0108 	orrne.w	r1, r1, #8
 800e6ae:	2220      	movs	r2, #32
 800e6b0:	f382 8811 	msr	BASEPRI, r2
 800e6b4:	480f      	ldr	r0, [pc, #60]	; (800e6f4 <Vector98+0x74>)
 800e6b6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800e6ba:	f7fe fe49 	bl	800d350 <chEvtBroadcastFlagsI>
 800e6be:	2300      	movs	r3, #0
 800e6c0:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_PROLOGUE();

  can_lld_sce_handler(&CAND1);

  OSAL_IRQ_EPILOGUE();
}
 800e6c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  OSAL_IRQ_EPILOGUE();
 800e6c8:	f7ff b812 	b.w	800d6f0 <_port_irq_epilogue>
    canp->can->MCR &= ~CAN_MCR_SLEEP;
 800e6cc:	681a      	ldr	r2, [r3, #0]
    canp->state = CAN_READY;
 800e6ce:	4628      	mov	r0, r5
    canp->can->MCR &= ~CAN_MCR_SLEEP;
 800e6d0:	f022 0202 	bic.w	r2, r2, #2
    canp->state = CAN_READY;
 800e6d4:	2103      	movs	r1, #3
 800e6d6:	f800 1b28 	strb.w	r1, [r0], #40
 800e6da:	2120      	movs	r1, #32
    canp->can->MCR &= ~CAN_MCR_SLEEP;
 800e6dc:	601a      	str	r2, [r3, #0]
 800e6de:	f381 8811 	msr	BASEPRI, r1
 800e6e2:	2100      	movs	r1, #0
 800e6e4:	f7fe fe34 	bl	800d350 <chEvtBroadcastFlagsI>
 800e6e8:	2300      	movs	r3, #0
 800e6ea:	f383 8811 	msr	BASEPRI, r3
 800e6ee:	e7cf      	b.n	800e690 <Vector98+0x10>
 800e6f0:	20000f44 	.word	0x20000f44
 800e6f4:	20000f64 	.word	0x20000f64
	...

0800e700 <can_lld_init>:
/**
 * @brief   Low level CAN driver initialization.
 *
 * @notapi
 */
void can_lld_init(void) {
 800e700:	b510      	push	{r4, lr}

#if STM32_CAN_USE_CAN1
  /* Driver initialization.*/
  canObjectInit(&CAND1);
 800e702:	4c06      	ldr	r4, [pc, #24]	; (800e71c <can_lld_init+0x1c>)
 800e704:	4620      	mov	r0, r4
 800e706:	f7ff f84b 	bl	800d7a0 <canObjectInit>
  CAND2.can = CAN2;
#endif

  /* Filters initialization.*/
#if STM32_HAS_CAN2
  can_lld_set_filters(STM32_CAN_MAX_FILTERS / 2, 0, NULL);
 800e70a:	2200      	movs	r2, #0
  CAND1.can = CAN1;
 800e70c:	4b04      	ldr	r3, [pc, #16]	; (800e720 <can_lld_init+0x20>)
 800e70e:	62e3      	str	r3, [r4, #44]	; 0x2c
  can_lld_set_filters(STM32_CAN_MAX_FILTERS / 2, 0, NULL);
 800e710:	4611      	mov	r1, r2
 800e712:	200e      	movs	r0, #14
#else
  can_lld_set_filters(STM32_CAN_MAX_FILTERS, 0, NULL);
#endif
}
 800e714:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  can_lld_set_filters(STM32_CAN_MAX_FILTERS / 2, 0, NULL);
 800e718:	f7ff be92 	b.w	800e440 <can_lld_set_filters>
 800e71c:	20000f44 	.word	0x20000f44
 800e720:	40006400 	.word	0x40006400
	...

0800e730 <_pal_lld_init>:
#elif defined(STM32F0XX)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F3XX) || defined(STM32F37X)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F2XX) || defined(STM32F4XX)
  RCC->AHB1ENR   |= AHB1_EN_MASK;
 800e730:	4968      	ldr	r1, [pc, #416]	; (800e8d4 <_pal_lld_init+0x1a4>)
  gpiop->OTYPER  = config->otyper;
 800e732:	4a69      	ldr	r2, [pc, #420]	; (800e8d8 <_pal_lld_init+0x1a8>)
 800e734:	4b69      	ldr	r3, [pc, #420]	; (800e8dc <_pal_lld_init+0x1ac>)
void _pal_lld_init(const PALConfig *config) {
 800e736:	b470      	push	{r4, r5, r6}
  RCC->AHB1ENR   |= AHB1_EN_MASK;
 800e738:	6b0d      	ldr	r5, [r1, #48]	; 0x30
 800e73a:	f240 16ff 	movw	r6, #511	; 0x1ff
 800e73e:	4335      	orrs	r5, r6
 800e740:	630d      	str	r5, [r1, #48]	; 0x30
  RCC->AHB1LPENR |= AHB1_LPEN_MASK;
 800e742:	6d0c      	ldr	r4, [r1, #80]	; 0x50
 800e744:	4334      	orrs	r4, r6
 800e746:	650c      	str	r4, [r1, #80]	; 0x50
  gpiop->OTYPER  = config->otyper;
 800e748:	6841      	ldr	r1, [r0, #4]
 800e74a:	6051      	str	r1, [r2, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800e74c:	6881      	ldr	r1, [r0, #8]
 800e74e:	6091      	str	r1, [r2, #8]
  gpiop->PUPDR   = config->pupdr;
 800e750:	68c1      	ldr	r1, [r0, #12]
 800e752:	60d1      	str	r1, [r2, #12]
  gpiop->ODR     = config->odr;
 800e754:	6901      	ldr	r1, [r0, #16]
 800e756:	6151      	str	r1, [r2, #20]
  gpiop->AFRL    = config->afrl;
 800e758:	6941      	ldr	r1, [r0, #20]
 800e75a:	6211      	str	r1, [r2, #32]
  gpiop->AFRH    = config->afrh;
 800e75c:	6981      	ldr	r1, [r0, #24]
 800e75e:	6251      	str	r1, [r2, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800e760:	6801      	ldr	r1, [r0, #0]
 800e762:	6011      	str	r1, [r2, #0]
  gpiop->OTYPER  = config->otyper;
 800e764:	6a02      	ldr	r2, [r0, #32]
 800e766:	605a      	str	r2, [r3, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800e768:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800e76a:	609a      	str	r2, [r3, #8]
  gpiop->PUPDR   = config->pupdr;
 800e76c:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800e76e:	60da      	str	r2, [r3, #12]
  gpiop->ODR     = config->odr;
 800e770:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800e772:	615a      	str	r2, [r3, #20]
  gpiop->AFRL    = config->afrl;
 800e774:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800e776:	621a      	str	r2, [r3, #32]
  gpiop->AFRH    = config->afrh;
 800e778:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800e77a:	625a      	str	r2, [r3, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800e77c:	69c2      	ldr	r2, [r0, #28]
 800e77e:	601a      	str	r2, [r3, #0]
  gpiop->OTYPER  = config->otyper;
 800e780:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800e782:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
  gpiop->OSPEEDR = config->ospeedr;
 800e786:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800e788:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
  gpiop->PUPDR   = config->pupdr;
 800e78c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e78e:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
  gpiop->ODR     = config->odr;
 800e792:	6c82      	ldr	r2, [r0, #72]	; 0x48
 800e794:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  gpiop->AFRL    = config->afrl;
 800e798:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 800e79a:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
  gpiop->AFRH    = config->afrh;
 800e79e:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800e7a0:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
  gpiop->MODER   = config->moder;
 800e7a4:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800e7a6:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  gpiop->OTYPER  = config->otyper;
 800e7aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e7ae:	6d82      	ldr	r2, [r0, #88]	; 0x58
 800e7b0:	605a      	str	r2, [r3, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800e7b2:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800e7b4:	609a      	str	r2, [r3, #8]
  gpiop->PUPDR   = config->pupdr;
 800e7b6:	6e02      	ldr	r2, [r0, #96]	; 0x60
 800e7b8:	60da      	str	r2, [r3, #12]
  gpiop->ODR     = config->odr;
 800e7ba:	6e42      	ldr	r2, [r0, #100]	; 0x64
 800e7bc:	615a      	str	r2, [r3, #20]
  gpiop->AFRL    = config->afrl;
 800e7be:	6e82      	ldr	r2, [r0, #104]	; 0x68
 800e7c0:	621a      	str	r2, [r3, #32]
  gpiop->AFRH    = config->afrh;
 800e7c2:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 800e7c4:	625a      	str	r2, [r3, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800e7c6:	6d42      	ldr	r2, [r0, #84]	; 0x54
 800e7c8:	601a      	str	r2, [r3, #0]
  gpiop->OTYPER  = config->otyper;
 800e7ca:	6f42      	ldr	r2, [r0, #116]	; 0x74
 800e7cc:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
  gpiop->OSPEEDR = config->ospeedr;
 800e7d0:	6f82      	ldr	r2, [r0, #120]	; 0x78
 800e7d2:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
  gpiop->PUPDR   = config->pupdr;
 800e7d6:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 800e7d8:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
  gpiop->ODR     = config->odr;
 800e7dc:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80
 800e7e0:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  gpiop->AFRL    = config->afrl;
 800e7e4:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 800e7e8:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
  gpiop->AFRH    = config->afrh;
 800e7ec:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 800e7f0:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
  gpiop->MODER   = config->moder;
 800e7f4:	6f02      	ldr	r2, [r0, #112]	; 0x70
 800e7f6:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  gpiop->OTYPER  = config->otyper;
 800e7fa:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800e7fe:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
  gpiop->OSPEEDR = config->ospeedr;
 800e802:	f8d0 2094 	ldr.w	r2, [r0, #148]	; 0x94
 800e806:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808
  gpiop->PUPDR   = config->pupdr;
 800e80a:	f8d0 2098 	ldr.w	r2, [r0, #152]	; 0x98
 800e80e:	f8c3 280c 	str.w	r2, [r3, #2060]	; 0x80c
  gpiop->ODR     = config->odr;
 800e812:	f8d0 209c 	ldr.w	r2, [r0, #156]	; 0x9c
 800e816:	f8c3 2814 	str.w	r2, [r3, #2068]	; 0x814
  gpiop->AFRL    = config->afrl;
 800e81a:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
 800e81e:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
  gpiop->AFRH    = config->afrh;
 800e822:	f8d0 20a4 	ldr.w	r2, [r0, #164]	; 0xa4
 800e826:	f8c3 2824 	str.w	r2, [r3, #2084]	; 0x824
  gpiop->MODER   = config->moder;
 800e82a:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 800e82e:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
  gpiop->OTYPER  = config->otyper;
 800e832:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 800e836:	f8d0 20ac 	ldr.w	r2, [r0, #172]	; 0xac
 800e83a:	605a      	str	r2, [r3, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800e83c:	f8d0 20b0 	ldr.w	r2, [r0, #176]	; 0xb0
 800e840:	609a      	str	r2, [r3, #8]
  gpiop->PUPDR   = config->pupdr;
 800e842:	f8d0 20b4 	ldr.w	r2, [r0, #180]	; 0xb4
 800e846:	60da      	str	r2, [r3, #12]
  gpiop->ODR     = config->odr;
 800e848:	f8d0 20b8 	ldr.w	r2, [r0, #184]	; 0xb8
 800e84c:	615a      	str	r2, [r3, #20]
  gpiop->AFRL    = config->afrl;
 800e84e:	f8d0 20bc 	ldr.w	r2, [r0, #188]	; 0xbc
 800e852:	621a      	str	r2, [r3, #32]
  gpiop->AFRH    = config->afrh;
 800e854:	f8d0 20c0 	ldr.w	r2, [r0, #192]	; 0xc0
 800e858:	625a      	str	r2, [r3, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800e85a:	f8d0 20a8 	ldr.w	r2, [r0, #168]	; 0xa8
 800e85e:	601a      	str	r2, [r3, #0]
  gpiop->OTYPER  = config->otyper;
 800e860:	f8d0 20c8 	ldr.w	r2, [r0, #200]	; 0xc8
 800e864:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
  gpiop->OSPEEDR = config->ospeedr;
 800e868:	f8d0 20cc 	ldr.w	r2, [r0, #204]	; 0xcc
 800e86c:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
  gpiop->PUPDR   = config->pupdr;
 800e870:	f8d0 20d0 	ldr.w	r2, [r0, #208]	; 0xd0
 800e874:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
  gpiop->ODR     = config->odr;
 800e878:	f8d0 20d4 	ldr.w	r2, [r0, #212]	; 0xd4
 800e87c:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  gpiop->AFRL    = config->afrl;
 800e880:	f8d0 20d8 	ldr.w	r2, [r0, #216]	; 0xd8
 800e884:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
  gpiop->AFRH    = config->afrh;
 800e888:	f8d0 20dc 	ldr.w	r2, [r0, #220]	; 0xdc
 800e88c:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
  gpiop->MODER   = config->moder;
 800e890:	f8d0 20c4 	ldr.w	r2, [r0, #196]	; 0xc4
 800e894:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  gpiop->OTYPER  = config->otyper;
 800e898:	f8d0 20e4 	ldr.w	r2, [r0, #228]	; 0xe4
 800e89c:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
  gpiop->OSPEEDR = config->ospeedr;
 800e8a0:	f8d0 20e8 	ldr.w	r2, [r0, #232]	; 0xe8
 800e8a4:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808
  gpiop->PUPDR   = config->pupdr;
 800e8a8:	f8d0 20ec 	ldr.w	r2, [r0, #236]	; 0xec
 800e8ac:	f8c3 280c 	str.w	r2, [r3, #2060]	; 0x80c
  gpiop->ODR     = config->odr;
 800e8b0:	f8d0 20f0 	ldr.w	r2, [r0, #240]	; 0xf0
 800e8b4:	f8c3 2814 	str.w	r2, [r3, #2068]	; 0x814
  gpiop->AFRL    = config->afrl;
 800e8b8:	f8d0 20f4 	ldr.w	r2, [r0, #244]	; 0xf4
 800e8bc:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
  gpiop->AFRH    = config->afrh;
 800e8c0:	f8d0 20f8 	ldr.w	r2, [r0, #248]	; 0xf8
 800e8c4:	f8c3 2824 	str.w	r2, [r3, #2084]	; 0x824
  gpiop->MODER   = config->moder;
 800e8c8:	f8d0 20e0 	ldr.w	r2, [r0, #224]	; 0xe0
 800e8cc:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
  initgpio(GPIOH, &config->PHData);
#endif
#if STM32_HAS_GPIOI
  initgpio(GPIOI, &config->PIData);
#endif
}
 800e8d0:	bc70      	pop	{r4, r5, r6}
 800e8d2:	4770      	bx	lr
 800e8d4:	40023800 	.word	0x40023800
 800e8d8:	40020000 	.word	0x40020000
 800e8dc:	40020400 	.word	0x40020400

0800e8e0 <_pal_lld_setgroupmode>:
 * @notapi
 */
#if 1
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {
 800e8e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
 800e8e4:	f002 0c03 	and.w	ip, r2, #3
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
 800e8e8:	f3c2 0780 	ubfx	r7, r2, #2, #1
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
 800e8ec:	f3c2 06c1 	ubfx	r6, r2, #3, #2
  uint32_t pupdr   = (mode & PAL_STM32_PUDR_MASK) >> 5;
 800e8f0:	f3c2 1541 	ubfx	r5, r2, #5, #2
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
  uint32_t bit     = 0;
 800e8f4:	2400      	movs	r4, #0
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
 800e8f6:	f3c2 12c3 	ubfx	r2, r2, #7, #4
  while (TRUE) {
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m4 = 15 << ((bit & 7) * 4);
 800e8fa:	f04f 0e0f 	mov.w	lr, #15
      if (bit < 8)
        port->AFRL = (port->AFRL & ~m4) | altrmask;
      else
        port->AFRH = (port->AFRH & ~m4) | altrmask;
      m1 = 1 << bit;
 800e8fe:	f04f 0901 	mov.w	r9, #1
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
      m2 = 3 << (bit * 2);
 800e902:	f04f 0803 	mov.w	r8, #3
 800e906:	e030      	b.n	800e96a <_pal_lld_setgroupmode+0x8a>
        port->AFRL = (port->AFRL & ~m4) | altrmask;
 800e908:	f8d0 b020 	ldr.w	fp, [r0, #32]
 800e90c:	ea0b 0a0a 	and.w	sl, fp, sl
 800e910:	ea4a 0303 	orr.w	r3, sl, r3
 800e914:	6203      	str	r3, [r0, #32]
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 800e916:	6843      	ldr	r3, [r0, #4]
      m1 = 1 << bit;
 800e918:	fa09 fa04 	lsl.w	sl, r9, r4
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 800e91c:	ea23 030a 	bic.w	r3, r3, sl
 800e920:	433b      	orrs	r3, r7
 800e922:	6043      	str	r3, [r0, #4]
      m2 = 3 << (bit * 2);
 800e924:	0063      	lsls	r3, r4, #1
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 800e926:	f8d0 a008 	ldr.w	sl, [r0, #8]
      m2 = 3 << (bit * 2);
 800e92a:	fa08 f303 	lsl.w	r3, r8, r3
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 800e92e:	43db      	mvns	r3, r3
 800e930:	ea0a 0a03 	and.w	sl, sl, r3
 800e934:	ea4a 0a06 	orr.w	sl, sl, r6
 800e938:	f8c0 a008 	str.w	sl, [r0, #8]
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 800e93c:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 800e940:	ea03 0a0a 	and.w	sl, r3, sl
 800e944:	ea4a 0a05 	orr.w	sl, sl, r5
 800e948:	f8c0 a00c 	str.w	sl, [r0, #12]
      port->MODER   = (port->MODER & ~m2) | moder;
 800e94c:	f8d0 a000 	ldr.w	sl, [r0]
 800e950:	ea03 030a 	and.w	r3, r3, sl
 800e954:	ea43 030c 	orr.w	r3, r3, ip
 800e958:	6003      	str	r3, [r0, #0]
    }
    mask >>= 1;
    if (!mask)
 800e95a:	0849      	lsrs	r1, r1, #1
 800e95c:	d01b      	beq.n	800e996 <_pal_lld_setgroupmode+0xb6>
      return;
    otyper <<= 1;
 800e95e:	007f      	lsls	r7, r7, #1
    ospeedr <<= 2;
 800e960:	00b6      	lsls	r6, r6, #2
    pupdr <<= 2;
 800e962:	00ad      	lsls	r5, r5, #2
    moder <<= 2;
 800e964:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
    bit++;
 800e968:	3401      	adds	r4, #1
      altrmask = altr << ((bit & 7) * 4);
 800e96a:	f004 0307 	and.w	r3, r4, #7
 800e96e:	009b      	lsls	r3, r3, #2
      m4 = 15 << ((bit & 7) * 4);
 800e970:	fa0e fa03 	lsl.w	sl, lr, r3
    if ((mask & 1) != 0) {
 800e974:	f011 0f01 	tst.w	r1, #1
      altrmask = altr << ((bit & 7) * 4);
 800e978:	fa02 f303 	lsl.w	r3, r2, r3
 800e97c:	ea6f 0a0a 	mvn.w	sl, sl
    if ((mask & 1) != 0) {
 800e980:	d0eb      	beq.n	800e95a <_pal_lld_setgroupmode+0x7a>
      if (bit < 8)
 800e982:	2c07      	cmp	r4, #7
 800e984:	d9c0      	bls.n	800e908 <_pal_lld_setgroupmode+0x28>
        port->AFRH = (port->AFRH & ~m4) | altrmask;
 800e986:	f8d0 b024 	ldr.w	fp, [r0, #36]	; 0x24
 800e98a:	ea0b 0a0a 	and.w	sl, fp, sl
 800e98e:	ea4a 0303 	orr.w	r3, sl, r3
 800e992:	6243      	str	r3, [r0, #36]	; 0x24
 800e994:	e7bf      	b.n	800e916 <_pal_lld_setgroupmode+0x36>
  }
}
 800e996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e99a:	bf00      	nop
 800e99c:	0000      	movs	r0, r0
	...

0800e9a0 <VectorC4>:
 * @param[in] i2cp      pointer to the @p I2CDriver object
 *
 * @notapi
 */
static void i2c_lld_serve_event_interrupt(I2CDriver *i2cp) {
  I2C_TypeDef *dp = i2cp->i2c;
 800e9a0:	4839      	ldr	r0, [pc, #228]	; (800ea88 <VectorC4+0xe8>)
  uint32_t event = dp->SR1;

  /* Interrupts are disabled just before dmaStreamEnable() because there
     is no need of interrupts until next transaction begin. All the work is
     done by the DMA.*/
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 800e9a2:	4a3a      	ldr	r2, [pc, #232]	; (800ea8c <VectorC4+0xec>)
/**
 * @brief   I2C2 event interrupt handler.
 *
 * @notapi
 */
OSAL_IRQ_HANDLER(STM32_I2C2_EVENT_HANDLER) {
 800e9a4:	b570      	push	{r4, r5, r6, lr}
  I2C_TypeDef *dp = i2cp->i2c;
 800e9a6:	6b44      	ldr	r4, [r0, #52]	; 0x34
  uint32_t regSR2 = dp->SR2;
 800e9a8:	69a3      	ldr	r3, [r4, #24]
  uint32_t event = dp->SR1;
 800e9aa:	6965      	ldr	r5, [r4, #20]
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 800e9ac:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 800e9b0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800e9b4:	4293      	cmp	r3, r2
 800e9b6:	d050      	beq.n	800ea5a <VectorC4+0xba>
 800e9b8:	d822      	bhi.n	800ea00 <VectorC4+0x60>
 800e9ba:	3a07      	subs	r2, #7
 800e9bc:	4293      	cmp	r3, r2
 800e9be:	d040      	beq.n	800ea42 <VectorC4+0xa2>
 800e9c0:	3201      	adds	r2, #1
 800e9c2:	4293      	cmp	r3, r2
 800e9c4:	d114      	bne.n	800e9f0 <VectorC4+0x50>
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 800e9c6:	6862      	ldr	r2, [r4, #4]
    dmaStreamEnable(i2cp->dmarx);
 800e9c8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 800e9ca:	f422 7200 	bic.w	r2, r2, #512	; 0x200
    dmaStreamEnable(i2cp->dmarx);
 800e9ce:	681b      	ldr	r3, [r3, #0]
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 800e9d0:	6062      	str	r2, [r4, #4]
    dmaStreamEnable(i2cp->dmarx);
 800e9d2:	681a      	ldr	r2, [r3, #0]
 800e9d4:	f042 0201 	orr.w	r2, r2, #1
 800e9d8:	601a      	str	r2, [r3, #0]
    dp->CR2 |= I2C_CR2_LAST;                 /* Needed in receiver mode. */
 800e9da:	6862      	ldr	r2, [r4, #4]
 800e9dc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e9e0:	6062      	str	r2, [r4, #4]
    if (dmaStreamGetTransactionSize(i2cp->dmarx) < 2)
 800e9e2:	685b      	ldr	r3, [r3, #4]
 800e9e4:	2b01      	cmp	r3, #1
 800e9e6:	d803      	bhi.n	800e9f0 <VectorC4+0x50>
      dp->CR1 &= ~I2C_CR1_ACK;
 800e9e8:	6823      	ldr	r3, [r4, #0]
 800e9ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e9ee:	6023      	str	r3, [r4, #0]
  if (event & (I2C_SR1_ADDR | I2C_SR1_ADD10))
 800e9f0:	f015 0f0a 	tst.w	r5, #10
    (void)dp->SR2;
 800e9f4:	bf18      	it	ne
 800e9f6:	69a3      	ldrne	r3, [r4, #24]
  OSAL_IRQ_PROLOGUE();

  i2c_lld_serve_event_interrupt(&I2CD2);

  OSAL_IRQ_EPILOGUE();
}
 800e9f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  OSAL_IRQ_EPILOGUE();
 800e9fc:	f7fe be78 	b.w	800d6f0 <_port_irq_epilogue>
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 800ea00:	4a23      	ldr	r2, [pc, #140]	; (800ea90 <VectorC4+0xf0>)
 800ea02:	4293      	cmp	r3, r2
 800ea04:	d012      	beq.n	800ea2c <VectorC4+0x8c>
 800ea06:	3202      	adds	r2, #2
 800ea08:	4293      	cmp	r3, r2
 800ea0a:	d1f1      	bne.n	800e9f0 <VectorC4+0x50>
    if (dmaStreamGetTransactionSize(i2cp->dmarx) > 0) {
 800ea0c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	685e      	ldr	r6, [r3, #4]
 800ea12:	b33e      	cbz	r6, 800ea64 <VectorC4+0xc4>
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 800ea14:	6823      	ldr	r3, [r4, #0]
      i2cp->addr |= 0x01;
 800ea16:	8c02      	ldrh	r2, [r0, #32]
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 800ea18:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
      i2cp->addr |= 0x01;
 800ea1c:	f042 0201 	orr.w	r2, r2, #1
 800ea20:	8402      	strh	r2, [r0, #32]
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 800ea22:	6023      	str	r3, [r4, #0]
}
 800ea24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  OSAL_IRQ_EPILOGUE();
 800ea28:	f7fe be62 	b.w	800d6f0 <_port_irq_epilogue>
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 800ea2c:	6863      	ldr	r3, [r4, #4]
    dmaStreamEnable(i2cp->dmatx);
 800ea2e:	6b02      	ldr	r2, [r0, #48]	; 0x30
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 800ea30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    dmaStreamEnable(i2cp->dmatx);
 800ea34:	6812      	ldr	r2, [r2, #0]
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 800ea36:	6063      	str	r3, [r4, #4]
    dmaStreamEnable(i2cp->dmatx);
 800ea38:	6813      	ldr	r3, [r2, #0]
 800ea3a:	f043 0301 	orr.w	r3, r3, #1
 800ea3e:	6013      	str	r3, [r2, #0]
 800ea40:	e7d6      	b.n	800e9f0 <VectorC4+0x50>
    if ((i2cp->addr >> 8) > 0) { 
 800ea42:	8c03      	ldrh	r3, [r0, #32]
 800ea44:	0a1a      	lsrs	r2, r3, #8
 800ea46:	d00b      	beq.n	800ea60 <VectorC4+0xc0>
      dp->DR = 0xF0 | (0x6 & (i2cp->addr >> 8)) | (0x1 & i2cp->addr);
 800ea48:	f003 0301 	and.w	r3, r3, #1
 800ea4c:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 800ea50:	f002 0206 	and.w	r2, r2, #6
 800ea54:	4313      	orrs	r3, r2
 800ea56:	6123      	str	r3, [r4, #16]
 800ea58:	e7ca      	b.n	800e9f0 <VectorC4+0x50>
    dp->DR = (0xFF & (i2cp->addr >> 1));
 800ea5a:	8c03      	ldrh	r3, [r0, #32]
 800ea5c:	f3c3 0347 	ubfx	r3, r3, #1, #8
 800ea60:	6123      	str	r3, [r4, #16]
 800ea62:	e7c5      	b.n	800e9f0 <VectorC4+0x50>
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 800ea64:	6863      	ldr	r3, [r4, #4]
 800ea66:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ea6a:	6063      	str	r3, [r4, #4]
    dp->CR1 |= I2C_CR1_STOP;
 800ea6c:	6823      	ldr	r3, [r4, #0]
 800ea6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ea72:	6023      	str	r3, [r4, #0]
 800ea74:	2320      	movs	r3, #32
 800ea76:	f383 8811 	msr	BASEPRI, r3
  chThdResumeI(trp, msg);
 800ea7a:	301c      	adds	r0, #28
 800ea7c:	4631      	mov	r1, r6
 800ea7e:	f7fe fba7 	bl	800d1d0 <chThdResumeI>
 800ea82:	f386 8811 	msr	BASEPRI, r6
 800ea86:	e7b3      	b.n	800e9f0 <VectorC4+0x50>
 800ea88:	20000f74 	.word	0x20000f74
 800ea8c:	00030008 	.word	0x00030008
 800ea90:	00070082 	.word	0x00070082
	...

0800eaa0 <VectorC8>:
 * @brief   I2C2 error interrupt handler.
 *
 * @notapi
 */
OSAL_IRQ_HANDLER(STM32_I2C2_ERROR_HANDLER) {
  uint16_t sr = I2CD2.i2c->SR1;
 800eaa0:	4834      	ldr	r0, [pc, #208]	; (800eb74 <VectorC8+0xd4>)
OSAL_IRQ_HANDLER(STM32_I2C2_ERROR_HANDLER) {
 800eaa2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  dmaStreamDisable(i2cp->dmatx);
 800eaa4:	e9d0 750c 	ldrd	r7, r5, [r0, #48]	; 0x30
  uint16_t sr = I2CD2.i2c->SR1;
 800eaa8:	696c      	ldr	r4, [r5, #20]
  dmaStreamDisable(i2cp->dmatx);
 800eaaa:	683a      	ldr	r2, [r7, #0]

  OSAL_IRQ_PROLOGUE();

  I2CD2.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
 800eaac:	f404 435f 	and.w	r3, r4, #57088	; 0xdf00
 800eab0:	43db      	mvns	r3, r3
 800eab2:	616b      	str	r3, [r5, #20]
  dmaStreamDisable(i2cp->dmatx);
 800eab4:	6813      	ldr	r3, [r2, #0]
 800eab6:	f023 031f 	bic.w	r3, r3, #31
 800eaba:	6013      	str	r3, [r2, #0]
  uint16_t sr = I2CD2.i2c->SR1;
 800eabc:	b2a1      	uxth	r1, r4
  dmaStreamDisable(i2cp->dmatx);
 800eabe:	6813      	ldr	r3, [r2, #0]
 800eac0:	07db      	lsls	r3, r3, #31
 800eac2:	d4fc      	bmi.n	800eabe <VectorC8+0x1e>
 800eac4:	7a3a      	ldrb	r2, [r7, #8]
  dmaStreamDisable(i2cp->dmarx);
 800eac6:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
  dmaStreamDisable(i2cp->dmatx);
 800eac8:	687f      	ldr	r7, [r7, #4]
 800eaca:	233d      	movs	r3, #61	; 0x3d
 800eacc:	4093      	lsls	r3, r2
  dmaStreamDisable(i2cp->dmarx);
 800eace:	6832      	ldr	r2, [r6, #0]
  dmaStreamDisable(i2cp->dmatx);
 800ead0:	603b      	str	r3, [r7, #0]
  dmaStreamDisable(i2cp->dmarx);
 800ead2:	6813      	ldr	r3, [r2, #0]
 800ead4:	f023 031f 	bic.w	r3, r3, #31
 800ead8:	6013      	str	r3, [r2, #0]
 800eada:	6813      	ldr	r3, [r2, #0]
 800eadc:	07df      	lsls	r7, r3, #31
 800eade:	d4fc      	bmi.n	800eada <VectorC8+0x3a>
 800eae0:	7a37      	ldrb	r7, [r6, #8]
 800eae2:	6872      	ldr	r2, [r6, #4]
 800eae4:	233d      	movs	r3, #61	; 0x3d
 800eae6:	40bb      	lsls	r3, r7
 800eae8:	6013      	str	r3, [r2, #0]
  if (sr & I2C_SR1_BERR)                            /* Bus error.           */
 800eaea:	f411 7380 	ands.w	r3, r1, #256	; 0x100
    i2cp->errors |= I2C_BUS_ERROR;
 800eaee:	bf18      	it	ne
 800eaf0:	2301      	movne	r3, #1
  if (sr & I2C_SR1_ARLO)                            /* Arbitration lost.    */
 800eaf2:	058a      	lsls	r2, r1, #22
    i2cp->errors |= I2C_BUS_ERROR;
 800eaf4:	6083      	str	r3, [r0, #8]
    i2cp->errors |= I2C_ARBITRATION_LOST;
 800eaf6:	bf44      	itt	mi
 800eaf8:	f043 0302 	orrmi.w	r3, r3, #2
 800eafc:	6083      	strmi	r3, [r0, #8]
  if (sr & I2C_SR1_AF) {                            /* Acknowledge fail.    */
 800eafe:	054f      	lsls	r7, r1, #21
 800eb00:	d50a      	bpl.n	800eb18 <VectorC8+0x78>
    i2cp->i2c->CR2 &= ~I2C_CR2_ITEVTEN;
 800eb02:	686a      	ldr	r2, [r5, #4]
 800eb04:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800eb08:	606a      	str	r2, [r5, #4]
    i2cp->i2c->CR1 |= I2C_CR1_STOP;                 /* Setting stop bit.    */
 800eb0a:	682a      	ldr	r2, [r5, #0]
    i2cp->errors |= I2C_ACK_FAILURE;
 800eb0c:	f043 0304 	orr.w	r3, r3, #4
    i2cp->i2c->CR1 |= I2C_CR1_STOP;                 /* Setting stop bit.    */
 800eb10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800eb14:	602a      	str	r2, [r5, #0]
    i2cp->errors |= I2C_ACK_FAILURE;
 800eb16:	6083      	str	r3, [r0, #8]
  if (sr & I2C_SR1_OVR)                             /* Overrun.             */
 800eb18:	050e      	lsls	r6, r1, #20
    i2cp->errors |= I2C_OVERRUN;
 800eb1a:	bf44      	itt	mi
 800eb1c:	f043 0308 	orrmi.w	r3, r3, #8
 800eb20:	6083      	strmi	r3, [r0, #8]
  if (sr & I2C_SR1_TIMEOUT)                         /* SMBus Timeout.       */
 800eb22:	044d      	lsls	r5, r1, #17
    i2cp->errors |= I2C_TIMEOUT;
 800eb24:	bf44      	itt	mi
 800eb26:	f043 0320 	orrmi.w	r3, r3, #32
 800eb2a:	6083      	strmi	r3, [r0, #8]
  if (sr & I2C_SR1_PECERR)                          /* PEC error.           */
 800eb2c:	04ca      	lsls	r2, r1, #19
 800eb2e:	b224      	sxth	r4, r4
 800eb30:	d513      	bpl.n	800eb5a <VectorC8+0xba>
    i2cp->errors |= I2C_PEC_ERROR;
 800eb32:	f043 0310 	orr.w	r3, r3, #16
  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
 800eb36:	2c00      	cmp	r4, #0
    i2cp->errors |= I2C_PEC_ERROR;
 800eb38:	6083      	str	r3, [r0, #8]
  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
 800eb3a:	db16      	blt.n	800eb6a <VectorC8+0xca>
 800eb3c:	2320      	movs	r3, #32
 800eb3e:	f383 8811 	msr	BASEPRI, r3
 800eb42:	f06f 0101 	mvn.w	r1, #1
 800eb46:	480c      	ldr	r0, [pc, #48]	; (800eb78 <VectorC8+0xd8>)
 800eb48:	f7fe fb42 	bl	800d1d0 <chThdResumeI>
 800eb4c:	2300      	movs	r3, #0
 800eb4e:	f383 8811 	msr	BASEPRI, r3
  i2c_lld_serve_error_interrupt(&I2CD2, sr);

  OSAL_IRQ_EPILOGUE();
}
 800eb52:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_EPILOGUE();
 800eb56:	f7fe bdcb 	b.w	800d6f0 <_port_irq_epilogue>
  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
 800eb5a:	2c00      	cmp	r4, #0
 800eb5c:	db05      	blt.n	800eb6a <VectorC8+0xca>
  if (i2cp->errors != I2C_NO_ERROR)
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d1ec      	bne.n	800eb3c <VectorC8+0x9c>
}
 800eb62:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_EPILOGUE();
 800eb66:	f7fe bdc3 	b.w	800d6f0 <_port_irq_epilogue>
    i2cp->errors |= I2C_SMB_ALERT;
 800eb6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eb6e:	6083      	str	r3, [r0, #8]
 800eb70:	e7e4      	b.n	800eb3c <VectorC8+0x9c>
 800eb72:	bf00      	nop
 800eb74:	20000f74 	.word	0x20000f74
 800eb78:	20000f90 	.word	0x20000f90
 800eb7c:	00000000 	.word	0x00000000

0800eb80 <i2c_lld_init>:
/**
 * @brief   Low level I2C driver initialization.
 *
 * @notapi
 */
void i2c_lld_init(void) {
 800eb80:	b510      	push	{r4, lr}
  I2CD1.dmarx  = STM32_DMA_STREAM(STM32_I2C_I2C1_RX_DMA_STREAM);
  I2CD1.dmatx  = STM32_DMA_STREAM(STM32_I2C_I2C1_TX_DMA_STREAM);
#endif /* STM32_I2C_USE_I2C1 */

#if STM32_I2C_USE_I2C2
  i2cObjectInit(&I2CD2);
 800eb82:	4c07      	ldr	r4, [pc, #28]	; (800eba0 <i2c_lld_init+0x20>)
 800eb84:	4620      	mov	r0, r4
 800eb86:	f7fe fe33 	bl	800d7f0 <i2cObjectInit>
  I2CD2.thread = NULL;
  I2CD2.i2c    = I2C2;
  I2CD2.dmarx  = STM32_DMA_STREAM(STM32_I2C_I2C2_RX_DMA_STREAM);
 800eb8a:	4b06      	ldr	r3, [pc, #24]	; (800eba4 <i2c_lld_init+0x24>)
  I2CD2.i2c    = I2C2;
 800eb8c:	4a06      	ldr	r2, [pc, #24]	; (800eba8 <i2c_lld_init+0x28>)
 800eb8e:	6362      	str	r2, [r4, #52]	; 0x34
  I2CD2.thread = NULL;
 800eb90:	2100      	movs	r1, #0
  I2CD2.dmatx  = STM32_DMA_STREAM(STM32_I2C_I2C2_TX_DMA_STREAM);
 800eb92:	f103 023c 	add.w	r2, r3, #60	; 0x3c
  I2CD2.thread = NULL;
 800eb96:	61e1      	str	r1, [r4, #28]
  I2CD2.dmatx  = STM32_DMA_STREAM(STM32_I2C_I2C2_TX_DMA_STREAM);
 800eb98:	e9c4 320b 	strd	r3, r2, [r4, #44]	; 0x2c
  I2CD3.thread = NULL;
  I2CD3.i2c    = I2C3;
  I2CD3.dmarx  = STM32_DMA_STREAM(STM32_I2C_I2C3_RX_DMA_STREAM);
  I2CD3.dmatx  = STM32_DMA_STREAM(STM32_I2C_I2C3_TX_DMA_STREAM);
#endif /* STM32_I2C_USE_I2C3 */
}
 800eb9c:	bd10      	pop	{r4, pc}
 800eb9e:	bf00      	nop
 800eba0:	20000f74 	.word	0x20000f74
 800eba4:	08013b88 	.word	0x08013b88
 800eba8:	40005800 	.word	0x40005800
 800ebac:	00000000 	.word	0x00000000

0800ebb0 <usb_lld_init>:
/**
 * @brief   Low level USB driver initialization.
 *
 * @notapi
 */
void usb_lld_init(void) {
 800ebb0:	b510      	push	{r4, lr}

  /* Driver initialization.*/
#if STM32_USB_USE_OTG1
  usbObjectInit(&USBD1);
 800ebb2:	4c06      	ldr	r4, [pc, #24]	; (800ebcc <usb_lld_init+0x1c>)
 800ebb4:	4620      	mov	r0, r4
 800ebb6:	f7fe ff03 	bl	800d9c0 <usbObjectInit>
  USBD1.wait      = NULL;
  USBD1.otg       = OTG_FS;
 800ebba:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
  USBD1.otgparams = &fsparams;
 800ebbe:	4a04      	ldr	r2, [pc, #16]	; (800ebd0 <usb_lld_init+0x20>)
  USBD1.otg       = OTG_FS;
 800ebc0:	6523      	str	r3, [r4, #80]	; 0x50
  USBD1.wait      = NULL;
 800ebc2:	2300      	movs	r3, #0
  USBD1.otgparams = &fsparams;
 800ebc4:	6562      	str	r2, [r4, #84]	; 0x54

#if defined(_CHIBIOS_RT_)
  USBD1.tr = NULL;
 800ebc6:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
                    CH_DBG_STACK_FILL_VALUE);
  }
#endif /* CH_DBG_FILL_THREADS */
#endif /* defined(_CHIBIOS_RT_) */
#endif
}
 800ebca:	bd10      	pop	{r4, pc}
 800ebcc:	20000fb0 	.word	0x20000fb0
 800ebd0:	08013c60 	.word	0x08013c60
	...

0800ebe0 <usb_lld_reset>:
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
void usb_lld_reset(USBDriver *usbp) {
 800ebe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  unsigned i;
  stm32_otg_t *otgp = usbp->otg;
 800ebe2:	6d05      	ldr	r5, [r0, #80]	; 0x50
  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 800ebe4:	2320      	movs	r3, #32
void usb_lld_reset(USBDriver *usbp) {
 800ebe6:	4606      	mov	r6, r0
  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 800ebe8:	612b      	str	r3, [r5, #16]
  while ((otgp->GRSTCTL & GRSTCTL_TXFFLSH) != 0)
 800ebea:	692c      	ldr	r4, [r5, #16]
 800ebec:	f014 0420 	ands.w	r4, r4, #32
 800ebf0:	d1fb      	bne.n	800ebea <usb_lld_reset+0xa>
  chSysPolledDelayX(cycles);
 800ebf2:	200c      	movs	r0, #12
 800ebf4:	f7fe f8cc 	bl	800cd90 <chSysPolledDelayX>

  /* Flush the Tx FIFO.*/
  otg_txfifo_flush(usbp, 0);

  /* All endpoints in NAK mode, interrupts cleared.*/
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 800ebf8:	6d77      	ldr	r7, [r6, #84]	; 0x54
 800ebfa:	68ba      	ldr	r2, [r7, #8]
 800ebfc:	4623      	mov	r3, r4
    otgp->ie[i].DIEPCTL = DIEPCTL_SNAK;
 800ebfe:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 800ec02:	1c54      	adds	r4, r2, #1
    otgp->oe[i].DOEPCTL = DOEPCTL_SNAK;
    otgp->ie[i].DIEPINT = 0xFF;
 800ec04:	21ff      	movs	r1, #255	; 0xff
 800ec06:	eb05 1243 	add.w	r2, r5, r3, lsl #5
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 800ec0a:	3301      	adds	r3, #1
 800ec0c:	429c      	cmp	r4, r3
    otgp->ie[i].DIEPCTL = DIEPCTL_SNAK;
 800ec0e:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
    otgp->oe[i].DOEPCTL = DOEPCTL_SNAK;
 800ec12:	f8c2 0b00 	str.w	r0, [r2, #2816]	; 0xb00
    otgp->ie[i].DIEPINT = 0xFF;
 800ec16:	f8c2 1908 	str.w	r1, [r2, #2312]	; 0x908
    otgp->oe[i].DOEPINT = 0xFF;
 800ec1a:	f8c2 1b08 	str.w	r1, [r2, #2824]	; 0xb08
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 800ec1e:	d1f2      	bne.n	800ec06 <usb_lld_reset+0x26>
  usbp->pmnext = usbp->otgparams->rx_fifo_size;
 800ec20:	683b      	ldr	r3, [r7, #0]
  }

  /* Endpoint interrupts all disabled and cleared.*/
  otgp->DAINT = 0xFFFFFFFF;
  otgp->DAINTMSK = DAINTMSK_OEPM(0) | DAINTMSK_IEPM(0);
 800ec22:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  otgp->DAINT = 0xFFFFFFFF;
 800ec26:	f04f 31ff 	mov.w	r1, #4294967295
 800ec2a:	f8c5 1818 	str.w	r1, [r5, #2072]	; 0x818
  otgp->DAINTMSK = DAINTMSK_OEPM(0) | DAINTMSK_IEPM(0);
 800ec2e:	f8c5 281c 	str.w	r2, [r5, #2076]	; 0x81c
  usbp->pmnext = usbp->otgparams->rx_fifo_size;
 800ec32:	65b3      	str	r3, [r6, #88]	; 0x58

  /* Resets the FIFO memory allocator.*/
  otg_ram_reset(usbp);

  /* Receive FIFO size initialization, the address is always zero.*/
  otgp->GRXFSIZ = usbp->otgparams->rx_fifo_size;
 800ec34:	683b      	ldr	r3, [r7, #0]
 800ec36:	6d32      	ldr	r2, [r6, #80]	; 0x50
 800ec38:	626b      	str	r3, [r5, #36]	; 0x24
  otgp->GRSTCTL = GRSTCTL_RXFFLSH;
 800ec3a:	2310      	movs	r3, #16
 800ec3c:	6113      	str	r3, [r2, #16]
  while ((otgp->GRSTCTL & GRSTCTL_RXFFLSH) != 0)
 800ec3e:	6914      	ldr	r4, [r2, #16]
 800ec40:	f014 0410 	ands.w	r4, r4, #16
 800ec44:	d1fb      	bne.n	800ec3e <usb_lld_reset+0x5e>
 800ec46:	200c      	movs	r0, #12
 800ec48:	f7fe f8a2 	bl	800cd90 <chSysPolledDelayX>
  otg_rxfifo_flush(usbp);

  /* Resets the device address to zero.*/
  otgp->DCFG = (otgp->DCFG & ~DCFG_DAD_MASK) | DCFG_DAD(0);
 800ec4c:	f8d5 3800 	ldr.w	r3, [r5, #2048]	; 0x800
  otgp->DOEPMSK   = DOEPMSK_STUPM   | DOEPMSK_XFRCM;

  /* EP0 initialization, it is a special case.*/
  usbp->epc[0] = &ep0config;
  otgp->oe[0].DOEPTSIZ = 0;
  otgp->oe[0].DOEPCTL = DOEPCTL_SD0PID | DOEPCTL_USBAEP | DOEPCTL_EPTYP_CTRL |
 800ec50:	4a10      	ldr	r2, [pc, #64]	; (800ec94 <usb_lld_reset+0xb4>)
  usbp->epc[0] = &ep0config;
 800ec52:	4911      	ldr	r1, [pc, #68]	; (800ec98 <usb_lld_reset+0xb8>)
  otgp->DCFG = (otgp->DCFG & ~DCFG_DAD_MASK) | DCFG_DAD(0);
 800ec54:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800ec58:	f8c5 3800 	str.w	r3, [r5, #2048]	; 0x800
  otgp->GINTMSK  |= GINTMSK_RXFLVLM | GINTMSK_OEPM  | GINTMSK_IEPM;
 800ec5c:	69ab      	ldr	r3, [r5, #24]
 800ec5e:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 800ec62:	f043 0310 	orr.w	r3, r3, #16
 800ec66:	61ab      	str	r3, [r5, #24]
  otgp->DIEPMSK   = DIEPMSK_TOCM    | DIEPMSK_XFRCM;
 800ec68:	2309      	movs	r3, #9
 800ec6a:	f8c5 3810 	str.w	r3, [r5, #2064]	; 0x810
  otgp->DOEPMSK   = DOEPMSK_STUPM   | DOEPMSK_XFRCM;
 800ec6e:	f8c5 3814 	str.w	r3, [r5, #2068]	; 0x814
  usbp->epc[0] = &ep0config;
 800ec72:	60f1      	str	r1, [r6, #12]
  otgp->oe[0].DOEPTSIZ = 0;
 800ec74:	f8c5 4b10 	str.w	r4, [r5, #2832]	; 0xb10
  otgp->oe[0].DOEPCTL = DOEPCTL_SD0PID | DOEPCTL_USBAEP | DOEPCTL_EPTYP_CTRL |
 800ec78:	f8c5 2b00 	str.w	r2, [r5, #2816]	; 0xb00
                        DOEPCTL_MPSIZ(ep0config.out_maxsize);
  otgp->ie[0].DIEPTSIZ = 0;
 800ec7c:	f8c5 4910 	str.w	r4, [r5, #2320]	; 0x910
  otgp->ie[0].DIEPCTL = DIEPCTL_SD0PID | DIEPCTL_USBAEP | DIEPCTL_EPTYP_CTRL |
 800ec80:	f8c5 2900 	str.w	r2, [r5, #2304]	; 0x900
  next = usbp->pmnext;
 800ec84:	6db3      	ldr	r3, [r6, #88]	; 0x58
  usbp->pmnext += size;
 800ec86:	f103 0210 	add.w	r2, r3, #16
                        DIEPCTL_TXFNUM(0) | DIEPCTL_MPSIZ(ep0config.in_maxsize);
  otgp->DIEPTXF0 = DIEPTXF_INEPTXFD(ep0config.in_maxsize / 4) |
 800ec8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  usbp->pmnext += size;
 800ec8e:	65b2      	str	r2, [r6, #88]	; 0x58
  otgp->DIEPTXF0 = DIEPTXF_INEPTXFD(ep0config.in_maxsize / 4) |
 800ec90:	62ab      	str	r3, [r5, #40]	; 0x28
                   DIEPTXF_INEPTXSA(otg_ram_alloc(usbp,
                                                  ep0config.in_maxsize / 4));
}
 800ec92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ec94:	10008040 	.word	0x10008040
 800ec98:	08013c30 	.word	0x08013c30
 800ec9c:	00000000 	.word	0x00000000

0800eca0 <usb_lld_set_address>:
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
void usb_lld_set_address(USBDriver *usbp) {
  stm32_otg_t *otgp = usbp->otg;
 800eca0:	6d02      	ldr	r2, [r0, #80]	; 0x50

  otgp->DCFG = (otgp->DCFG & ~DCFG_DAD_MASK) | DCFG_DAD(usbp->address);
 800eca2:	f890 104e 	ldrb.w	r1, [r0, #78]	; 0x4e
 800eca6:	f8d2 3800 	ldr.w	r3, [r2, #2048]	; 0x800
 800ecaa:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800ecae:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 800ecb2:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
}
 800ecb6:	4770      	bx	lr
	...

0800ecc0 <usb_lld_get_status_out>:
usbepstatus_t usb_lld_get_status_out(USBDriver *usbp, usbep_t ep) {
  uint32_t ctl;

  (void)usbp;

  ctl = usbp->otg->oe[ep].DOEPCTL;
 800ecc0:	3158      	adds	r1, #88	; 0x58
 800ecc2:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800ecc4:	0149      	lsls	r1, r1, #5
 800ecc6:	585b      	ldr	r3, [r3, r1]
  if (!(ctl & DOEPCTL_USBAEP))
 800ecc8:	f413 4000 	ands.w	r0, r3, #32768	; 0x8000
 800eccc:	d004      	beq.n	800ecd8 <usb_lld_get_status_out+0x18>
    return EP_STATUS_DISABLED;
  if (ctl & DOEPCTL_STALL)
 800ecce:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
    return EP_STATUS_STALLED;
  return EP_STATUS_ACTIVE;
 800ecd2:	bf14      	ite	ne
 800ecd4:	2001      	movne	r0, #1
 800ecd6:	2002      	moveq	r0, #2
}
 800ecd8:	4770      	bx	lr
 800ecda:	bf00      	nop
 800ecdc:	0000      	movs	r0, r0
	...

0800ece0 <usb_lld_get_status_in>:
usbepstatus_t usb_lld_get_status_in(USBDriver *usbp, usbep_t ep) {
  uint32_t ctl;

  (void)usbp;

  ctl = usbp->otg->ie[ep].DIEPCTL;
 800ece0:	3148      	adds	r1, #72	; 0x48
 800ece2:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800ece4:	0149      	lsls	r1, r1, #5
 800ece6:	585b      	ldr	r3, [r3, r1]
  if (!(ctl & DIEPCTL_USBAEP))
 800ece8:	f413 4000 	ands.w	r0, r3, #32768	; 0x8000
 800ecec:	d004      	beq.n	800ecf8 <usb_lld_get_status_in+0x18>
    return EP_STATUS_DISABLED;
  if (ctl & DIEPCTL_STALL)
 800ecee:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
    return EP_STATUS_STALLED;
  return EP_STATUS_ACTIVE;
 800ecf2:	bf14      	ite	ne
 800ecf4:	2001      	movne	r0, #1
 800ecf6:	2002      	moveq	r0, #2
}
 800ecf8:	4770      	bx	lr
 800ecfa:	bf00      	nop
 800ecfc:	0000      	movs	r0, r0
	...

0800ed00 <usb_lld_read_setup>:
 *
 * @notapi
 */
void usb_lld_read_setup(USBDriver *usbp, usbep_t ep, uint8_t *buf) {

  memcpy(buf, usbp->epc[ep]->setup_buf, 8);
 800ed00:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ed04:	68cb      	ldr	r3, [r1, #12]
 800ed06:	6a1b      	ldr	r3, [r3, #32]
 800ed08:	6819      	ldr	r1, [r3, #0]
 800ed0a:	685b      	ldr	r3, [r3, #4]
 800ed0c:	6053      	str	r3, [r2, #4]
 800ed0e:	6011      	str	r1, [r2, #0]
}
 800ed10:	4770      	bx	lr
 800ed12:	bf00      	nop
	...

0800ed20 <usb_lld_prepare_receive>:
 *
 * @notapi
 */
void usb_lld_prepare_receive(USBDriver *usbp, usbep_t ep) {
  uint32_t pcnt;
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 800ed20:	eb00 0381 	add.w	r3, r0, r1, lsl #2
void usb_lld_prepare_receive(USBDriver *usbp, usbep_t ep) {
 800ed24:	b470      	push	{r4, r5, r6}
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 800ed26:	68de      	ldr	r6, [r3, #12]
 800ed28:	69b5      	ldr	r5, [r6, #24]

  /* Transfer initialization.*/
  osp->totsize = osp->rxsize;
 800ed2a:	686a      	ldr	r2, [r5, #4]
 800ed2c:	612a      	str	r2, [r5, #16]
  if ((ep == 0) && (osp->rxsize  > EP0_MAX_OUTSIZE))
 800ed2e:	b929      	cbnz	r1, 800ed3c <usb_lld_prepare_receive+0x1c>
 800ed30:	2a40      	cmp	r2, #64	; 0x40
 800ed32:	d903      	bls.n	800ed3c <usb_lld_prepare_receive+0x1c>
      osp->rxsize = EP0_MAX_OUTSIZE;
 800ed34:	2240      	movs	r2, #64	; 0x40
 800ed36:	4c09      	ldr	r4, [pc, #36]	; (800ed5c <usb_lld_prepare_receive+0x3c>)
 800ed38:	606a      	str	r2, [r5, #4]
 800ed3a:	e001      	b.n	800ed40 <usb_lld_prepare_receive+0x20>
 800ed3c:	f042 44c0 	orr.w	r4, r2, #1610612736	; 0x60000000

  pcnt = (osp->rxsize + usbp->epc[ep]->out_maxsize - 1) /
 800ed40:	8a75      	ldrh	r5, [r6, #18]
         usbp->epc[ep]->out_maxsize;
  usbp->otg->oe[ep].DOEPTSIZ = DOEPTSIZ_STUPCNT(3) | DOEPTSIZ_PKTCNT(pcnt) |
 800ed42:	6d00      	ldr	r0, [r0, #80]	; 0x50
  pcnt = (osp->rxsize + usbp->epc[ep]->out_maxsize - 1) /
 800ed44:	1e6b      	subs	r3, r5, #1
  usbp->otg->oe[ep].DOEPTSIZ = DOEPTSIZ_STUPCNT(3) | DOEPTSIZ_PKTCNT(pcnt) |
 800ed46:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  pcnt = (osp->rxsize + usbp->epc[ep]->out_maxsize - 1) /
 800ed4a:	4413      	add	r3, r2
 800ed4c:	fbb3 f3f5 	udiv	r3, r3, r5
  usbp->otg->oe[ep].DOEPTSIZ = DOEPTSIZ_STUPCNT(3) | DOEPTSIZ_PKTCNT(pcnt) |
 800ed50:	ea44 43c3 	orr.w	r3, r4, r3, lsl #19
 800ed54:	f8c1 3b10 	str.w	r3, [r1, #2832]	; 0xb10
                               DOEPTSIZ_XFRSIZ(osp->rxsize);

}
 800ed58:	bc70      	pop	{r4, r5, r6}
 800ed5a:	4770      	bx	lr
 800ed5c:	60000040 	.word	0x60000040

0800ed60 <otg_epout_handler.constprop.7>:
static void otg_epout_handler(USBDriver *usbp, usbep_t ep) {
 800ed60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  stm32_otg_t *otgp = usbp->otg;
 800ed64:	4e24      	ldr	r6, [pc, #144]	; (800edf8 <otg_epout_handler.constprop.7+0x98>)
 800ed66:	6d37      	ldr	r7, [r6, #80]	; 0x50
  uint32_t epint = otgp->oe[ep].DOEPINT;
 800ed68:	eb07 1340 	add.w	r3, r7, r0, lsl #5
static void otg_epout_handler(USBDriver *usbp, usbep_t ep) {
 800ed6c:	4605      	mov	r5, r0
  uint32_t epint = otgp->oe[ep].DOEPINT;
 800ed6e:	f8d3 4b08 	ldr.w	r4, [r3, #2824]	; 0xb08
  otgp->oe[ep].DOEPINT = epint;
 800ed72:	f8c3 4b08 	str.w	r4, [r3, #2824]	; 0xb08
  if ((epint & DOEPINT_STUP) && (otgp->DOEPMSK & DOEPMSK_STUPM)) {
 800ed76:	0720      	lsls	r0, r4, #28
 800ed78:	d50a      	bpl.n	800ed90 <otg_epout_handler.constprop.7+0x30>
 800ed7a:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 800ed7e:	0719      	lsls	r1, r3, #28
 800ed80:	d506      	bpl.n	800ed90 <otg_epout_handler.constprop.7+0x30>
    _usb_isr_invoke_setup_cb(usbp, ep);
 800ed82:	eb06 0385 	add.w	r3, r6, r5, lsl #2
 800ed86:	4629      	mov	r1, r5
 800ed88:	68db      	ldr	r3, [r3, #12]
 800ed8a:	4630      	mov	r0, r6
 800ed8c:	685b      	ldr	r3, [r3, #4]
 800ed8e:	4798      	blx	r3
  if ((epint & DOEPINT_XFRC) && (otgp->DOEPMSK & DOEPMSK_XFRCM)) {
 800ed90:	07e2      	lsls	r2, r4, #31
 800ed92:	d52e      	bpl.n	800edf2 <otg_epout_handler.constprop.7+0x92>
 800ed94:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 800ed98:	07db      	lsls	r3, r3, #31
 800ed9a:	d52a      	bpl.n	800edf2 <otg_epout_handler.constprop.7+0x92>
    USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 800ed9c:	eb06 0385 	add.w	r3, r6, r5, lsl #2
 800eda0:	68d9      	ldr	r1, [r3, #12]
 800eda2:	698b      	ldr	r3, [r1, #24]
    if (osp->rxsize < osp->totsize) {
 800eda4:	6858      	ldr	r0, [r3, #4]
 800eda6:	691a      	ldr	r2, [r3, #16]
 800eda8:	4290      	cmp	r0, r2
 800edaa:	d30c      	bcc.n	800edc6 <otg_epout_handler.constprop.7+0x66>
      _usb_isr_invoke_out_cb(usbp, ep);
 800edac:	8973      	ldrh	r3, [r6, #10]
 800edae:	68cc      	ldr	r4, [r1, #12]
 800edb0:	4811      	ldr	r0, [pc, #68]	; (800edf8 <otg_epout_handler.constprop.7+0x98>)
 800edb2:	2201      	movs	r2, #1
 800edb4:	40aa      	lsls	r2, r5
 800edb6:	ea23 0302 	bic.w	r3, r3, r2
 800edba:	8173      	strh	r3, [r6, #10]
 800edbc:	4629      	mov	r1, r5
 800edbe:	4623      	mov	r3, r4
}
 800edc0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      _usb_isr_invoke_out_cb(usbp, ep);
 800edc4:	4718      	bx	r3
      osp->rxsize = osp->totsize - osp->rxsize;
 800edc6:	1a12      	subs	r2, r2, r0
      osp->rxcnt  = 0;
 800edc8:	2400      	movs	r4, #0
 800edca:	e9c3 2401 	strd	r2, r4, [r3, #4]
      usb_lld_prepare_receive(usbp, ep);
 800edce:	4629      	mov	r1, r5
 800edd0:	4809      	ldr	r0, [pc, #36]	; (800edf8 <otg_epout_handler.constprop.7+0x98>)
 800edd2:	f7ff ffa5 	bl	800ed20 <usb_lld_prepare_receive>
 800edd6:	2320      	movs	r3, #32
 800edd8:	f383 8811 	msr	BASEPRI, r3
 800eddc:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800edde:	eb03 1545 	add.w	r5, r3, r5, lsl #5
 *
 * @notapi
 */
void usb_lld_start_out(USBDriver *usbp, usbep_t ep) {

  usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_CNAK;
 800ede2:	f8d5 3b00 	ldr.w	r3, [r5, #2816]	; 0xb00
 800ede6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800edea:	f8c5 3b00 	str.w	r3, [r5, #2816]	; 0xb00
 800edee:	f384 8811 	msr	BASEPRI, r4
}
 800edf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800edf6:	bf00      	nop
 800edf8:	20000fb0 	.word	0x20000fb0
 800edfc:	00000000 	.word	0x00000000

0800ee00 <usb_lld_prepare_transmit>:
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 800ee00:	eb00 0381 	add.w	r3, r0, r1, lsl #2
void usb_lld_prepare_transmit(USBDriver *usbp, usbep_t ep) {
 800ee04:	b410      	push	{r4}
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 800ee06:	68dc      	ldr	r4, [r3, #12]
 800ee08:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800ee0a:	6960      	ldr	r0, [r4, #20]
  isp->totsize = isp->txsize;
 800ee0c:	6843      	ldr	r3, [r0, #4]
 800ee0e:	6103      	str	r3, [r0, #16]
  if (isp->txsize == 0) {
 800ee10:	b19b      	cbz	r3, 800ee3a <usb_lld_prepare_transmit+0x3a>
    if ((ep == 0) && (isp->txsize  > EP0_MAX_INSIZE))
 800ee12:	b169      	cbz	r1, 800ee30 <usb_lld_prepare_transmit+0x30>
    uint32_t pcnt = (isp->txsize + usbp->epc[ep]->in_maxsize - 1) /
 800ee14:	8a20      	ldrh	r0, [r4, #16]
}
 800ee16:	f85d 4b04 	ldr.w	r4, [sp], #4
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_PKTCNT(pcnt) |
 800ee1a:	eb02 1241 	add.w	r2, r2, r1, lsl #5
    uint32_t pcnt = (isp->txsize + usbp->epc[ep]->in_maxsize - 1) /
 800ee1e:	1e41      	subs	r1, r0, #1
 800ee20:	4419      	add	r1, r3
 800ee22:	fbb1 f1f0 	udiv	r1, r1, r0
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_PKTCNT(pcnt) |
 800ee26:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
 800ee2a:	f8c2 3910 	str.w	r3, [r2, #2320]	; 0x910
}
 800ee2e:	4770      	bx	lr
    if ((ep == 0) && (isp->txsize  > EP0_MAX_INSIZE))
 800ee30:	2b40      	cmp	r3, #64	; 0x40
      isp->txsize = EP0_MAX_INSIZE;
 800ee32:	bf84      	itt	hi
 800ee34:	2340      	movhi	r3, #64	; 0x40
 800ee36:	6043      	strhi	r3, [r0, #4]
 800ee38:	e7ec      	b.n	800ee14 <usb_lld_prepare_transmit+0x14>
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_PKTCNT(1) | DIEPTSIZ_XFRSIZ(0);
 800ee3a:	eb02 1241 	add.w	r2, r2, r1, lsl #5
 800ee3e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ee42:	f8c2 3910 	str.w	r3, [r2, #2320]	; 0x910
}
 800ee46:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ee4a:	4770      	bx	lr
 800ee4c:	0000      	movs	r0, r0
	...

0800ee50 <otg_epin_handler.constprop.8>:
static void otg_epin_handler(USBDriver *usbp, usbep_t ep) {
 800ee50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  stm32_otg_t *otgp = usbp->otg;
 800ee54:	4e30      	ldr	r6, [pc, #192]	; (800ef18 <otg_epin_handler.constprop.8+0xc8>)
 800ee56:	6d35      	ldr	r5, [r6, #80]	; 0x50
  uint32_t epint = otgp->ie[ep].DIEPINT;
 800ee58:	eb05 1340 	add.w	r3, r5, r0, lsl #5
static void otg_epin_handler(USBDriver *usbp, usbep_t ep) {
 800ee5c:	4607      	mov	r7, r0
  uint32_t epint = otgp->ie[ep].DIEPINT;
 800ee5e:	f8d3 4908 	ldr.w	r4, [r3, #2312]	; 0x908
  otgp->ie[ep].DIEPINT = epint;
 800ee62:	f8c3 4908 	str.w	r4, [r3, #2312]	; 0x908
  if ((epint & DIEPINT_XFRC) && (otgp->DIEPMSK & DIEPMSK_XFRCM)) {
 800ee66:	07e1      	lsls	r1, r4, #31
 800ee68:	d516      	bpl.n	800ee98 <otg_epin_handler.constprop.8+0x48>
 800ee6a:	f8d5 3810 	ldr.w	r3, [r5, #2064]	; 0x810
 800ee6e:	07da      	lsls	r2, r3, #31
 800ee70:	d512      	bpl.n	800ee98 <otg_epin_handler.constprop.8+0x48>
    USBInEndpointState *isp = usbp->epc[ep]->in_state;
 800ee72:	eb06 0380 	add.w	r3, r6, r0, lsl #2
 800ee76:	68d9      	ldr	r1, [r3, #12]
 800ee78:	694b      	ldr	r3, [r1, #20]
    if (isp->txsize < isp->totsize) {
 800ee7a:	6858      	ldr	r0, [r3, #4]
 800ee7c:	691a      	ldr	r2, [r3, #16]
 800ee7e:	4290      	cmp	r0, r2
 800ee80:	d32a      	bcc.n	800eed8 <otg_epin_handler.constprop.8+0x88>
      _usb_isr_invoke_in_cb(usbp, ep);
 800ee82:	8933      	ldrh	r3, [r6, #8]
 800ee84:	f8d1 8008 	ldr.w	r8, [r1, #8]
 800ee88:	2201      	movs	r2, #1
 800ee8a:	40ba      	lsls	r2, r7
 800ee8c:	ea23 0302 	bic.w	r3, r3, r2
 800ee90:	8133      	strh	r3, [r6, #8]
 800ee92:	4639      	mov	r1, r7
 800ee94:	4630      	mov	r0, r6
 800ee96:	47c0      	blx	r8
  if ((epint & DIEPINT_TXFE) &&
 800ee98:	0623      	lsls	r3, r4, #24
 800ee9a:	d506      	bpl.n	800eeaa <otg_epin_handler.constprop.8+0x5a>
      (otgp->DIEPEMPMSK & DIEPEMPMSK_INEPTXFEM(ep))) {
 800ee9c:	2301      	movs	r3, #1
 800ee9e:	f8d5 2834 	ldr.w	r2, [r5, #2100]	; 0x834
 800eea2:	fa03 f707 	lsl.w	r7, r3, r7
  if ((epint & DIEPINT_TXFE) &&
 800eea6:	4217      	tst	r7, r2
 800eea8:	d101      	bne.n	800eeae <otg_epin_handler.constprop.8+0x5e>
}
 800eeaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eeae:	2320      	movs	r3, #32
 800eeb0:	f383 8811 	msr	BASEPRI, r3
    otgp->DIEPEMPMSK &= ~(1 << ep);
 800eeb4:	f8d5 2834 	ldr.w	r2, [r5, #2100]	; 0x834
    usbp->txpending |= (1 << ep);
 800eeb8:	6df3      	ldr	r3, [r6, #92]	; 0x5c
  chThdResumeI(trp, msg);
 800eeba:	4818      	ldr	r0, [pc, #96]	; (800ef1c <otg_epin_handler.constprop.8+0xcc>)
    otgp->DIEPEMPMSK &= ~(1 << ep);
 800eebc:	ea22 0207 	bic.w	r2, r2, r7
 800eec0:	f8c5 2834 	str.w	r2, [r5, #2100]	; 0x834
    usbp->txpending |= (1 << ep);
 800eec4:	431f      	orrs	r7, r3
 800eec6:	2100      	movs	r1, #0
 800eec8:	65f7      	str	r7, [r6, #92]	; 0x5c
 800eeca:	f7fe f981 	bl	800d1d0 <chThdResumeI>
 800eece:	2300      	movs	r3, #0
 800eed0:	f383 8811 	msr	BASEPRI, r3
}
 800eed4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      isp->txsize = isp->totsize - isp->txsize;
 800eed8:	1a12      	subs	r2, r2, r0
      isp->txcnt  = 0;
 800eeda:	f04f 0800 	mov.w	r8, #0
 800eede:	e9c3 2801 	strd	r2, r8, [r3, #4]
      usb_lld_prepare_transmit(usbp, ep);
 800eee2:	4639      	mov	r1, r7
 800eee4:	4630      	mov	r0, r6
 800eee6:	f7ff ff8b 	bl	800ee00 <usb_lld_prepare_transmit>
 800eeea:	2320      	movs	r3, #32
 800eeec:	f383 8811 	msr	BASEPRI, r3
 *
 * @notapi
 */
void usb_lld_start_in(USBDriver *usbp, usbep_t ep) {

  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_EPENA | DIEPCTL_CNAK;
 800eef0:	6d32      	ldr	r2, [r6, #80]	; 0x50
 800eef2:	eb02 1047 	add.w	r0, r2, r7, lsl #5
  usbp->otg->DIEPEMPMSK |= DIEPEMPMSK_INEPTXFEM(ep);
 800eef6:	2301      	movs	r3, #1
  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_EPENA | DIEPCTL_CNAK;
 800eef8:	f8d0 1900 	ldr.w	r1, [r0, #2304]	; 0x900
 800eefc:	f041 4104 	orr.w	r1, r1, #2214592512	; 0x84000000
 800ef00:	f8c0 1900 	str.w	r1, [r0, #2304]	; 0x900
  usbp->otg->DIEPEMPMSK |= DIEPEMPMSK_INEPTXFEM(ep);
 800ef04:	f8d2 1834 	ldr.w	r1, [r2, #2100]	; 0x834
 800ef08:	40bb      	lsls	r3, r7
 800ef0a:	430b      	orrs	r3, r1
 800ef0c:	f8c2 3834 	str.w	r3, [r2, #2100]	; 0x834
 800ef10:	f388 8811 	msr	BASEPRI, r8
 800ef14:	e7c0      	b.n	800ee98 <otg_epin_handler.constprop.8+0x48>
 800ef16:	bf00      	nop
 800ef18:	20000fb0 	.word	0x20000fb0
 800ef1c:	20001010 	.word	0x20001010

0800ef20 <Vector14C>:
OSAL_IRQ_HANDLER(STM32_OTG1_HANDLER) {
 800ef20:	b570      	push	{r4, r5, r6, lr}
  stm32_otg_t *otgp = usbp->otg;
 800ef22:	4d3a      	ldr	r5, [pc, #232]	; (800f00c <Vector14C+0xec>)
 800ef24:	6d2e      	ldr	r6, [r5, #80]	; 0x50
  sts  = otgp->GINTSTS;
 800ef26:	6974      	ldr	r4, [r6, #20]
  sts &= otgp->GINTMSK;
 800ef28:	69b3      	ldr	r3, [r6, #24]
 800ef2a:	401c      	ands	r4, r3
  if (sts & GINTSTS_USBRST) {
 800ef2c:	04e1      	lsls	r1, r4, #19
  otgp->GINTSTS = sts;
 800ef2e:	6174      	str	r4, [r6, #20]
  if (sts & GINTSTS_USBRST) {
 800ef30:	d426      	bmi.n	800ef80 <Vector14C+0x60>
  if (sts & GINTSTS_ENUMDNE) {
 800ef32:	04a2      	lsls	r2, r4, #18
    (void)otgp->DSTS;
 800ef34:	bf48      	it	mi
 800ef36:	f8d6 3808 	ldrmi.w	r3, [r6, #2056]	; 0x808
  if (sts & GINTSTS_SOF) {
 800ef3a:	0723      	lsls	r3, r4, #28
 800ef3c:	d504      	bpl.n	800ef48 <Vector14C+0x28>
    _usb_isr_invoke_sof_cb(usbp);
 800ef3e:	686b      	ldr	r3, [r5, #4]
 800ef40:	68db      	ldr	r3, [r3, #12]
 800ef42:	b10b      	cbz	r3, 800ef48 <Vector14C+0x28>
 800ef44:	4831      	ldr	r0, [pc, #196]	; (800f00c <Vector14C+0xec>)
 800ef46:	4798      	blx	r3
  if (sts & GINTSTS_RXFLVL) {
 800ef48:	06e5      	lsls	r5, r4, #27
 800ef4a:	d424      	bmi.n	800ef96 <Vector14C+0x76>
  if (sts & GINTSTS_IEPINT) {
 800ef4c:	0360      	lsls	r0, r4, #13
  src = otgp->DAINT;
 800ef4e:	f8d6 5818 	ldr.w	r5, [r6, #2072]	; 0x818
  if (sts & GINTSTS_IEPINT) {
 800ef52:	d507      	bpl.n	800ef64 <Vector14C+0x44>
    if (src & (1 << 0))
 800ef54:	07e9      	lsls	r1, r5, #31
 800ef56:	d44f      	bmi.n	800eff8 <Vector14C+0xd8>
    if (src & (1 << 1))
 800ef58:	07aa      	lsls	r2, r5, #30
 800ef5a:	d442      	bmi.n	800efe2 <Vector14C+0xc2>
    if (src & (1 << 2))
 800ef5c:	076b      	lsls	r3, r5, #29
 800ef5e:	d445      	bmi.n	800efec <Vector14C+0xcc>
    if (src & (1 << 3))
 800ef60:	072e      	lsls	r6, r5, #28
 800ef62:	d44f      	bmi.n	800f004 <Vector14C+0xe4>
  if (sts & GINTSTS_OEPINT) {
 800ef64:	0324      	lsls	r4, r4, #12
 800ef66:	d507      	bpl.n	800ef78 <Vector14C+0x58>
    if (src & (1 << 16))
 800ef68:	03e8      	lsls	r0, r5, #15
 800ef6a:	d42a      	bmi.n	800efc2 <Vector14C+0xa2>
    if (src & (1 << 17))
 800ef6c:	03a9      	lsls	r1, r5, #14
 800ef6e:	d42d      	bmi.n	800efcc <Vector14C+0xac>
    if (src & (1 << 18))
 800ef70:	036a      	lsls	r2, r5, #13
 800ef72:	d430      	bmi.n	800efd6 <Vector14C+0xb6>
    if (src & (1 << 19))
 800ef74:	032b      	lsls	r3, r5, #12
 800ef76:	d41d      	bmi.n	800efb4 <Vector14C+0x94>
}
 800ef78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  OSAL_IRQ_EPILOGUE();
 800ef7c:	f7fe bbb8 	b.w	800d6f0 <_port_irq_epilogue>
    _usb_reset(usbp);
 800ef80:	4628      	mov	r0, r5
 800ef82:	f7fe fd2d 	bl	800d9e0 <_usb_reset>
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_RESET);
 800ef86:	686b      	ldr	r3, [r5, #4]
 800ef88:	681b      	ldr	r3, [r3, #0]
 800ef8a:	2b00      	cmp	r3, #0
 800ef8c:	d0d1      	beq.n	800ef32 <Vector14C+0x12>
 800ef8e:	2100      	movs	r1, #0
 800ef90:	4628      	mov	r0, r5
 800ef92:	4798      	blx	r3
 800ef94:	e7cd      	b.n	800ef32 <Vector14C+0x12>
 800ef96:	2320      	movs	r3, #32
 800ef98:	f383 8811 	msr	BASEPRI, r3
    otgp->GINTMSK &= ~GINTMSK_RXFLVLM;
 800ef9c:	69b3      	ldr	r3, [r6, #24]
 800ef9e:	481c      	ldr	r0, [pc, #112]	; (800f010 <Vector14C+0xf0>)
 800efa0:	f023 0310 	bic.w	r3, r3, #16
 800efa4:	61b3      	str	r3, [r6, #24]
 800efa6:	2100      	movs	r1, #0
 800efa8:	f7fe f912 	bl	800d1d0 <chThdResumeI>
 800efac:	2300      	movs	r3, #0
 800efae:	f383 8811 	msr	BASEPRI, r3
 800efb2:	e7cb      	b.n	800ef4c <Vector14C+0x2c>
      otg_epout_handler(usbp, 3);
 800efb4:	2003      	movs	r0, #3
 800efb6:	f7ff fed3 	bl	800ed60 <otg_epout_handler.constprop.7>
}
 800efba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  OSAL_IRQ_EPILOGUE();
 800efbe:	f7fe bb97 	b.w	800d6f0 <_port_irq_epilogue>
      otg_epout_handler(usbp, 0);
 800efc2:	2000      	movs	r0, #0
 800efc4:	f7ff fecc 	bl	800ed60 <otg_epout_handler.constprop.7>
    if (src & (1 << 17))
 800efc8:	03a9      	lsls	r1, r5, #14
 800efca:	d5d1      	bpl.n	800ef70 <Vector14C+0x50>
      otg_epout_handler(usbp, 1);
 800efcc:	2001      	movs	r0, #1
 800efce:	f7ff fec7 	bl	800ed60 <otg_epout_handler.constprop.7>
    if (src & (1 << 18))
 800efd2:	036a      	lsls	r2, r5, #13
 800efd4:	d5ce      	bpl.n	800ef74 <Vector14C+0x54>
      otg_epout_handler(usbp, 2);
 800efd6:	2002      	movs	r0, #2
 800efd8:	f7ff fec2 	bl	800ed60 <otg_epout_handler.constprop.7>
    if (src & (1 << 19))
 800efdc:	032b      	lsls	r3, r5, #12
 800efde:	d5cb      	bpl.n	800ef78 <Vector14C+0x58>
 800efe0:	e7e8      	b.n	800efb4 <Vector14C+0x94>
      otg_epin_handler(usbp, 1);
 800efe2:	2001      	movs	r0, #1
 800efe4:	f7ff ff34 	bl	800ee50 <otg_epin_handler.constprop.8>
    if (src & (1 << 2))
 800efe8:	076b      	lsls	r3, r5, #29
 800efea:	d5b9      	bpl.n	800ef60 <Vector14C+0x40>
      otg_epin_handler(usbp, 2);
 800efec:	2002      	movs	r0, #2
 800efee:	f7ff ff2f 	bl	800ee50 <otg_epin_handler.constprop.8>
    if (src & (1 << 3))
 800eff2:	072e      	lsls	r6, r5, #28
 800eff4:	d5b6      	bpl.n	800ef64 <Vector14C+0x44>
 800eff6:	e005      	b.n	800f004 <Vector14C+0xe4>
      otg_epin_handler(usbp, 0);
 800eff8:	2000      	movs	r0, #0
 800effa:	f7ff ff29 	bl	800ee50 <otg_epin_handler.constprop.8>
    if (src & (1 << 1))
 800effe:	07aa      	lsls	r2, r5, #30
 800f000:	d5ac      	bpl.n	800ef5c <Vector14C+0x3c>
 800f002:	e7ee      	b.n	800efe2 <Vector14C+0xc2>
      otg_epin_handler(usbp, 3);
 800f004:	2003      	movs	r0, #3
 800f006:	f7ff ff23 	bl	800ee50 <otg_epin_handler.constprop.8>
 800f00a:	e7ab      	b.n	800ef64 <Vector14C+0x44>
 800f00c:	20000fb0 	.word	0x20000fb0
 800f010:	20001010 	.word	0x20001010
	...

0800f020 <usb_lld_start_out>:
void usb_lld_start_out(USBDriver *usbp, usbep_t ep) {
 800f020:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800f022:	eb03 1141 	add.w	r1, r3, r1, lsl #5
  usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_CNAK;
 800f026:	f8d1 3b00 	ldr.w	r3, [r1, #2816]	; 0xb00
 800f02a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800f02e:	f8c1 3b00 	str.w	r3, [r1, #2816]	; 0xb00
}
 800f032:	4770      	bx	lr
	...

0800f040 <usb_lld_start_in>:
  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_EPENA | DIEPCTL_CNAK;
 800f040:	6d02      	ldr	r2, [r0, #80]	; 0x50
void usb_lld_start_in(USBDriver *usbp, usbep_t ep) {
 800f042:	b410      	push	{r4}
 800f044:	eb02 1441 	add.w	r4, r2, r1, lsl #5
  usbp->otg->DIEPEMPMSK |= DIEPEMPMSK_INEPTXFEM(ep);
 800f048:	2301      	movs	r3, #1
  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_EPENA | DIEPCTL_CNAK;
 800f04a:	f8d4 0900 	ldr.w	r0, [r4, #2304]	; 0x900
 800f04e:	f040 4004 	orr.w	r0, r0, #2214592512	; 0x84000000
 800f052:	f8c4 0900 	str.w	r0, [r4, #2304]	; 0x900
  usbp->otg->DIEPEMPMSK |= DIEPEMPMSK_INEPTXFEM(ep);
 800f056:	f8d2 0834 	ldr.w	r0, [r2, #2100]	; 0x834
}
 800f05a:	f85d 4b04 	ldr.w	r4, [sp], #4
  usbp->otg->DIEPEMPMSK |= DIEPEMPMSK_INEPTXFEM(ep);
 800f05e:	fa03 f101 	lsl.w	r1, r3, r1
 800f062:	4301      	orrs	r1, r0
 800f064:	f8c2 1834 	str.w	r1, [r2, #2100]	; 0x834
}
 800f068:	4770      	bx	lr
 800f06a:	bf00      	nop
 800f06c:	0000      	movs	r0, r0
	...

0800f070 <usb_lld_stall_out>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_stall_out(USBDriver *usbp, usbep_t ep) {
 800f070:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800f072:	eb03 1141 	add.w	r1, r3, r1, lsl #5

  usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_STALL;
 800f076:	f8d1 3b00 	ldr.w	r3, [r1, #2816]	; 0xb00
 800f07a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f07e:	f8c1 3b00 	str.w	r3, [r1, #2816]	; 0xb00
}
 800f082:	4770      	bx	lr
	...

0800f090 <usb_lld_stall_in>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_stall_in(USBDriver *usbp, usbep_t ep) {
 800f090:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800f092:	eb03 1141 	add.w	r1, r3, r1, lsl #5

  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_STALL;
 800f096:	f8d1 3900 	ldr.w	r3, [r1, #2304]	; 0x900
 800f09a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f09e:	f8c1 3900 	str.w	r3, [r1, #2304]	; 0x900
}
 800f0a2:	4770      	bx	lr
	...

0800f0b0 <usb_lld_clear_out>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_clear_out(USBDriver *usbp, usbep_t ep) {
 800f0b0:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800f0b2:	eb03 1141 	add.w	r1, r3, r1, lsl #5

  usbp->otg->oe[ep].DOEPCTL &= ~DOEPCTL_STALL;
 800f0b6:	f8d1 3b00 	ldr.w	r3, [r1, #2816]	; 0xb00
 800f0ba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f0be:	f8c1 3b00 	str.w	r3, [r1, #2816]	; 0xb00
}
 800f0c2:	4770      	bx	lr
	...

0800f0d0 <usb_lld_clear_in>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_clear_in(USBDriver *usbp, usbep_t ep) {
 800f0d0:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800f0d2:	eb03 1141 	add.w	r1, r3, r1, lsl #5

  usbp->otg->ie[ep].DIEPCTL &= ~DIEPCTL_STALL;
 800f0d6:	f8d1 3900 	ldr.w	r3, [r1, #2304]	; 0x900
 800f0da:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f0de:	f8c1 3900 	str.w	r3, [r1, #2304]	; 0x900
}
 800f0e2:	4770      	bx	lr
	...

0800f0f0 <spi_lld_init>:
/**
 * @brief   Low level SPI driver initialization.
 *
 * @notapi
 */
void spi_lld_init(void) {
 800f0f0:	b510      	push	{r4, lr}

  dummytx = 0xFFFF;

#if STM32_SPI_USE_SPI1
  spiObjectInit(&SPID1);
 800f0f2:	4c0a      	ldr	r4, [pc, #40]	; (800f11c <spi_lld_init+0x2c>)
  dummytx = 0xFFFF;
 800f0f4:	4b0a      	ldr	r3, [pc, #40]	; (800f120 <spi_lld_init+0x30>)
 800f0f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
  spiObjectInit(&SPID1);
 800f0fa:	4620      	mov	r0, r4
  dummytx = 0xFFFF;
 800f0fc:	801a      	strh	r2, [r3, #0]
  spiObjectInit(&SPID1);
 800f0fe:	f7fe fc37 	bl	800d970 <spiObjectInit>
  SPID1.spi       = SPI1;
  SPID1.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI1_RX_DMA_STREAM);
 800f102:	4b08      	ldr	r3, [pc, #32]	; (800f124 <spi_lld_init+0x34>)
  SPID1.spi       = SPI1;
 800f104:	4808      	ldr	r0, [pc, #32]	; (800f128 <spi_lld_init+0x38>)
  SPID1.dmatx     = STM32_DMA_STREAM(STM32_SPI_SPI1_TX_DMA_STREAM);
  SPID1.rxdmamode = STM32_DMA_CR_CHSEL(SPI1_RX_DMA_CHANNEL) |
 800f106:	4909      	ldr	r1, [pc, #36]	; (800f12c <spi_lld_init+0x3c>)
                    STM32_DMA_CR_PL(STM32_SPI_SPI1_DMA_PRIORITY) |
                    STM32_DMA_CR_DIR_P2M |
                    STM32_DMA_CR_TCIE |
                    STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE;
  SPID1.txdmamode = STM32_DMA_CR_CHSEL(SPI1_TX_DMA_CHANNEL) |
 800f108:	4a09      	ldr	r2, [pc, #36]	; (800f130 <spi_lld_init+0x40>)
  SPID1.spi       = SPI1;
 800f10a:	61e0      	str	r0, [r4, #28]
  SPID1.dmatx     = STM32_DMA_STREAM(STM32_SPI_SPI1_TX_DMA_STREAM);
 800f10c:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800f110:	e9c4 3008 	strd	r3, r0, [r4, #32]
  SPID1.txdmamode = STM32_DMA_CR_CHSEL(SPI1_TX_DMA_CHANNEL) |
 800f114:	e9c4 120a 	strd	r1, r2, [r4, #40]	; 0x28
                    STM32_DMA_CR_PL(STM32_SPI_SPI6_DMA_PRIORITY) |
                    STM32_DMA_CR_DIR_M2P |
                    STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE;
#endif
}
 800f118:	bd10      	pop	{r4, pc}
 800f11a:	bf00      	nop
 800f11c:	2000124c 	.word	0x2000124c
 800f120:	2000127c 	.word	0x2000127c
 800f124:	08013bd0 	.word	0x08013bd0
 800f128:	40013000 	.word	0x40013000
 800f12c:	06010016 	.word	0x06010016
 800f130:	06010046 	.word	0x06010046
	...

0800f140 <VectorB4>:
 *          associated callback pointer is not equal to @p NULL in order to not
 *          perform an extra check in a potentially critical interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM3_HANDLER) {
 800f140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  sr  = icup->tim->SR;
 800f142:	4d26      	ldr	r5, [pc, #152]	; (800f1dc <VectorB4+0x9c>)
 800f144:	68eb      	ldr	r3, [r5, #12]
  if (icup->config->channel == ICU_CHANNEL_1) {
 800f146:	6869      	ldr	r1, [r5, #4]
  sr  = icup->tim->SR;
 800f148:	691c      	ldr	r4, [r3, #16]
  sr &= icup->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
 800f14a:	68da      	ldr	r2, [r3, #12]
  if (icup->config->channel == ICU_CHANNEL_1) {
 800f14c:	7d08      	ldrb	r0, [r1, #20]
 800f14e:	4014      	ands	r4, r2
  sr &= icup->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
 800f150:	b2e2      	uxtb	r2, r4
  icup->tim->SR = ~sr;
 800f152:	43d2      	mvns	r2, r2
 800f154:	611a      	str	r2, [r3, #16]
 800f156:	f004 0602 	and.w	r6, r4, #2
  if (icup->config->channel == ICU_CHANNEL_1) {
 800f15a:	b988      	cbnz	r0, 800f180 <VectorB4+0x40>
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
 800f15c:	0762      	lsls	r2, r4, #29
 800f15e:	d530      	bpl.n	800f1c2 <VectorB4+0x82>
      _icu_isr_invoke_width_cb(icup);
 800f160:	782b      	ldrb	r3, [r5, #0]
 800f162:	2b04      	cmp	r3, #4
 800f164:	d029      	beq.n	800f1ba <VectorB4+0x7a>
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
 800f166:	b99e      	cbnz	r6, 800f190 <VectorB4+0x50>
  if ((sr & STM32_TIM_SR_UIF) != 0)
 800f168:	07e3      	lsls	r3, r4, #31
 800f16a:	d505      	bpl.n	800f178 <VectorB4+0x38>
    _icu_isr_invoke_overflow_cb(icup);
 800f16c:	686b      	ldr	r3, [r5, #4]
 800f16e:	481b      	ldr	r0, [pc, #108]	; (800f1dc <VectorB4+0x9c>)
 800f170:	691b      	ldr	r3, [r3, #16]
 800f172:	4798      	blx	r3
 800f174:	2303      	movs	r3, #3
 800f176:	702b      	strb	r3, [r5, #0]
  OSAL_IRQ_PROLOGUE();

  icu_lld_serve_interrupt(&ICUD3);

  OSAL_IRQ_EPILOGUE();
}
 800f178:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_EPILOGUE();
 800f17c:	f7fe bab8 	b.w	800d6f0 <_port_irq_epilogue>
 800f180:	f004 0704 	and.w	r7, r4, #4
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
 800f184:	b15e      	cbz	r6, 800f19e <VectorB4+0x5e>
      _icu_isr_invoke_width_cb(icup);
 800f186:	782b      	ldrb	r3, [r5, #0]
 800f188:	2b04      	cmp	r3, #4
 800f18a:	d004      	beq.n	800f196 <VectorB4+0x56>
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
 800f18c:	2f00      	cmp	r7, #0
 800f18e:	d0eb      	beq.n	800f168 <VectorB4+0x28>
      _icu_isr_invoke_period_cb(icup);
 800f190:	2304      	movs	r3, #4
 800f192:	702b      	strb	r3, [r5, #0]
 800f194:	e7e8      	b.n	800f168 <VectorB4+0x28>
      _icu_isr_invoke_width_cb(icup);
 800f196:	688b      	ldr	r3, [r1, #8]
 800f198:	b1e3      	cbz	r3, 800f1d4 <VectorB4+0x94>
 800f19a:	4628      	mov	r0, r5
 800f19c:	4798      	blx	r3
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
 800f19e:	2f00      	cmp	r7, #0
 800f1a0:	d0e2      	beq.n	800f168 <VectorB4+0x28>
      _icu_isr_invoke_period_cb(icup);
 800f1a2:	782b      	ldrb	r3, [r5, #0]
 800f1a4:	2b04      	cmp	r3, #4
 800f1a6:	d1f3      	bne.n	800f190 <VectorB4+0x50>
 800f1a8:	6869      	ldr	r1, [r5, #4]
 800f1aa:	68cb      	ldr	r3, [r1, #12]
 800f1ac:	2b00      	cmp	r3, #0
 800f1ae:	d0ef      	beq.n	800f190 <VectorB4+0x50>
 800f1b0:	480a      	ldr	r0, [pc, #40]	; (800f1dc <VectorB4+0x9c>)
 800f1b2:	4798      	blx	r3
 800f1b4:	2304      	movs	r3, #4
 800f1b6:	702b      	strb	r3, [r5, #0]
 800f1b8:	e7d6      	b.n	800f168 <VectorB4+0x28>
      _icu_isr_invoke_width_cb(icup);
 800f1ba:	688b      	ldr	r3, [r1, #8]
 800f1bc:	b13b      	cbz	r3, 800f1ce <VectorB4+0x8e>
 800f1be:	4628      	mov	r0, r5
 800f1c0:	4798      	blx	r3
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
 800f1c2:	2e00      	cmp	r6, #0
 800f1c4:	d0d0      	beq.n	800f168 <VectorB4+0x28>
      _icu_isr_invoke_period_cb(icup);
 800f1c6:	782b      	ldrb	r3, [r5, #0]
 800f1c8:	2b04      	cmp	r3, #4
 800f1ca:	d1e1      	bne.n	800f190 <VectorB4+0x50>
 800f1cc:	e7ec      	b.n	800f1a8 <VectorB4+0x68>
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
 800f1ce:	2e00      	cmp	r6, #0
 800f1d0:	d0ca      	beq.n	800f168 <VectorB4+0x28>
 800f1d2:	e7ea      	b.n	800f1aa <VectorB4+0x6a>
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
 800f1d4:	2f00      	cmp	r7, #0
 800f1d6:	d0c7      	beq.n	800f168 <VectorB4+0x28>
 800f1d8:	e7e7      	b.n	800f1aa <VectorB4+0x6a>
 800f1da:	bf00      	nop
 800f1dc:	20001280 	.word	0x20001280

0800f1e0 <icu_lld_init>:
/**
 * @brief   Low level ICU driver initialization.
 *
 * @notapi
 */
void icu_lld_init(void) {
 800f1e0:	b510      	push	{r4, lr}
  ICUD2.tim = STM32_TIM2;
#endif

#if STM32_ICU_USE_TIM3
  /* Driver initialization.*/
  icuObjectInit(&ICUD3);
 800f1e2:	4c03      	ldr	r4, [pc, #12]	; (800f1f0 <icu_lld_init+0x10>)
 800f1e4:	4620      	mov	r0, r4
 800f1e6:	f7fe fb13 	bl	800d810 <icuObjectInit>
  ICUD3.tim = STM32_TIM3;
 800f1ea:	4b02      	ldr	r3, [pc, #8]	; (800f1f4 <icu_lld_init+0x14>)
 800f1ec:	60e3      	str	r3, [r4, #12]
#if STM32_ICU_USE_TIM9
  /* Driver initialization.*/
  icuObjectInit(&ICUD9);
  ICUD9.tim = STM32_TIM9;
#endif
}
 800f1ee:	bd10      	pop	{r4, pc}
 800f1f0:	20001280 	.word	0x20001280
 800f1f4:	40000400 	.word	0x40000400
	...

0800f200 <SysTick_Handler>:
 * @brief   System Timer vector.
 * @details This interrupt is used for system tick in periodic mode.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(SysTick_Handler) {
 800f200:	b508      	push	{r3, lr}
 800f202:	2320      	movs	r3, #32
 800f204:	f383 8811 	msr	BASEPRI, r3
  chSysTimerHandlerI();
 800f208:	f7fd fd92 	bl	800cd30 <chSysTimerHandlerI>
 800f20c:	2300      	movs	r3, #0
 800f20e:	f383 8811 	msr	BASEPRI, r3
  osalSysLockFromISR();
  osalOsTimerHandlerI();
  osalSysUnlockFromISR();

  OSAL_IRQ_EPILOGUE();
}
 800f212:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 800f216:	f7fe ba6b 	b.w	800d6f0 <_port_irq_epilogue>
 800f21a:	bf00      	nop
 800f21c:	0000      	movs	r0, r0
	...

0800f220 <st_lld_init>:
#endif /* OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING */

#if OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC
  /* Periodic systick mode, the Cortex-Mx internal systick timer is used
     in this mode.*/
  SysTick->LOAD = (STM32_HCLK / OSAL_ST_FREQUENCY) - 1;
 800f220:	4b05      	ldr	r3, [pc, #20]	; (800f238 <st_lld_init+0x18>)
 800f222:	f244 119f 	movw	r1, #16799	; 0x419f
  SysTick->VAL = 0;
 800f226:	2000      	movs	r0, #0
  SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
 800f228:	2207      	movs	r2, #7
  SysTick->LOAD = (STM32_HCLK / OSAL_ST_FREQUENCY) - 1;
 800f22a:	6059      	str	r1, [r3, #4]
  SysTick->VAL = 0;
 800f22c:	6098      	str	r0, [r3, #8]
                  SysTick_CTRL_ENABLE_Msk |
                  SysTick_CTRL_TICKINT_Msk;

  /* IRQ enabled.*/
  nvicSetSystemHandlerPriority(HANDLER_SYSTICK, STM32_ST_IRQ_PRIORITY);
 800f22e:	2108      	movs	r1, #8
 800f230:	200b      	movs	r0, #11
  SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
 800f232:	601a      	str	r2, [r3, #0]
  nvicSetSystemHandlerPriority(HANDLER_SYSTICK, STM32_ST_IRQ_PRIORITY);
 800f234:	f7fe be6c 	b.w	800df10 <nvicSetSystemHandlerPriority>
 800f238:	e000e010 	.word	0xe000e010
 800f23c:	00000000 	.word	0x00000000

0800f240 <notify1>:

#if STM32_SERIAL_USE_USART1 || defined(__DOXYGEN__)
static void notify1(io_queue_t *qp) {

  (void)qp;
  USART1->CR1 |= USART_CR1_TXEIE;
 800f240:	4a02      	ldr	r2, [pc, #8]	; (800f24c <notify1+0xc>)
 800f242:	68d3      	ldr	r3, [r2, #12]
 800f244:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f248:	60d3      	str	r3, [r2, #12]
}
 800f24a:	4770      	bx	lr
 800f24c:	40011000 	.word	0x40011000

0800f250 <VectorD4>:
/**
 * @brief   USART1 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART1_HANDLER) {
 800f250:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  USART_TypeDef *u = sdp->usart;
 800f254:	4e45      	ldr	r6, [pc, #276]	; (800f36c <VectorD4+0x11c>)
 800f256:	6f75      	ldr	r5, [r6, #116]	; 0x74
  uint16_t cr1 = u->CR1;
 800f258:	f8d5 900c 	ldr.w	r9, [r5, #12]
  uint16_t sr = u->SR;
 800f25c:	682b      	ldr	r3, [r5, #0]
  if (sr & USART_SR_LBD) {
 800f25e:	05da      	lsls	r2, r3, #23
  uint16_t sr = u->SR;
 800f260:	b29c      	uxth	r4, r3
  if (sr & USART_SR_LBD) {
 800f262:	d453      	bmi.n	800f30c <VectorD4+0xbc>
 800f264:	2320      	movs	r3, #32
 800f266:	f383 8811 	msr	BASEPRI, r3
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 800f26a:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 800f26e:	d02d      	beq.n	800f2cc <VectorD4+0x7c>
  chEvtBroadcastFlagsI(esp, flags);
 800f270:	4f3f      	ldr	r7, [pc, #252]	; (800f370 <VectorD4+0x120>)
      sdIncomingDataI(sdp, b);
 800f272:	f1a7 0804 	sub.w	r8, r7, #4
 800f276:	e007      	b.n	800f288 <VectorD4+0x38>
    if (sr & USART_SR_RXNE)
 800f278:	06a0      	lsls	r0, r4, #26
    b = u->DR;
 800f27a:	6869      	ldr	r1, [r5, #4]
    if (sr & USART_SR_RXNE)
 800f27c:	d41d      	bmi.n	800f2ba <VectorD4+0x6a>
    sr = u->SR;
 800f27e:	682c      	ldr	r4, [r5, #0]
 800f280:	b2a4      	uxth	r4, r4
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 800f282:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 800f286:	d021      	beq.n	800f2cc <VectorD4+0x7c>
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
 800f288:	0723      	lsls	r3, r4, #28
 800f28a:	d0f5      	beq.n	800f278 <VectorD4+0x28>
    sts |= SD_OVERRUN_ERROR;
 800f28c:	f014 0f08 	tst.w	r4, #8
 800f290:	bf0c      	ite	eq
 800f292:	2100      	moveq	r1, #0
 800f294:	2180      	movne	r1, #128	; 0x80
  if (sr & USART_SR_PE)
 800f296:	07e0      	lsls	r0, r4, #31
    sts |= SD_PARITY_ERROR;
 800f298:	bf48      	it	mi
 800f29a:	f041 0120 	orrmi.w	r1, r1, #32
  if (sr & USART_SR_FE)
 800f29e:	07a2      	lsls	r2, r4, #30
    sts |= SD_FRAMING_ERROR;
 800f2a0:	bf48      	it	mi
 800f2a2:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
  if (sr & USART_SR_NE)
 800f2a6:	0763      	lsls	r3, r4, #29
    sts |= SD_NOISE_ERROR;
 800f2a8:	bf48      	it	mi
 800f2aa:	f441 7180 	orrmi.w	r1, r1, #256	; 0x100
 800f2ae:	4638      	mov	r0, r7
 800f2b0:	f7fe f84e 	bl	800d350 <chEvtBroadcastFlagsI>
    if (sr & USART_SR_RXNE)
 800f2b4:	06a0      	lsls	r0, r4, #26
    b = u->DR;
 800f2b6:	6869      	ldr	r1, [r5, #4]
    if (sr & USART_SR_RXNE)
 800f2b8:	d5e1      	bpl.n	800f27e <VectorD4+0x2e>
      sdIncomingDataI(sdp, b);
 800f2ba:	b2c9      	uxtb	r1, r1
 800f2bc:	4640      	mov	r0, r8
 800f2be:	f7fe fb27 	bl	800d910 <sdIncomingDataI>
    sr = u->SR;
 800f2c2:	682c      	ldr	r4, [r5, #0]
 800f2c4:	b2a4      	uxth	r4, r4
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 800f2c6:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 800f2ca:	d1dd      	bne.n	800f288 <VectorD4+0x38>
 800f2cc:	2300      	movs	r3, #0
 800f2ce:	f383 8811 	msr	BASEPRI, r3
  if ((cr1 & USART_CR1_TXEIE) && (sr & USART_SR_TXE)) {
 800f2d2:	f019 0f80 	tst.w	r9, #128	; 0x80
 800f2d6:	d001      	beq.n	800f2dc <VectorD4+0x8c>
 800f2d8:	0622      	lsls	r2, r4, #24
 800f2da:	d426      	bmi.n	800f32a <VectorD4+0xda>
  if (sr & USART_SR_TC) {
 800f2dc:	0663      	lsls	r3, r4, #25
 800f2de:	d511      	bpl.n	800f304 <VectorD4+0xb4>
 800f2e0:	2320      	movs	r3, #32
 800f2e2:	f383 8811 	msr	BASEPRI, r3
  return (bool)((oqp->q_wrptr == oqp->q_rdptr) && (oqp->q_counter != 0U));
 800f2e6:	e9d6 2311 	ldrd	r2, r3, [r6, #68]	; 0x44
 800f2ea:	429a      	cmp	r2, r3
 800f2ec:	d02a      	beq.n	800f344 <VectorD4+0xf4>
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 800f2ee:	f64f 73bf 	movw	r3, #65471	; 0xffbf
 800f2f2:	ea09 0303 	and.w	r3, r9, r3
    u->SR = ~USART_SR_TC;
 800f2f6:	f06f 0240 	mvn.w	r2, #64	; 0x40
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 800f2fa:	60eb      	str	r3, [r5, #12]
 800f2fc:	2300      	movs	r3, #0
    u->SR = ~USART_SR_TC;
 800f2fe:	602a      	str	r2, [r5, #0]
 800f300:	f383 8811 	msr	BASEPRI, r3
  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD1);

  OSAL_IRQ_EPILOGUE();
}
 800f304:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  OSAL_IRQ_EPILOGUE();
 800f308:	f7fe b9f2 	b.w	800d6f0 <_port_irq_epilogue>
 800f30c:	2320      	movs	r3, #32
 800f30e:	f383 8811 	msr	BASEPRI, r3
 800f312:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f316:	1d30      	adds	r0, r6, #4
 800f318:	f7fe f81a 	bl	800d350 <chEvtBroadcastFlagsI>
    u->SR = ~USART_SR_LBD;
 800f31c:	f46f 7380 	mvn.w	r3, #256	; 0x100
 800f320:	602b      	str	r3, [r5, #0]
 800f322:	2300      	movs	r3, #0
 800f324:	f383 8811 	msr	BASEPRI, r3
 800f328:	e79c      	b.n	800f264 <VectorD4+0x14>
 800f32a:	2320      	movs	r3, #32
 800f32c:	f383 8811 	msr	BASEPRI, r3
    b = oqGetI(&sdp->oqueue);
 800f330:	4810      	ldr	r0, [pc, #64]	; (800f374 <VectorD4+0x124>)
 800f332:	f7fe f915 	bl	800d560 <chOQGetI>
    if (b < Q_OK) {
 800f336:	2800      	cmp	r0, #0
 800f338:	db0c      	blt.n	800f354 <VectorD4+0x104>
      u->DR = b;
 800f33a:	6068      	str	r0, [r5, #4]
 800f33c:	2300      	movs	r3, #0
 800f33e:	f383 8811 	msr	BASEPRI, r3
 800f342:	e7cb      	b.n	800f2dc <VectorD4+0x8c>
 800f344:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 800f346:	2b00      	cmp	r3, #0
 800f348:	d0d1      	beq.n	800f2ee <VectorD4+0x9e>
 800f34a:	2110      	movs	r1, #16
 800f34c:	4808      	ldr	r0, [pc, #32]	; (800f370 <VectorD4+0x120>)
 800f34e:	f7fd ffff 	bl	800d350 <chEvtBroadcastFlagsI>
 800f352:	e7cc      	b.n	800f2ee <VectorD4+0x9e>
 800f354:	2108      	movs	r1, #8
 800f356:	4806      	ldr	r0, [pc, #24]	; (800f370 <VectorD4+0x120>)
 800f358:	f7fd fffa 	bl	800d350 <chEvtBroadcastFlagsI>
      u->CR1 = (cr1 & ~USART_CR1_TXEIE) | USART_CR1_TCIE;
 800f35c:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800f360:	ea09 0303 	and.w	r3, r9, r3
 800f364:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f368:	60eb      	str	r3, [r5, #12]
 800f36a:	e7e7      	b.n	800f33c <VectorD4+0xec>
 800f36c:	20001298 	.word	0x20001298
 800f370:	2000129c 	.word	0x2000129c
 800f374:	200012c8 	.word	0x200012c8
	...

0800f380 <sd_lld_init>:
/**
 * @brief   Low level serial driver initialization.
 *
 * @notapi
 */
void sd_lld_init(void) {
 800f380:	b510      	push	{r4, lr}

#if STM32_SERIAL_USE_USART1
  sdObjectInit(&SD1, NULL, notify1);
 800f382:	4c04      	ldr	r4, [pc, #16]	; (800f394 <sd_lld_init+0x14>)
 800f384:	4a04      	ldr	r2, [pc, #16]	; (800f398 <sd_lld_init+0x18>)
 800f386:	4620      	mov	r0, r4
 800f388:	2100      	movs	r1, #0
 800f38a:	f7fe fa91 	bl	800d8b0 <sdObjectInit>
  SD1.usart = USART1;
 800f38e:	4b03      	ldr	r3, [pc, #12]	; (800f39c <sd_lld_init+0x1c>)
 800f390:	6763      	str	r3, [r4, #116]	; 0x74

#if STM32_SERIAL_USE_USART6
  sdObjectInit(&SD6, NULL, notify6);
  SD6.usart = USART6;
#endif
}
 800f392:	bd10      	pop	{r4, pc}
 800f394:	20001298 	.word	0x20001298
 800f398:	0800f241 	.word	0x0800f241
 800f39c:	40011000 	.word	0x40011000

0800f3a0 <sd_lld_start>:
 *                      If this parameter is set to @p NULL then a default
 *                      configuration is used.
 *
 * @notapi
 */
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {
 800f3a0:	b538      	push	{r3, r4, r5, lr}

  if (config == NULL)
    config = &default_config;
 800f3a2:	4c1c      	ldr	r4, [pc, #112]	; (800f414 <sd_lld_start+0x74>)

  if (sdp->state == SD_STOP) {
 800f3a4:	7a03      	ldrb	r3, [r0, #8]
    config = &default_config;
 800f3a6:	2900      	cmp	r1, #0
 800f3a8:	bf18      	it	ne
 800f3aa:	460c      	movne	r4, r1
  if (sdp->state == SD_STOP) {
 800f3ac:	2b01      	cmp	r3, #1
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {
 800f3ae:	4605      	mov	r5, r0
  if (sdp->state == SD_STOP) {
 800f3b0:	d023      	beq.n	800f3fa <sd_lld_start+0x5a>
  USART_TypeDef *u = sdp->usart;
 800f3b2:	6f6b      	ldr	r3, [r5, #116]	; 0x74
  if ((sdp->usart == USART1) || (sdp->usart == USART6))
 800f3b4:	4918      	ldr	r1, [pc, #96]	; (800f418 <sd_lld_start+0x78>)
 800f3b6:	6820      	ldr	r0, [r4, #0]
 800f3b8:	428b      	cmp	r3, r1
 800f3ba:	d019      	beq.n	800f3f0 <sd_lld_start+0x50>
 800f3bc:	4a17      	ldr	r2, [pc, #92]	; (800f41c <sd_lld_start+0x7c>)
 800f3be:	4293      	cmp	r3, r2
 800f3c0:	d016      	beq.n	800f3f0 <sd_lld_start+0x50>
    u->BRR = STM32_PCLK1 / config->speed;
 800f3c2:	4a17      	ldr	r2, [pc, #92]	; (800f420 <sd_lld_start+0x80>)
 800f3c4:	fbb2 f2f0 	udiv	r2, r2, r0
 800f3c8:	609a      	str	r2, [r3, #8]
                         USART_CR1_RXNEIE | USART_CR1_TE |
 800f3ca:	88a2      	ldrh	r2, [r4, #4]
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 800f3cc:	88e0      	ldrh	r0, [r4, #6]
  u->CR3 = config->cr3 | USART_CR3_EIE;
 800f3ce:	8921      	ldrh	r1, [r4, #8]
                         USART_CR1_RXNEIE | USART_CR1_TE |
 800f3d0:	f442 5204 	orr.w	r2, r2, #8448	; 0x2100
 800f3d4:	f042 022c 	orr.w	r2, r2, #44	; 0x2c
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 800f3d8:	f040 0040 	orr.w	r0, r0, #64	; 0x40
  u->CR3 = config->cr3 | USART_CR3_EIE;
 800f3dc:	f041 0101 	orr.w	r1, r1, #1
  u->SR = 0;
 800f3e0:	2400      	movs	r4, #0
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 800f3e2:	6118      	str	r0, [r3, #16]
  u->CR3 = config->cr3 | USART_CR3_EIE;
 800f3e4:	6159      	str	r1, [r3, #20]
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 800f3e6:	60da      	str	r2, [r3, #12]
  u->SR = 0;
 800f3e8:	601c      	str	r4, [r3, #0]
  (void)u->SR;  /* SR reset step 1.*/
 800f3ea:	681a      	ldr	r2, [r3, #0]
  (void)u->DR;  /* SR reset step 2.*/
 800f3ec:	685b      	ldr	r3, [r3, #4]
      nvicEnableVector(STM32_USART6_NUMBER, STM32_SERIAL_USART6_PRIORITY);
    }
#endif
  }
  usart_init(sdp, config);
}
 800f3ee:	bd38      	pop	{r3, r4, r5, pc}
    u->BRR = STM32_PCLK2 / config->speed;
 800f3f0:	4a0c      	ldr	r2, [pc, #48]	; (800f424 <sd_lld_start+0x84>)
 800f3f2:	fbb2 f2f0 	udiv	r2, r2, r0
 800f3f6:	609a      	str	r2, [r3, #8]
 800f3f8:	e7e7      	b.n	800f3ca <sd_lld_start+0x2a>
    if (&SD1 == sdp) {
 800f3fa:	4b0b      	ldr	r3, [pc, #44]	; (800f428 <sd_lld_start+0x88>)
 800f3fc:	4298      	cmp	r0, r3
 800f3fe:	d1d8      	bne.n	800f3b2 <sd_lld_start+0x12>
      rccEnableUSART1(FALSE);
 800f400:	4a0a      	ldr	r2, [pc, #40]	; (800f42c <sd_lld_start+0x8c>)
 800f402:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800f404:	f043 0310 	orr.w	r3, r3, #16
 800f408:	6453      	str	r3, [r2, #68]	; 0x44
      nvicEnableVector(STM32_USART1_NUMBER, STM32_SERIAL_USART1_PRIORITY);
 800f40a:	210c      	movs	r1, #12
 800f40c:	2025      	movs	r0, #37	; 0x25
 800f40e:	f7fe fd5f 	bl	800ded0 <nvicEnableVector>
 800f412:	e7ce      	b.n	800f3b2 <sd_lld_start+0x12>
 800f414:	08013c70 	.word	0x08013c70
 800f418:	40011000 	.word	0x40011000
 800f41c:	40011400 	.word	0x40011400
 800f420:	0280de80 	.word	0x0280de80
 800f424:	0501bd00 	.word	0x0501bd00
 800f428:	20001298 	.word	0x20001298
 800f42c:	40023800 	.word	0x40023800

0800f430 <Vector15C>:
/**
 * @brief   USART6 IRQ handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART6_HANDLER) {
 800f430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USART_TypeDef *u = uartp->usart;
 800f432:	4e1d      	ldr	r6, [pc, #116]	; (800f4a8 <Vector15C+0x78>)
 800f434:	68b4      	ldr	r4, [r6, #8]
  uint32_t cr1 = u->CR1;
 800f436:	68e7      	ldr	r7, [r4, #12]
  sr = u->SR;   /* SR reset step 1.*/
 800f438:	6825      	ldr	r5, [r4, #0]
  (void)u->DR;  /* SR reset step 2.*/
 800f43a:	6863      	ldr	r3, [r4, #4]
  if (sr & (USART_SR_LBD | USART_SR_ORE | USART_SR_NE |
 800f43c:	f240 130f 	movw	r3, #271	; 0x10f
 800f440:	421d      	tst	r5, r3
 800f442:	d01d      	beq.n	800f480 <Vector15C+0x50>
    if (uartp->config->rxerr_cb != NULL)
 800f444:	6873      	ldr	r3, [r6, #4]
 800f446:	691a      	ldr	r2, [r3, #16]
    u->SR = ~USART_SR_LBD;
 800f448:	f46f 7380 	mvn.w	r3, #256	; 0x100
 800f44c:	6023      	str	r3, [r4, #0]
    if (uartp->config->rxerr_cb != NULL)
 800f44e:	b1ba      	cbz	r2, 800f480 <Vector15C+0x50>
  sr = u->SR;   /* SR reset step 1.*/
 800f450:	b2ab      	uxth	r3, r5
    sts |= UART_OVERRUN_ERROR;
 800f452:	f013 0f08 	tst.w	r3, #8
 800f456:	bf0c      	ite	eq
 800f458:	2100      	moveq	r1, #0
 800f45a:	2110      	movne	r1, #16
  if (sr & USART_SR_PE)
 800f45c:	07d8      	lsls	r0, r3, #31
    sts |= UART_PARITY_ERROR;
 800f45e:	bf48      	it	mi
 800f460:	f041 0104 	orrmi.w	r1, r1, #4
  if (sr & USART_SR_FE)
 800f464:	0798      	lsls	r0, r3, #30
    sts |= UART_FRAMING_ERROR;
 800f466:	bf48      	it	mi
 800f468:	f041 0108 	orrmi.w	r1, r1, #8
  if (sr & USART_SR_NE)
 800f46c:	0758      	lsls	r0, r3, #29
    sts |= UART_NOISE_ERROR;
 800f46e:	bf48      	it	mi
 800f470:	f041 0120 	orrmi.w	r1, r1, #32
  if (sr & USART_SR_LBD)
 800f474:	05d8      	lsls	r0, r3, #23
    sts |= UART_BREAK_DETECTED;
 800f476:	bf48      	it	mi
 800f478:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
      uartp->config->rxerr_cb(uartp, translate_errors(sr));
 800f47c:	480a      	ldr	r0, [pc, #40]	; (800f4a8 <Vector15C+0x78>)
 800f47e:	4790      	blx	r2
  if ((sr & USART_SR_TC) && (cr1 & USART_CR1_TCIE)) {
 800f480:	066a      	lsls	r2, r5, #25
 800f482:	d50c      	bpl.n	800f49e <Vector15C+0x6e>
 800f484:	067b      	lsls	r3, r7, #25
 800f486:	d50a      	bpl.n	800f49e <Vector15C+0x6e>
    if (uartp->config->txend2_cb != NULL)
 800f488:	6873      	ldr	r3, [r6, #4]
 800f48a:	685b      	ldr	r3, [r3, #4]
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 800f48c:	f027 0740 	bic.w	r7, r7, #64	; 0x40
    u->SR = ~USART_SR_TC;
 800f490:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800f494:	6022      	str	r2, [r4, #0]
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 800f496:	60e7      	str	r7, [r4, #12]
    if (uartp->config->txend2_cb != NULL)
 800f498:	b10b      	cbz	r3, 800f49e <Vector15C+0x6e>
      uartp->config->txend2_cb(uartp);
 800f49a:	4803      	ldr	r0, [pc, #12]	; (800f4a8 <Vector15C+0x78>)
 800f49c:	4798      	blx	r3
  OSAL_IRQ_PROLOGUE();

  serve_usart_irq(&UARTD6);

  OSAL_IRQ_EPILOGUE();
}
 800f49e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_EPILOGUE();
 800f4a2:	f7fe b925 	b.w	800d6f0 <_port_irq_epilogue>
 800f4a6:	bf00      	nop
 800f4a8:	20001310 	.word	0x20001310
 800f4ac:	00000000 	.word	0x00000000

0800f4b0 <uart_lld_init>:
/**
 * @brief   Low level UART driver initialization.
 *
 * @notapi
 */
void uart_lld_init(void) {
 800f4b0:	b510      	push	{r4, lr}
  UARTD5.dmarx   = STM32_DMA_STREAM(STM32_UART_UART5_RX_DMA_STREAM);
  UARTD5.dmatx   = STM32_DMA_STREAM(STM32_UART_UART5_TX_DMA_STREAM);
#endif

#if STM32_UART_USE_USART6
  uartObjectInit(&UARTD6);
 800f4b2:	4c06      	ldr	r4, [pc, #24]	; (800f4cc <uart_lld_init+0x1c>)
 800f4b4:	4620      	mov	r0, r4
 800f4b6:	f7fe fa73 	bl	800d9a0 <uartObjectInit>
  UARTD6.usart   = USART6;
  UARTD6.dmarx   = STM32_DMA_STREAM(STM32_UART_USART6_RX_DMA_STREAM);
 800f4ba:	4b05      	ldr	r3, [pc, #20]	; (800f4d0 <uart_lld_init+0x20>)
  UARTD6.usart   = USART6;
 800f4bc:	4a05      	ldr	r2, [pc, #20]	; (800f4d4 <uart_lld_init+0x24>)
 800f4be:	60a2      	str	r2, [r4, #8]
  UARTD6.dmatx   = STM32_DMA_STREAM(STM32_UART_USART6_TX_DMA_STREAM);
 800f4c0:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800f4c4:	e9c4 3204 	strd	r3, r2, [r4, #16]
#endif
}
 800f4c8:	bd10      	pop	{r4, pc}
 800f4ca:	bf00      	nop
 800f4cc:	20001310 	.word	0x20001310
 800f4d0:	08013be8 	.word	0x08013be8
 800f4d4:	40011400 	.word	0x40011400
	...

0800f4e0 <__early_init>:
 * @details This initialization must be performed just after stack setup
 *          and before any other initialization.
 */
void __early_init(void) {

  stm32_clock_init();
 800f4e0:	f7fe bf4e 	b.w	800e380 <stm32_clock_init>
	...

0800f4f0 <boardInit>:
/**
 * @brief   Board-specific initialization code.
 * @todo    Add your board-specific code, if any.
 */
void boardInit(void) {
}
 800f4f0:	4770      	bx	lr
 800f4f2:	bf00      	nop
	...

0800f500 <chvprintf>:
 * @return              The number of bytes that would have been
 *                      written to @p chp if no stream error occurs
 *
 * @api
 */
int chvprintf(BaseSequentialStream *chp, const char *fmt, va_list ap) {
 800f500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f504:	ed2d 8b02 	vpush	{d8}
 800f508:	4606      	mov	r6, r0
 800f50a:	b091      	sub	sp, #68	; 0x44
 800f50c:	4689      	mov	r9, r1
 800f50e:	4692      	mov	sl, r2
  char *p, *s, c, filler;
  int i, precision, width;
  int n = 0;
 800f510:	f04f 0b00 	mov.w	fp, #0
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (TRUE) {
    c = *fmt++;
 800f514:	f899 1000 	ldrb.w	r1, [r9]
 800f518:	f109 0201 	add.w	r2, r9, #1
    if (c == 0)
 800f51c:	b171      	cbz	r1, 800f53c <chvprintf+0x3c>
      return n;
    if (c != '%') {
 800f51e:	2925      	cmp	r1, #37	; 0x25
 800f520:	d012      	beq.n	800f548 <chvprintf+0x48>
      chSequentialStreamPut(chp, (uint8_t)c);
 800f522:	6833      	ldr	r3, [r6, #0]
    c = *fmt++;
 800f524:	4691      	mov	r9, r2
      chSequentialStreamPut(chp, (uint8_t)c);
 800f526:	689b      	ldr	r3, [r3, #8]
 800f528:	4630      	mov	r0, r6
 800f52a:	4798      	blx	r3
    c = *fmt++;
 800f52c:	f899 1000 	ldrb.w	r1, [r9]
      n++;
 800f530:	f10b 0b01 	add.w	fp, fp, #1
    c = *fmt++;
 800f534:	f109 0201 	add.w	r2, r9, #1
    if (c == 0)
 800f538:	2900      	cmp	r1, #0
 800f53a:	d1f0      	bne.n	800f51e <chvprintf+0x1e>
      chSequentialStreamPut(chp, (uint8_t)filler);
      n++;
      width--;
    }
  }
}
 800f53c:	4658      	mov	r0, fp
 800f53e:	b011      	add	sp, #68	; 0x44
 800f540:	ecbd 8b02 	vpop	{d8}
 800f544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (*fmt == '-') {
 800f548:	f899 1001 	ldrb.w	r1, [r9, #1]
 800f54c:	292d      	cmp	r1, #45	; 0x2d
 800f54e:	bf03      	ittte	eq
 800f550:	f899 1002 	ldrbeq.w	r1, [r9, #2]
      fmt++;
 800f554:	f109 0202 	addeq.w	r2, r9, #2
      left_align = TRUE;
 800f558:	2301      	moveq	r3, #1
    left_align = FALSE;
 800f55a:	2300      	movne	r3, #0
    if (*fmt == '0') {
 800f55c:	2930      	cmp	r1, #48	; 0x30
 800f55e:	bf08      	it	eq
 800f560:	7851      	ldrbeq	r1, [r2, #1]
    left_align = FALSE;
 800f562:	9302      	str	r3, [sp, #8]
      fmt++;
 800f564:	bf06      	itte	eq
 800f566:	3201      	addeq	r2, #1
      filler = '0';
 800f568:	2730      	moveq	r7, #48	; 0x30
    filler = ' ';
 800f56a:	2720      	movne	r7, #32
 800f56c:	3201      	adds	r2, #1
    width = 0;
 800f56e:	2400      	movs	r4, #0
 800f570:	e007      	b.n	800f582 <chvprintf+0x82>
        c = va_arg(ap, int);
 800f572:	f89a 3000 	ldrb.w	r3, [sl]
 800f576:	f10a 0a04 	add.w	sl, sl, #4
 800f57a:	f812 1b01 	ldrb.w	r1, [r2], #1
      width = width * 10 + c;
 800f57e:	eb03 0440 	add.w	r4, r3, r0, lsl #1
      if (c >= '0' && c <= '9')
 800f582:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800f586:	b2db      	uxtb	r3, r3
 800f588:	2b09      	cmp	r3, #9
      c = *fmt++;
 800f58a:	4615      	mov	r5, r2
      width = width * 10 + c;
 800f58c:	eb04 0084 	add.w	r0, r4, r4, lsl #2
      if (c >= '0' && c <= '9')
 800f590:	d9f3      	bls.n	800f57a <chvprintf+0x7a>
      else if (c == '*')
 800f592:	292a      	cmp	r1, #42	; 0x2a
 800f594:	d0ed      	beq.n	800f572 <chvprintf+0x72>
    if (c == '.') {
 800f596:	292e      	cmp	r1, #46	; 0x2e
    precision = 0;
 800f598:	f04f 0800 	mov.w	r8, #0
    if (c == '.') {
 800f59c:	d04a      	beq.n	800f634 <chvprintf+0x134>
    if (c == 'l' || c == 'L') {
 800f59e:	f001 03df 	and.w	r3, r1, #223	; 0xdf
 800f5a2:	2b4c      	cmp	r3, #76	; 0x4c
 800f5a4:	f105 0901 	add.w	r9, r5, #1
 800f5a8:	d050      	beq.n	800f64c <chvprintf+0x14c>
      is_long = (c >= 'A') && (c <= 'Z');
 800f5aa:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41
    switch (c) {
 800f5ae:	f1a1 0244 	sub.w	r2, r1, #68	; 0x44
      is_long = (c >= 'A') && (c <= 'Z');
 800f5b2:	b2db      	uxtb	r3, r3
    switch (c) {
 800f5b4:	2a34      	cmp	r2, #52	; 0x34
 800f5b6:	f200 81d3 	bhi.w	800f960 <chvprintf+0x460>
 800f5ba:	e8df f012 	tbh	[pc, r2, lsl #1]
 800f5be:	021e      	.short	0x021e
 800f5c0:	01d101d1 	.word	0x01d101d1
 800f5c4:	01d101d1 	.word	0x01d101d1
 800f5c8:	01d1021e 	.word	0x01d1021e
 800f5cc:	01d101d1 	.word	0x01d101d1
 800f5d0:	01d101d1 	.word	0x01d101d1
 800f5d4:	01d101cd 	.word	0x01d101cd
 800f5d8:	01d101d1 	.word	0x01d101d1
 800f5dc:	01d101d1 	.word	0x01d101d1
 800f5e0:	01d10197 	.word	0x01d10197
 800f5e4:	022701d1 	.word	0x022701d1
 800f5e8:	01d101d1 	.word	0x01d101d1
 800f5ec:	01d101d1 	.word	0x01d101d1
 800f5f0:	01d101d1 	.word	0x01d101d1
 800f5f4:	01d101d1 	.word	0x01d101d1
 800f5f8:	01d101d1 	.word	0x01d101d1
 800f5fc:	021e014e 	.word	0x021e014e
 800f600:	00aa01d1 	.word	0x00aa01d1
 800f604:	01d101d1 	.word	0x01d101d1
 800f608:	01d1021e 	.word	0x01d1021e
 800f60c:	01d101d1 	.word	0x01d101d1
 800f610:	01d101d1 	.word	0x01d101d1
 800f614:	01d101cd 	.word	0x01d101cd
 800f618:	01d101d1 	.word	0x01d101d1
 800f61c:	01d10088 	.word	0x01d10088
 800f620:	01d10197 	.word	0x01d10197
 800f624:	022701d1 	.word	0x022701d1
          c = va_arg(ap, int);
 800f628:	f89a 3000 	ldrb.w	r3, [sl]
 800f62c:	f10a 0a04 	add.w	sl, sl, #4
        precision += c;
 800f630:	eb03 0842 	add.w	r8, r3, r2, lsl #1
        c = *fmt++;
 800f634:	f815 1b01 	ldrb.w	r1, [r5], #1
        if (c >= '0' && c <= '9')
 800f638:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800f63c:	b2db      	uxtb	r3, r3
 800f63e:	2b09      	cmp	r3, #9
        precision *= 10;
 800f640:	eb08 0288 	add.w	r2, r8, r8, lsl #2
        if (c >= '0' && c <= '9')
 800f644:	d9f4      	bls.n	800f630 <chvprintf+0x130>
        else if (c == '*')
 800f646:	292a      	cmp	r1, #42	; 0x2a
 800f648:	d0ee      	beq.n	800f628 <chvprintf+0x128>
 800f64a:	e7a8      	b.n	800f59e <chvprintf+0x9e>
      if (*fmt)
 800f64c:	782b      	ldrb	r3, [r5, #0]
 800f64e:	b3db      	cbz	r3, 800f6c8 <chvprintf+0x1c8>
    switch (c) {
 800f650:	f1a3 0244 	sub.w	r2, r3, #68	; 0x44
 800f654:	2a34      	cmp	r2, #52	; 0x34
 800f656:	f200 8185 	bhi.w	800f964 <chvprintf+0x464>
 800f65a:	e8df f012 	tbh	[pc, r2, lsl #1]
 800f65e:	01a2      	.short	0x01a2
 800f660:	01830183 	.word	0x01830183
 800f664:	01830183 	.word	0x01830183
 800f668:	018301a2 	.word	0x018301a2
 800f66c:	01830183 	.word	0x01830183
 800f670:	01830183 	.word	0x01830183
 800f674:	0183017e 	.word	0x0183017e
 800f678:	01830183 	.word	0x01830183
 800f67c:	01830183 	.word	0x01830183
 800f680:	01830148 	.word	0x01830148
 800f684:	019f0183 	.word	0x019f0183
 800f688:	01830183 	.word	0x01830183
 800f68c:	01830183 	.word	0x01830183
 800f690:	01830183 	.word	0x01830183
 800f694:	01830183 	.word	0x01830183
 800f698:	01830183 	.word	0x01830183
 800f69c:	01a200ff 	.word	0x01a200ff
 800f6a0:	005b0183 	.word	0x005b0183
 800f6a4:	01830183 	.word	0x01830183
 800f6a8:	018301a2 	.word	0x018301a2
 800f6ac:	01830183 	.word	0x01830183
 800f6b0:	01830183 	.word	0x01830183
 800f6b4:	0183017e 	.word	0x0183017e
 800f6b8:	01830183 	.word	0x01830183
 800f6bc:	01830039 	.word	0x01830039
 800f6c0:	01830148 	.word	0x01830148
 800f6c4:	019f0183 	.word	0x019f0183
      if (*fmt)
 800f6c8:	460b      	mov	r3, r1
 800f6ca:	46a9      	mov	r9, r5
 800f6cc:	e7c0      	b.n	800f650 <chvprintf+0x150>
    switch (c) {
 800f6ce:	46a9      	mov	r9, r5
      if ((s = va_arg(ap, char *)) == 0)
 800f6d0:	f8da 5000 	ldr.w	r5, [sl]
 800f6d4:	f10a 0a04 	add.w	sl, sl, #4
 800f6d8:	2d00      	cmp	r5, #0
 800f6da:	f000 81a6 	beq.w	800fa2a <chvprintf+0x52a>
 800f6de:	782b      	ldrb	r3, [r5, #0]
 800f6e0:	4629      	mov	r1, r5
      if (precision == 0)
 800f6e2:	f1b8 0f00 	cmp.w	r8, #0
 800f6e6:	f040 81bf 	bne.w	800fa68 <chvprintf+0x568>
      for (p = s; *p && (--precision >= 0); p++)
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	f000 81cc 	beq.w	800fa88 <chvprintf+0x588>
 800f6f0:	f647 78fe 	movw	r8, #32766	; 0x7ffe
 800f6f4:	462b      	mov	r3, r5
 800f6f6:	e002      	b.n	800f6fe <chvprintf+0x1fe>
 800f6f8:	f1b8 0801 	subs.w	r8, r8, #1
 800f6fc:	d403      	bmi.n	800f706 <chvprintf+0x206>
 800f6fe:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800f702:	2a00      	cmp	r2, #0
 800f704:	d1f8      	bne.n	800f6f8 <chvprintf+0x1f8>
 800f706:	1a5b      	subs	r3, r3, r1
 800f708:	1ae4      	subs	r4, r4, r3
 800f70a:	3b01      	subs	r3, #1
 800f70c:	9301      	str	r3, [sp, #4]
      filler = ' ';
 800f70e:	2720      	movs	r7, #32
 800f710:	e0af      	b.n	800f872 <chvprintf+0x372>
    switch (c) {
 800f712:	46a9      	mov	r9, r5
      f = (float) va_arg(ap, double);
 800f714:	f10a 0a07 	add.w	sl, sl, #7
 800f718:	f02a 0a07 	bic.w	sl, sl, #7
 800f71c:	e9da 0100 	ldrd	r0, r1, [sl]
 800f720:	f7fd f996 	bl	800ca50 <__aeabi_d2f>
 800f724:	ee08 0a10 	vmov	s16, r0
      if (f < 0) {
 800f728:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800f72c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      f = (float) va_arg(ap, double);
 800f730:	f10a 0a08 	add.w	sl, sl, #8
      if (f < 0) {
 800f734:	f100 816e 	bmi.w	800fa14 <chvprintf+0x514>
    p = tmpbuf;
 800f738:	ab0a      	add	r3, sp, #40	; 0x28
 800f73a:	9303      	str	r3, [sp, #12]
 800f73c:	9301      	str	r3, [sp, #4]
      p = ftoa(p, f, precision);
 800f73e:	ee18 0a10 	vmov	r0, s16
 800f742:	f7fc fe61 	bl	800c408 <__aeabi_f2d>
  if ((precision == 0) || (precision > FLOAT_PRECISION))
 800f746:	f108 38ff 	add.w	r8, r8, #4294967295
 800f74a:	f1b8 0f08 	cmp.w	r8, #8
      p = ftoa(p, f, precision);
 800f74e:	e9cd 0104 	strd	r0, r1, [sp, #16]
  if ((precision == 0) || (precision > FLOAT_PRECISION))
 800f752:	f200 8173 	bhi.w	800fa3c <chvprintf+0x53c>
 800f756:	4bc0      	ldr	r3, [pc, #768]	; (800fa58 <chvprintf+0x558>)
 800f758:	f853 5028 	ldr.w	r5, [r3, r8, lsl #2]
 800f75c:	4628      	mov	r0, r5
 800f75e:	f7fc fe31 	bl	800c3c4 <__aeabi_ui2d>
 800f762:	4bbe      	ldr	r3, [pc, #760]	; (800fa5c <chvprintf+0x55c>)
 800f764:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800f768:	fba3 3505 	umull	r3, r5, r3, r5
 800f76c:	08eb      	lsrs	r3, r5, #3
 800f76e:	9309      	str	r3, [sp, #36]	; 0x24
 800f770:	461d      	mov	r5, r3
  l = (long)num;
 800f772:	eefd 7ac8 	vcvt.s32.f32	s15, s16
  q = p + MAX_FILLER;
 800f776:	9b01      	ldr	r3, [sp, #4]
    i = (int)(l % radix);
 800f778:	f8df e2e0 	ldr.w	lr, [pc, #736]	; 800fa5c <chvprintf+0x55c>
  l = (long)num;
 800f77c:	edcd 7a08 	vstr	s15, [sp, #32]
  q = p + MAX_FILLER;
 800f780:	f103 080b 	add.w	r8, r3, #11
  l = num;
 800f784:	ee17 1a90 	vmov	r1, s15
  q = p + MAX_FILLER;
 800f788:	4642      	mov	r2, r8
    i = (int)(l % radix);
 800f78a:	fbae 0301 	umull	r0, r3, lr, r1
 800f78e:	08db      	lsrs	r3, r3, #3
 800f790:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 800f794:	4618      	mov	r0, r3
 800f796:	eba1 034c 	sub.w	r3, r1, ip, lsl #1
    i += '0';
 800f79a:	3330      	adds	r3, #48	; 0x30
    *--q = i;
 800f79c:	b2db      	uxtb	r3, r3
 800f79e:	f802 3d01 	strb.w	r3, [r2, #-1]!
  } while ((ll /= radix) != 0);
 800f7a2:	4601      	mov	r1, r0
 800f7a4:	2800      	cmp	r0, #0
 800f7a6:	d1f0      	bne.n	800f78a <chvprintf+0x28a>
 800f7a8:	9901      	ldr	r1, [sp, #4]
  i = (int)(p + MAX_FILLER - q);
 800f7aa:	eba8 0802 	sub.w	r8, r8, r2
 800f7ae:	4608      	mov	r0, r1
 800f7b0:	4440      	add	r0, r8
 800f7b2:	e001      	b.n	800f7b8 <chvprintf+0x2b8>
 800f7b4:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    *p++ = *q++;
 800f7b8:	f801 3b01 	strb.w	r3, [r1], #1
  while (--i);
 800f7bc:	4281      	cmp	r1, r0
 800f7be:	d1f9      	bne.n	800f7b4 <chvprintf+0x2b4>
 800f7c0:	9a01      	ldr	r2, [sp, #4]
  l = (long)((num - l) * precision);
 800f7c2:	9808      	ldr	r0, [sp, #32]
  *p++ = '.';
 800f7c4:	232e      	movs	r3, #46	; 0x2e
 800f7c6:	f108 38ff 	add.w	r8, r8, #4294967295
 800f7ca:	4442      	add	r2, r8
 800f7cc:	700b      	strb	r3, [r1, #0]
 800f7ce:	9201      	str	r2, [sp, #4]
  l = (long)((num - l) * precision);
 800f7d0:	f7fc fe08 	bl	800c3e4 <__aeabi_i2d>
 800f7d4:	4602      	mov	r2, r0
 800f7d6:	460b      	mov	r3, r1
 800f7d8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f7dc:	f7fc fcb4 	bl	800c148 <__aeabi_dsub>
 800f7e0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f7e4:	f7fc fe6c 	bl	800c4c0 <__aeabi_dmul>
 800f7e8:	f7fd f90a 	bl	800ca00 <__aeabi_d2iz>
  q = p + MAX_FILLER;
 800f7ec:	9b01      	ldr	r3, [sp, #4]
    ll = num;
 800f7ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
    i = (int)(l % radix);
 800f7f0:	499a      	ldr	r1, [pc, #616]	; (800fa5c <chvprintf+0x55c>)
  q = p + MAX_FILLER;
 800f7f2:	f103 080d 	add.w	r8, r3, #13
  *p++ = '.';
 800f7f6:	3302      	adds	r3, #2
    ll = num;
 800f7f8:	2a00      	cmp	r2, #0
 800f7fa:	bf08      	it	eq
 800f7fc:	4605      	moveq	r5, r0
  *p++ = '.';
 800f7fe:	9308      	str	r3, [sp, #32]
  q = p + MAX_FILLER;
 800f800:	4642      	mov	r2, r8
    i = (int)(l % radix);
 800f802:	fba1 c300 	umull	ip, r3, r1, r0
 800f806:	08db      	lsrs	r3, r3, #3
 800f808:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
 800f80c:	469c      	mov	ip, r3
 800f80e:	eba0 034e 	sub.w	r3, r0, lr, lsl #1
    i += '0';
 800f812:	3330      	adds	r3, #48	; 0x30
  } while ((ll /= radix) != 0);
 800f814:	fba1 0505 	umull	r0, r5, r1, r5
    *--q = i;
 800f818:	b2db      	uxtb	r3, r3
  } while ((ll /= radix) != 0);
 800f81a:	08ed      	lsrs	r5, r5, #3
    *--q = i;
 800f81c:	f802 3d01 	strb.w	r3, [r2, #-1]!
    l /= radix;
 800f820:	4660      	mov	r0, ip
  } while ((ll /= radix) != 0);
 800f822:	d1ee      	bne.n	800f802 <chvprintf+0x302>
  i = (int)(p + MAX_FILLER - q);
 800f824:	eba8 0802 	sub.w	r8, r8, r2
 800f828:	9901      	ldr	r1, [sp, #4]
 800f82a:	f108 0002 	add.w	r0, r8, #2
 800f82e:	4401      	add	r1, r0
 800f830:	4608      	mov	r0, r1
 800f832:	9908      	ldr	r1, [sp, #32]
 800f834:	e001      	b.n	800f83a <chvprintf+0x33a>
 800f836:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    *p++ = *q++;
 800f83a:	f801 3b01 	strb.w	r3, [r1], #1
  while (--i);
 800f83e:	4281      	cmp	r1, r0
 800f840:	d1f9      	bne.n	800f836 <chvprintf+0x336>
 800f842:	9b08      	ldr	r3, [sp, #32]
 800f844:	9d03      	ldr	r5, [sp, #12]
 800f846:	4443      	add	r3, r8
 800f848:	4698      	mov	r8, r3
 800f84a:	eba8 0805 	sub.w	r8, r8, r5
 800f84e:	f108 33ff 	add.w	r3, r8, #4294967295
 800f852:	eba4 0408 	sub.w	r4, r4, r8
 800f856:	9301      	str	r3, [sp, #4]
 800f858:	e00b      	b.n	800f872 <chvprintf+0x372>
    switch (c) {
 800f85a:	46a9      	mov	r9, r5
      *p++ = va_arg(ap, int);
 800f85c:	ad10      	add	r5, sp, #64	; 0x40
 800f85e:	f8da 3000 	ldr.w	r3, [sl]
 800f862:	f805 3d18 	strb.w	r3, [r5, #-24]!
      break;
 800f866:	2300      	movs	r3, #0
 800f868:	3c01      	subs	r4, #1
      *p++ = va_arg(ap, int);
 800f86a:	f10a 0a04 	add.w	sl, sl, #4
      break;
 800f86e:	9301      	str	r3, [sp, #4]
      filler = ' ';
 800f870:	2720      	movs	r7, #32
    if ((width -= i) < 0)
 800f872:	2c00      	cmp	r4, #0
 800f874:	db6a      	blt.n	800f94c <chvprintf+0x44c>
    if (left_align == FALSE)
 800f876:	9b02      	ldr	r3, [sp, #8]
 800f878:	2b00      	cmp	r3, #0
 800f87a:	d17b      	bne.n	800f974 <chvprintf+0x474>
      width = -width;
 800f87c:	4263      	negs	r3, r4
    if (width < 0) {
 800f87e:	2c00      	cmp	r4, #0
 800f880:	d077      	beq.n	800f972 <chvprintf+0x472>
      if (*s == '-' && filler == '0') {
 800f882:	7829      	ldrb	r1, [r5, #0]
 800f884:	6832      	ldr	r2, [r6, #0]
 800f886:	292d      	cmp	r1, #45	; 0x2d
 800f888:	6892      	ldr	r2, [r2, #8]
 800f88a:	d077      	beq.n	800f97c <chvprintf+0x47c>
 800f88c:	4698      	mov	r8, r3
 800f88e:	e001      	b.n	800f894 <chvprintf+0x394>
 800f890:	6833      	ldr	r3, [r6, #0]
 800f892:	689a      	ldr	r2, [r3, #8]
        chSequentialStreamPut(chp, (uint8_t)filler);
 800f894:	4639      	mov	r1, r7
 800f896:	4630      	mov	r0, r6
 800f898:	4790      	blx	r2
      } while (++width != 0);
 800f89a:	f118 0801 	adds.w	r8, r8, #1
 800f89e:	d1f7      	bne.n	800f890 <chvprintf+0x390>
    while (--i >= 0) {
 800f8a0:	9a01      	ldr	r2, [sp, #4]
 800f8a2:	2a00      	cmp	r2, #0
 800f8a4:	4643      	mov	r3, r8
 800f8a6:	44a3      	add	fp, r4
 800f8a8:	f6ff ae34 	blt.w	800f514 <chvprintf+0x14>
 800f8ac:	461c      	mov	r4, r3
      width = -width;
 800f8ae:	f8dd 8004 	ldr.w	r8, [sp, #4]
      chSequentialStreamPut(chp, (uint8_t)*s++);
 800f8b2:	6833      	ldr	r3, [r6, #0]
 800f8b4:	f815 1b01 	ldrb.w	r1, [r5], #1
 800f8b8:	689b      	ldr	r3, [r3, #8]
    while (--i >= 0) {
 800f8ba:	f108 38ff 	add.w	r8, r8, #4294967295
      chSequentialStreamPut(chp, (uint8_t)*s++);
 800f8be:	4630      	mov	r0, r6
 800f8c0:	4798      	blx	r3
    while (--i >= 0) {
 800f8c2:	f1b8 3fff 	cmp.w	r8, #4294967295
 800f8c6:	d1f4      	bne.n	800f8b2 <chvprintf+0x3b2>
 800f8c8:	9b01      	ldr	r3, [sp, #4]
 800f8ca:	f10b 0b01 	add.w	fp, fp, #1
 800f8ce:	445b      	add	r3, fp
 800f8d0:	469b      	mov	fp, r3
    while (width) {
 800f8d2:	2c00      	cmp	r4, #0
 800f8d4:	f43f ae1e 	beq.w	800f514 <chvprintf+0x14>
 800f8d8:	4625      	mov	r5, r4
      chSequentialStreamPut(chp, (uint8_t)filler);
 800f8da:	6833      	ldr	r3, [r6, #0]
 800f8dc:	4639      	mov	r1, r7
 800f8de:	689b      	ldr	r3, [r3, #8]
 800f8e0:	4630      	mov	r0, r6
 800f8e2:	4798      	blx	r3
    while (width) {
 800f8e4:	3d01      	subs	r5, #1
 800f8e6:	d1f8      	bne.n	800f8da <chvprintf+0x3da>
 800f8e8:	44a3      	add	fp, r4
 800f8ea:	e613      	b.n	800f514 <chvprintf+0x14>
    switch (c) {
 800f8ec:	46a9      	mov	r9, r5
      goto unsigned_common;
 800f8ee:	f04f 0c0a 	mov.w	ip, #10
 800f8f2:	f85a 2b04 	ldr.w	r2, [sl], #4
  q = p + MAX_FILLER;
 800f8f6:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 800f8fa:	e000      	b.n	800f8fe <chvprintf+0x3fe>
  } while ((ll /= radix) != 0);
 800f8fc:	4601      	mov	r1, r0
    i = (int)(l % radix);
 800f8fe:	fbb2 f5fc 	udiv	r5, r2, ip
 800f902:	fb0c 2215 	mls	r2, ip, r5, r2
    i += '0';
 800f906:	f102 0330 	add.w	r3, r2, #48	; 0x30
    if (i > '9')
 800f90a:	2b39      	cmp	r3, #57	; 0x39
      i += 'A' - '0' - 10;
 800f90c:	bfc8      	it	gt
 800f90e:	f102 0337 	addgt.w	r3, r2, #55	; 0x37
    *--q = i;
 800f912:	b2db      	uxtb	r3, r3
 800f914:	f801 3c01 	strb.w	r3, [r1, #-1]
 800f918:	1e48      	subs	r0, r1, #1
    l /= radix;
 800f91a:	462a      	mov	r2, r5
  } while ((ll /= radix) != 0);
 800f91c:	2d00      	cmp	r5, #0
 800f91e:	d1ed      	bne.n	800f8fc <chvprintf+0x3fc>
  i = (int)(p + MAX_FILLER - q);
 800f920:	f10d 0533 	add.w	r5, sp, #51	; 0x33
 800f924:	aa0a      	add	r2, sp, #40	; 0x28
 800f926:	eba5 0800 	sub.w	r8, r5, r0
 800f92a:	9203      	str	r2, [sp, #12]
 800f92c:	4440      	add	r0, r8
 800f92e:	e001      	b.n	800f934 <chvprintf+0x434>
 800f930:	f811 3b01 	ldrb.w	r3, [r1], #1
    *p++ = *q++;
 800f934:	f802 3b01 	strb.w	r3, [r2], #1
  while (--i);
 800f938:	4281      	cmp	r1, r0
 800f93a:	d1f9      	bne.n	800f930 <chvprintf+0x430>
 800f93c:	eba4 0408 	sub.w	r4, r4, r8
 800f940:	f108 33ff 	add.w	r3, r8, #4294967295
    if ((width -= i) < 0)
 800f944:	2c00      	cmp	r4, #0
 800f946:	9301      	str	r3, [sp, #4]
    s = tmpbuf;
 800f948:	9d03      	ldr	r5, [sp, #12]
    if ((width -= i) < 0)
 800f94a:	da94      	bge.n	800f876 <chvprintf+0x376>
    while (--i >= 0) {
 800f94c:	9b01      	ldr	r3, [sp, #4]
 800f94e:	2b00      	cmp	r3, #0
 800f950:	f6ff ade0 	blt.w	800f514 <chvprintf+0x14>
      width = 0;
 800f954:	2400      	movs	r4, #0
 800f956:	e7aa      	b.n	800f8ae <chvprintf+0x3ae>
    switch (c) {
 800f958:	46a9      	mov	r9, r5
    case 'O':
 800f95a:	f04f 0c08 	mov.w	ip, #8
 800f95e:	e7c8      	b.n	800f8f2 <chvprintf+0x3f2>
    switch (c) {
 800f960:	460b      	mov	r3, r1
 800f962:	46a9      	mov	r9, r5
      *p++ = c;
 800f964:	ad10      	add	r5, sp, #64	; 0x40
 800f966:	3c01      	subs	r4, #1
 800f968:	f805 3d18 	strb.w	r3, [r5, #-24]!
      break;
 800f96c:	2300      	movs	r3, #0
 800f96e:	9301      	str	r3, [sp, #4]
 800f970:	e77f      	b.n	800f872 <chvprintf+0x372>
      width = -width;
 800f972:	461c      	mov	r4, r3
    while (--i >= 0) {
 800f974:	9b01      	ldr	r3, [sp, #4]
 800f976:	2b00      	cmp	r3, #0
 800f978:	da99      	bge.n	800f8ae <chvprintf+0x3ae>
 800f97a:	e7aa      	b.n	800f8d2 <chvprintf+0x3d2>
      if (*s == '-' && filler == '0') {
 800f97c:	2f30      	cmp	r7, #48	; 0x30
 800f97e:	d185      	bne.n	800f88c <chvprintf+0x38c>
        chSequentialStreamPut(chp, (uint8_t)*s++);
 800f980:	4630      	mov	r0, r6
 800f982:	9302      	str	r3, [sp, #8]
 800f984:	4790      	blx	r2
 800f986:	9b01      	ldr	r3, [sp, #4]
 800f988:	6832      	ldr	r2, [r6, #0]
 800f98a:	3b01      	subs	r3, #1
 800f98c:	9301      	str	r3, [sp, #4]
 800f98e:	9b02      	ldr	r3, [sp, #8]
 800f990:	6892      	ldr	r2, [r2, #8]
 800f992:	f10b 0b01 	add.w	fp, fp, #1
 800f996:	3501      	adds	r5, #1
 800f998:	4698      	mov	r8, r3
 800f99a:	e77b      	b.n	800f894 <chvprintf+0x394>
    switch (c) {
 800f99c:	f04f 0c10 	mov.w	ip, #16
 800f9a0:	e7a7      	b.n	800f8f2 <chvprintf+0x3f2>
 800f9a2:	f10a 0204 	add.w	r2, sl, #4
        l = va_arg(ap, long);
 800f9a6:	f8da 1000 	ldr.w	r1, [sl]
 800f9aa:	4692      	mov	sl, r2
      if (l < 0) {
 800f9ac:	2900      	cmp	r1, #0
 800f9ae:	db62      	blt.n	800fa76 <chvprintf+0x576>
    p = tmpbuf;
 800f9b0:	ad0a      	add	r5, sp, #40	; 0x28
 800f9b2:	9503      	str	r5, [sp, #12]
  q = p + MAX_FILLER;
 800f9b4:	f105 020b 	add.w	r2, r5, #11
    i = (int)(l % radix);
 800f9b8:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 800fa5c <chvprintf+0x55c>
  q = p + MAX_FILLER;
 800f9bc:	4610      	mov	r0, r2
    i = (int)(l % radix);
 800f9be:	fba8 c301 	umull	ip, r3, r8, r1
 800f9c2:	08db      	lsrs	r3, r3, #3
 800f9c4:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
 800f9c8:	469c      	mov	ip, r3
 800f9ca:	eba1 034e 	sub.w	r3, r1, lr, lsl #1
    i += '0';
 800f9ce:	3330      	adds	r3, #48	; 0x30
    *--q = i;
 800f9d0:	b2db      	uxtb	r3, r3
  } while ((ll /= radix) != 0);
 800f9d2:	4661      	mov	r1, ip
    *--q = i;
 800f9d4:	f800 3d01 	strb.w	r3, [r0, #-1]!
  } while ((ll /= radix) != 0);
 800f9d8:	2900      	cmp	r1, #0
 800f9da:	d1f0      	bne.n	800f9be <chvprintf+0x4be>
  i = (int)(p + MAX_FILLER - q);
 800f9dc:	1a12      	subs	r2, r2, r0
 800f9de:	442a      	add	r2, r5
 800f9e0:	e001      	b.n	800f9e6 <chvprintf+0x4e6>
 800f9e2:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    *p++ = *q++;
 800f9e6:	f805 3b01 	strb.w	r3, [r5], #1
  while (--i);
 800f9ea:	42aa      	cmp	r2, r5
 800f9ec:	d1f9      	bne.n	800f9e2 <chvprintf+0x4e2>
 800f9ee:	9d03      	ldr	r5, [sp, #12]
 800f9f0:	1b52      	subs	r2, r2, r5
 800f9f2:	1e53      	subs	r3, r2, #1
 800f9f4:	1aa4      	subs	r4, r4, r2
 800f9f6:	9301      	str	r3, [sp, #4]
 800f9f8:	e73b      	b.n	800f872 <chvprintf+0x372>
 800f9fa:	4652      	mov	r2, sl
      if (is_long)
 800f9fc:	2b19      	cmp	r3, #25
 800f9fe:	f852 1b04 	ldr.w	r1, [r2], #4
 800fa02:	46a9      	mov	r9, r5
        l = va_arg(ap, int);
 800fa04:	bf88      	it	hi
 800fa06:	4692      	movhi	sl, r2
      if (is_long)
 800fa08:	d8d0      	bhi.n	800f9ac <chvprintf+0x4ac>
 800fa0a:	e7cc      	b.n	800f9a6 <chvprintf+0x4a6>
    switch (c) {
 800fa0c:	46a9      	mov	r9, r5
 800fa0e:	f04f 0c10 	mov.w	ip, #16
 800fa12:	e76e      	b.n	800f8f2 <chvprintf+0x3f2>
        *p++ = '-';
 800fa14:	232d      	movs	r3, #45	; 0x2d
 800fa16:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 800fa1a:	f10d 0329 	add.w	r3, sp, #41	; 0x29
 800fa1e:	9301      	str	r3, [sp, #4]
 800fa20:	ab0a      	add	r3, sp, #40	; 0x28
        f = -f;
 800fa22:	eeb1 8a48 	vneg.f32	s16, s16
 800fa26:	9303      	str	r3, [sp, #12]
 800fa28:	e689      	b.n	800f73e <chvprintf+0x23e>
 800fa2a:	490d      	ldr	r1, [pc, #52]	; (800fa60 <chvprintf+0x560>)
      if (precision == 0)
 800fa2c:	460d      	mov	r5, r1
 800fa2e:	f1b8 0f00 	cmp.w	r8, #0
 800fa32:	f43f ae5d 	beq.w	800f6f0 <chvprintf+0x1f0>
      for (p = s; *p && (--precision >= 0); p++)
 800fa36:	f108 38ff 	add.w	r8, r8, #4294967295
 800fa3a:	e65b      	b.n	800f6f4 <chvprintf+0x1f4>
  if ((precision == 0) || (precision > FLOAT_PRECISION))
 800fa3c:	ed9f 7b04 	vldr	d7, [pc, #16]	; 800fa50 <chvprintf+0x550>
 800fa40:	4d08      	ldr	r5, [pc, #32]	; (800fa64 <chvprintf+0x564>)
 800fa42:	9509      	str	r5, [sp, #36]	; 0x24
 800fa44:	ed8d 7b06 	vstr	d7, [sp, #24]
 800fa48:	e693      	b.n	800f772 <chvprintf+0x272>
 800fa4a:	bf00      	nop
 800fa4c:	f3af 8000 	nop.w
 800fa50:	00000000 	.word	0x00000000
 800fa54:	41cdcd65 	.word	0x41cdcd65
 800fa58:	08013d90 	.word	0x08013d90
 800fa5c:	cccccccd 	.word	0xcccccccd
 800fa60:	08013d80 	.word	0x08013d80
 800fa64:	05f5e100 	.word	0x05f5e100
      for (p = s; *p && (--precision >= 0); p++)
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	d1e4      	bne.n	800fa36 <chvprintf+0x536>
 800fa6c:	f04f 33ff 	mov.w	r3, #4294967295
 800fa70:	9301      	str	r3, [sp, #4]
      filler = ' ';
 800fa72:	2720      	movs	r7, #32
 800fa74:	e6fd      	b.n	800f872 <chvprintf+0x372>
        *p++ = '-';
 800fa76:	232d      	movs	r3, #45	; 0x2d
 800fa78:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 800fa7c:	ab0a      	add	r3, sp, #40	; 0x28
        l = -l;
 800fa7e:	4249      	negs	r1, r1
        *p++ = '-';
 800fa80:	f10d 0529 	add.w	r5, sp, #41	; 0x29
 800fa84:	9303      	str	r3, [sp, #12]
 800fa86:	e795      	b.n	800f9b4 <chvprintf+0x4b4>
      for (p = s; *p && (--precision >= 0); p++)
 800fa88:	f04f 33ff 	mov.w	r3, #4294967295
 800fa8c:	9301      	str	r3, [sp, #4]
      filler = ' ';
 800fa8e:	2720      	movs	r7, #32
 800fa90:	e6f1      	b.n	800f876 <chvprintf+0x376>
 800fa92:	bf00      	nop
	...

0800faa0 <hw_init_gpio>:
		STD_DUTY_CYCLE
};

void hw_init_gpio(void) {
	// GPIO clock enable
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 800faa0:	2101      	movs	r1, #1
void hw_init_gpio(void) {
 800faa2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 800faa6:	4608      	mov	r0, r1
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);

	// LEDs
	palSetPadMode(GPIOC, 4,	PAL_MODE_OUTPUT_PUSHPULL | PAL_STM32_OSPEED_HIGHEST);
 800faa8:	4c4b      	ldr	r4, [pc, #300]	; (800fbd8 <hw_init_gpio+0x138>)
	// GPIOC (ENABLE_GATE)
	palSetPadMode(GPIOC, 10, PAL_MODE_OUTPUT_PUSHPULL |	PAL_STM32_OSPEED_HIGHEST);
	DISABLE_GATE();

	// GPIOB (DCCAL)
	palSetPadMode(GPIOB, 12, PAL_MODE_OUTPUT_PUSHPULL |	PAL_STM32_OSPEED_HIGHEST);
 800faaa:	4e4c      	ldr	r6, [pc, #304]	; (800fbdc <hw_init_gpio+0x13c>)

	// GPIOA Configuration: Channel 1 to 3 as alternate function push-pull
	palSetPadMode(GPIOA, 8, PAL_MODE_ALTERNATE(GPIO_AF_TIM1)  |	PAL_STM32_OSPEED_HIGHEST | PAL_STM32_PUDR_FLOATING);
 800faac:	4d4c      	ldr	r5, [pc, #304]	; (800fbe0 <hw_init_gpio+0x140>)
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 800faae:	f002 f8df 	bl	8011c70 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 800fab2:	2101      	movs	r1, #1
 800fab4:	2002      	movs	r0, #2
 800fab6:	f002 f8db 	bl	8011c70 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 800faba:	2101      	movs	r1, #1
 800fabc:	2004      	movs	r0, #4
 800fabe:	f002 f8d7 	bl	8011c70 <RCC_AHB1PeriphClockCmd>
	LED_RED_OFF();
 800fac2:	2720      	movs	r7, #32
	palSetPadMode(GPIOC, 4,	PAL_MODE_OUTPUT_PUSHPULL | PAL_STM32_OSPEED_HIGHEST);
 800fac4:	4620      	mov	r0, r4
 800fac6:	2219      	movs	r2, #25
 800fac8:	2110      	movs	r1, #16
 800faca:	f7fe ff09 	bl	800e8e0 <_pal_lld_setgroupmode>
	DISABLE_GATE();
 800face:	f44f 6980 	mov.w	r9, #1024	; 0x400
	palSetPadMode(GPIOC, 5,	PAL_MODE_OUTPUT_PUSHPULL | PAL_STM32_OSPEED_HIGHEST);
 800fad2:	4620      	mov	r0, r4
 800fad4:	4639      	mov	r1, r7
	LED_GREEN_OFF();
 800fad6:	f04f 0810 	mov.w	r8, #16
	palSetPadMode(GPIOC, 5,	PAL_MODE_OUTPUT_PUSHPULL | PAL_STM32_OSPEED_HIGHEST);
 800fada:	2219      	movs	r2, #25
 800fadc:	f7fe ff00 	bl	800e8e0 <_pal_lld_setgroupmode>
	LED_RED_OFF();
 800fae0:	8367      	strh	r7, [r4, #26]
	palSetPadMode(GPIOC, 10, PAL_MODE_OUTPUT_PUSHPULL |	PAL_STM32_OSPEED_HIGHEST);
 800fae2:	4620      	mov	r0, r4
 800fae4:	4649      	mov	r1, r9
	LED_GREEN_OFF();
 800fae6:	f8a4 801a 	strh.w	r8, [r4, #26]
	palSetPadMode(GPIOC, 10, PAL_MODE_OUTPUT_PUSHPULL |	PAL_STM32_OSPEED_HIGHEST);
 800faea:	2219      	movs	r2, #25
 800faec:	f7fe fef8 	bl	800e8e0 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOB, 12, PAL_MODE_OUTPUT_PUSHPULL |	PAL_STM32_OSPEED_HIGHEST);
 800faf0:	4630      	mov	r0, r6
	DISABLE_GATE();
 800faf2:	f8a4 901a 	strh.w	r9, [r4, #26]
	palSetPadMode(GPIOB, 12, PAL_MODE_OUTPUT_PUSHPULL |	PAL_STM32_OSPEED_HIGHEST);
 800faf6:	2219      	movs	r2, #25
 800faf8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800fafc:	f7fe fef0 	bl	800e8e0 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOA, 8, PAL_MODE_ALTERNATE(GPIO_AF_TIM1)  |	PAL_STM32_OSPEED_HIGHEST | PAL_STM32_PUDR_FLOATING);
 800fb00:	4628      	mov	r0, r5
 800fb02:	229a      	movs	r2, #154	; 0x9a
 800fb04:	f44f 7180 	mov.w	r1, #256	; 0x100
 800fb08:	f7fe feea 	bl	800e8e0 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOA, 9, PAL_MODE_ALTERNATE(GPIO_AF_TIM1)  |	PAL_STM32_OSPEED_HIGHEST | PAL_STM32_PUDR_FLOATING);
 800fb0c:	4628      	mov	r0, r5
 800fb0e:	229a      	movs	r2, #154	; 0x9a
 800fb10:	f44f 7100 	mov.w	r1, #512	; 0x200
 800fb14:	f7fe fee4 	bl	800e8e0 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOA, 10, PAL_MODE_ALTERNATE(GPIO_AF_TIM1) |	PAL_STM32_OSPEED_HIGHEST | PAL_STM32_PUDR_FLOATING);
 800fb18:	4649      	mov	r1, r9
 800fb1a:	4628      	mov	r0, r5
 800fb1c:	229a      	movs	r2, #154	; 0x9a
 800fb1e:	f7fe fedf 	bl	800e8e0 <_pal_lld_setgroupmode>

	palSetPadMode(GPIOB, 13, PAL_MODE_ALTERNATE(GPIO_AF_TIM1) |	PAL_STM32_OSPEED_HIGHEST | PAL_STM32_PUDR_FLOATING);
 800fb22:	4630      	mov	r0, r6
 800fb24:	229a      	movs	r2, #154	; 0x9a
 800fb26:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800fb2a:	f7fe fed9 	bl	800e8e0 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOB, 14, PAL_MODE_ALTERNATE(GPIO_AF_TIM1) |	PAL_STM32_OSPEED_HIGHEST | PAL_STM32_PUDR_FLOATING);
 800fb2e:	4630      	mov	r0, r6
 800fb30:	229a      	movs	r2, #154	; 0x9a
 800fb32:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800fb36:	f7fe fed3 	bl	800e8e0 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOB, 15, PAL_MODE_ALTERNATE(GPIO_AF_TIM1) |	PAL_STM32_OSPEED_HIGHEST | PAL_STM32_PUDR_FLOATING);
 800fb3a:	4630      	mov	r0, r6
 800fb3c:	229a      	movs	r2, #154	; 0x9a
 800fb3e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800fb42:	f7fe fecd 	bl	800e8e0 <_pal_lld_setgroupmode>
	//palSetPadMode(HW_HALL_ENC_GPIO1, HW_HALL_ENC_PIN1, PAL_MODE_INPUT_PULLUP);
	//palSetPadMode(HW_HALL_ENC_GPIO2, HW_HALL_ENC_PIN2, PAL_MODE_INPUT_PULLUP);
	//palSetPadMode(HW_HALL_ENC_GPIO3, HW_HALL_ENC_PIN3, PAL_MODE_INPUT_PULLUP);

	// Fault pin
	palSetPadMode(GPIOC, 12, PAL_MODE_INPUT_PULLUP);
 800fb46:	463a      	mov	r2, r7
 800fb48:	4620      	mov	r0, r4
 800fb4a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800fb4e:	f7fe fec7 	bl	800e8e0 <_pal_lld_setgroupmode>

	// ADC Pins
	palSetPadMode(GPIOA, 0, PAL_MODE_INPUT_ANALOG);
 800fb52:	4628      	mov	r0, r5
 800fb54:	2203      	movs	r2, #3
 800fb56:	2101      	movs	r1, #1
 800fb58:	f7fe fec2 	bl	800e8e0 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOA, 1, PAL_MODE_INPUT_ANALOG);
 800fb5c:	4628      	mov	r0, r5
 800fb5e:	2203      	movs	r2, #3
 800fb60:	2102      	movs	r1, #2
 800fb62:	f7fe febd 	bl	800e8e0 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOA, 2, PAL_MODE_INPUT_ANALOG);
 800fb66:	4628      	mov	r0, r5
 800fb68:	2203      	movs	r2, #3
 800fb6a:	2104      	movs	r1, #4
 800fb6c:	f7fe feb8 	bl	800e8e0 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOA, 3, PAL_MODE_INPUT_ANALOG);
 800fb70:	4628      	mov	r0, r5
 800fb72:	2203      	movs	r2, #3
 800fb74:	2108      	movs	r1, #8
 800fb76:	f7fe feb3 	bl	800e8e0 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOA, 4, PAL_MODE_INPUT_ANALOG);
 800fb7a:	4641      	mov	r1, r8
 800fb7c:	4628      	mov	r0, r5
 800fb7e:	2203      	movs	r2, #3
 800fb80:	f7fe feae 	bl	800e8e0 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOA, 5, PAL_MODE_INPUT_ANALOG);
 800fb84:	4639      	mov	r1, r7
 800fb86:	4628      	mov	r0, r5
 800fb88:	2203      	movs	r2, #3
 800fb8a:	f7fe fea9 	bl	800e8e0 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOA, 6, PAL_MODE_INPUT_ANALOG);
 800fb8e:	4628      	mov	r0, r5
 800fb90:	2203      	movs	r2, #3
 800fb92:	2140      	movs	r1, #64	; 0x40
 800fb94:	f7fe fea4 	bl	800e8e0 <_pal_lld_setgroupmode>

	palSetPadMode(GPIOB, 0, PAL_MODE_INPUT_ANALOG);
 800fb98:	4630      	mov	r0, r6
 800fb9a:	2203      	movs	r2, #3
 800fb9c:	2101      	movs	r1, #1
 800fb9e:	f7fe fe9f 	bl	800e8e0 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOB, 1, PAL_MODE_INPUT_ANALOG);
 800fba2:	4630      	mov	r0, r6
 800fba4:	2203      	movs	r2, #3
 800fba6:	2102      	movs	r1, #2
 800fba8:	f7fe fe9a 	bl	800e8e0 <_pal_lld_setgroupmode>

	palSetPadMode(GPIOC, 0, PAL_MODE_INPUT_ANALOG);
 800fbac:	4620      	mov	r0, r4
 800fbae:	2203      	movs	r2, #3
 800fbb0:	2101      	movs	r1, #1
 800fbb2:	f7fe fe95 	bl	800e8e0 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOC, 1, PAL_MODE_INPUT_ANALOG);
 800fbb6:	4620      	mov	r0, r4
 800fbb8:	2203      	movs	r2, #3
 800fbba:	2102      	movs	r1, #2
 800fbbc:	f7fe fe90 	bl	800e8e0 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOC, 2, PAL_MODE_INPUT_ANALOG);
 800fbc0:	4620      	mov	r0, r4
 800fbc2:	2203      	movs	r2, #3
 800fbc4:	2104      	movs	r1, #4
 800fbc6:	f7fe fe8b 	bl	800e8e0 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOC, 3, PAL_MODE_INPUT_ANALOG);
 800fbca:	4620      	mov	r0, r4
 800fbcc:	2203      	movs	r2, #3
 800fbce:	2108      	movs	r1, #8
}
 800fbd0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	palSetPadMode(GPIOC, 3, PAL_MODE_INPUT_ANALOG);
 800fbd4:	f7fe be84 	b.w	800e8e0 <_pal_lld_setgroupmode>
 800fbd8:	40020800 	.word	0x40020800
 800fbdc:	40020400 	.word	0x40020400
 800fbe0:	40020000 	.word	0x40020000
	...

0800fbf0 <hw_setup_adc_channels>:

void hw_setup_adc_channels(void) {
 800fbf0:	b570      	push	{r4, r5, r6, lr}
	// ADC1 regular channels
	ADC_RegularChannelConfig(ADC1, ADC_Channel_0, 1, ADC_SampleTime_15Cycles);
 800fbf2:	4c27      	ldr	r4, [pc, #156]	; (800fc90 <hw_setup_adc_channels+0xa0>)
	ADC_RegularChannelConfig(ADC1, ADC_Channel_8, 2, ADC_SampleTime_15Cycles);
	ADC_RegularChannelConfig(ADC1, ADC_Channel_Vrefint, 3, ADC_SampleTime_15Cycles);
	ADC_RegularChannelConfig(ADC1, ADC_Channel_4, 4, ADC_SampleTime_15Cycles);

	// ADC2 regular channels
	ADC_RegularChannelConfig(ADC2, ADC_Channel_1, 1, ADC_SampleTime_15Cycles);
 800fbf4:	4d27      	ldr	r5, [pc, #156]	; (800fc94 <hw_setup_adc_channels+0xa4>)
	ADC_RegularChannelConfig(ADC1, ADC_Channel_0, 1, ADC_SampleTime_15Cycles);
 800fbf6:	2301      	movs	r3, #1
 800fbf8:	4620      	mov	r0, r4
 800fbfa:	461a      	mov	r2, r3
 800fbfc:	2100      	movs	r1, #0
 800fbfe:	f001 fe6f 	bl	80118e0 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_8, 2, ADC_SampleTime_15Cycles);
 800fc02:	4620      	mov	r0, r4
 800fc04:	2301      	movs	r3, #1
 800fc06:	2202      	movs	r2, #2
 800fc08:	2108      	movs	r1, #8
 800fc0a:	f001 fe69 	bl	80118e0 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_Vrefint, 3, ADC_SampleTime_15Cycles);
 800fc0e:	4620      	mov	r0, r4
 800fc10:	2301      	movs	r3, #1
 800fc12:	2203      	movs	r2, #3
 800fc14:	2111      	movs	r1, #17
 800fc16:	f001 fe63 	bl	80118e0 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_4, 4, ADC_SampleTime_15Cycles);
 800fc1a:	2204      	movs	r2, #4
 800fc1c:	4620      	mov	r0, r4
 800fc1e:	4611      	mov	r1, r2
 800fc20:	2301      	movs	r3, #1
 800fc22:	f001 fe5d 	bl	80118e0 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC2, ADC_Channel_1, 1, ADC_SampleTime_15Cycles);
 800fc26:	2301      	movs	r3, #1
 800fc28:	4628      	mov	r0, r5
 800fc2a:	461a      	mov	r2, r3
 800fc2c:	4619      	mov	r1, r3
 800fc2e:	f001 fe57 	bl	80118e0 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC2, ADC_Channel_9, 2, ADC_SampleTime_15Cycles);
 800fc32:	4628      	mov	r0, r5
 800fc34:	2301      	movs	r3, #1
 800fc36:	2202      	movs	r2, #2
 800fc38:	2109      	movs	r1, #9
 800fc3a:	f001 fe51 	bl	80118e0 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC2, ADC_Channel_6, 3, ADC_SampleTime_15Cycles);
 800fc3e:	4628      	mov	r0, r5
 800fc40:	2301      	movs	r3, #1
 800fc42:	2203      	movs	r2, #3
 800fc44:	2106      	movs	r1, #6
 800fc46:	f001 fe4b 	bl	80118e0 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC2, ADC_Channel_5, 4, ADC_SampleTime_15Cycles);
 800fc4a:	4628      	mov	r0, r5
 800fc4c:	2301      	movs	r3, #1
 800fc4e:	2204      	movs	r2, #4
 800fc50:	2105      	movs	r1, #5
 800fc52:	f001 fe45 	bl	80118e0 <ADC_RegularChannelConfig>

	// ADC3 regular channels
	ADC_RegularChannelConfig(ADC3, ADC_Channel_2, 1, ADC_SampleTime_15Cycles);
 800fc56:	f504 7400 	add.w	r4, r4, #512	; 0x200
 800fc5a:	2301      	movs	r3, #1
 800fc5c:	4620      	mov	r0, r4
 800fc5e:	461a      	mov	r2, r3
 800fc60:	2102      	movs	r1, #2
 800fc62:	f001 fe3d 	bl	80118e0 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC3, ADC_Channel_3, 2, ADC_SampleTime_15Cycles);
 800fc66:	4620      	mov	r0, r4
 800fc68:	2301      	movs	r3, #1
 800fc6a:	2202      	movs	r2, #2
 800fc6c:	2103      	movs	r1, #3
 800fc6e:	f001 fe37 	bl	80118e0 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC3, ADC_Channel_12, 3, ADC_SampleTime_15Cycles);
 800fc72:	4620      	mov	r0, r4
 800fc74:	2301      	movs	r3, #1
 800fc76:	2203      	movs	r2, #3
 800fc78:	210c      	movs	r1, #12
 800fc7a:	f001 fe31 	bl	80118e0 <ADC_RegularChannelConfig>
	ADC_RegularChannelConfig(ADC3, ADC_Channel_3, 4, ADC_SampleTime_15Cycles);
 800fc7e:	4620      	mov	r0, r4
 800fc80:	2301      	movs	r3, #1
 800fc82:	2204      	movs	r2, #4
 800fc84:	2103      	movs	r1, #3
	// Injected channels
	//ADC_InjectedChannelConfig(ADC1, ADC_Channel_9, 1, ADC_SampleTime_15Cycles);
	//ADC_InjectedChannelConfig(ADC1, ADC_Channel_8, 2, ADC_SampleTime_15Cycles);
	//ADC_InjectedChannelConfig(ADC2, ADC_Channel_8, 1, ADC_SampleTime_15Cycles);
	//ADC_InjectedChannelConfig(ADC2, ADC_Channel_9, 2, ADC_SampleTime_15Cycles);
}
 800fc86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ADC_RegularChannelConfig(ADC3, ADC_Channel_3, 4, ADC_SampleTime_15Cycles);
 800fc8a:	f001 be29 	b.w	80118e0 <ADC_RegularChannelConfig>
 800fc8e:	bf00      	nop
 800fc90:	40012000 	.word	0x40012000
 800fc94:	40012100 	.word	0x40012100
	...

0800fca0 <conf_general_init>:
uint16_t VirtAddVarTab[NB_OF_VAR];

// Private variables
mcConfiguration_t mcconf, mcconf_old;

void conf_general_init(void) {
 800fca0:	b508      	push	{r3, lr}
	// First, make sure that all relevant virtual addresses are assigned for page swapping.
	memset(VirtAddVarTab, 0, sizeof(VirtAddVarTab));
 800fca2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800fca6:	2100      	movs	r1, #0
 800fca8:	4810      	ldr	r0, [pc, #64]	; (800fcec <conf_general_init+0x4c>)
 800fcaa:	f003 fed1 	bl	8013a50 <memset>
 800fcae:	4a10      	ldr	r2, [pc, #64]	; (800fcf0 <conf_general_init+0x50>)
 800fcb0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800fcb4:	f102 01a0 	add.w	r1, r2, #160	; 0xa0

	int ind = 0;
	for (unsigned int i = 0;i < (sizeof(app_configuration) / 2);i++)
	{
		VirtAddVarTab[ind++] = EEPROM_BASE_MCCONF + i;
 800fcb8:	f822 3f02 	strh.w	r3, [r2, #2]!
 800fcbc:	3301      	adds	r3, #1
	for (unsigned int i = 0;i < (sizeof(app_configuration) / 2);i++)
 800fcbe:	428a      	cmp	r2, r1
 800fcc0:	b29b      	uxth	r3, r3
 800fcc2:	d1f9      	bne.n	800fcb8 <conf_general_init+0x18>
 800fcc4:	4a0b      	ldr	r2, [pc, #44]	; (800fcf4 <conf_general_init+0x54>)
 800fcc6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800fcca:	f102 01a0 	add.w	r1, r2, #160	; 0xa0
	}

	for (unsigned int i = 0;i < (sizeof(app_configuration) / 2);i++) 
	{
		VirtAddVarTab[ind++] = EEPROM_BASE_APPCONF + i;
 800fcce:	f822 3f02 	strh.w	r3, [r2, #2]!
 800fcd2:	3301      	adds	r3, #1
	for (unsigned int i = 0;i < (sizeof(app_configuration) / 2);i++) 
 800fcd4:	4291      	cmp	r1, r2
 800fcd6:	b29b      	uxth	r3, r3
 800fcd8:	d1f9      	bne.n	800fcce <conf_general_init+0x2e>
	}

	FLASH_Unlock();
 800fcda:	f001 ff19 	bl	8011b10 <FLASH_Unlock>
	FLASH_ClearFlag(FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR);
 800fcde:	20f2      	movs	r0, #242	; 0xf2
 800fce0:	f001 ff26 	bl	8011b30 <FLASH_ClearFlag>
	EE_Init();
}
 800fce4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	EE_Init();
 800fce8:	f001 bb42 	b.w	8011370 <EE_Init>
 800fcec:	20001344 	.word	0x20001344
 800fcf0:	20001342 	.word	0x20001342
 800fcf4:	200013e2 	.word	0x200013e2
	...

0800fd00 <conf_general_get_default_mc_configuration>:
 * Load the compiled default mcConfiguration_t.
 *
 * @param conf
 * A pointer to store the default configuration to.
 */
void conf_general_get_default_mc_configuration(mcConfiguration_t *conf) {
 800fd00:	b570      	push	{r4, r5, r6, lr}
	memset(conf, 0, sizeof(mcConfiguration_t));
 800fd02:	22d4      	movs	r2, #212	; 0xd4
 800fd04:	2100      	movs	r1, #0
 800fd06:	f003 fea3 	bl	8013a50 <memset>
 800fd0a:	4603      	mov	r3, r0

	conf->l_current_max = MCCONF_L_CURRENT_MAX;
	conf->l_current_min = MCCONF_L_CURRENT_MIN;
	conf->l_in_current_max = MCCONF_L_IN_CURRENT_MAX;
	conf->l_in_current_min = MCCONF_L_IN_CURRENT_MIN;
	conf->l_abs_current_max = MCCONF_L_MAX_ABS_CURRENT;
 800fd0c:	4c18      	ldr	r4, [pc, #96]	; (800fd70 <conf_general_get_default_mc_configuration+0x70>)
	conf->l_min_erpm = MCCONF_L_RPM_MIN;
	conf->l_max_erpm = MCCONF_L_RPM_MAX;
 800fd0e:	4919      	ldr	r1, [pc, #100]	; (800fd74 <conf_general_get_default_mc_configuration+0x74>)
	conf->l_min_erpm = MCCONF_L_RPM_MIN;
 800fd10:	4819      	ldr	r0, [pc, #100]	; (800fd78 <conf_general_get_default_mc_configuration+0x78>)
	conf->l_max_erpm_fbrake = MCCONF_L_CURR_MAX_RPM_FBRAKE;
 800fd12:	4a1a      	ldr	r2, [pc, #104]	; (800fd7c <conf_general_get_default_mc_configuration+0x7c>)
	conf->l_abs_current_max = MCCONF_L_MAX_ABS_CURRENT;
 800fd14:	621c      	str	r4, [r3, #32]
	conf->l_max_erpm = MCCONF_L_RPM_MAX;
 800fd16:	6299      	str	r1, [r3, #40]	; 0x28
	conf->l_max_erpm_fbrake_cc = MCCONF_L_CURR_MAX_RPM_FBRAKE_CC;
	conf->l_min_vin = MCCONF_L_MIN_VOLTAGE;
	conf->l_max_vin = MCCONF_L_MAX_VOLTAGE;
 800fd18:	4c19      	ldr	r4, [pc, #100]	; (800fd80 <conf_general_get_default_mc_configuration+0x80>)
	conf->l_temp_fet_start = MCCONF_L_LIM_TEMP_FET_START;
	conf->l_temp_fet_end = MCCONF_L_LIM_TEMP_FET_END;
	conf->l_temp_motor_start = MCCONF_L_LIM_TEMP_MOTOR_START;
	conf->l_temp_motor_end = MCCONF_L_LIM_TEMP_MOTOR_END;
	conf->l_min_duty = MCCONF_L_MIN_DUTY;
	conf->l_max_duty = MCCONF_L_MAX_DUTY;
 800fd1a:	491a      	ldr	r1, [pc, #104]	; (800fd84 <conf_general_get_default_mc_configuration+0x84>)
	conf->l_max_erpm_fbrake_cc = MCCONF_L_CURR_MAX_RPM_FBRAKE_CC;
 800fd1c:	4d1a      	ldr	r5, [pc, #104]	; (800fd88 <conf_general_get_default_mc_configuration+0x88>)
	conf->l_min_erpm = MCCONF_L_RPM_MIN;
 800fd1e:	6258      	str	r0, [r3, #36]	; 0x24
	conf->l_max_erpm_fbrake = MCCONF_L_CURR_MAX_RPM_FBRAKE;
 800fd20:	631a      	str	r2, [r3, #48]	; 0x30
	conf->l_min_duty = MCCONF_L_MIN_DUTY;
 800fd22:	481a      	ldr	r0, [pc, #104]	; (800fd8c <conf_general_get_default_mc_configuration+0x8c>)
	conf->l_current_max = MCCONF_L_CURRENT_MAX;
 800fd24:	4a1a      	ldr	r2, [pc, #104]	; (800fd90 <conf_general_get_default_mc_configuration+0x90>)
	conf->l_max_vin = MCCONF_L_MAX_VOLTAGE;
 800fd26:	63dc      	str	r4, [r3, #60]	; 0x3c
	conf->l_max_duty = MCCONF_L_MAX_DUTY;
 800fd28:	6619      	str	r1, [r3, #96]	; 0x60
	conf->l_battery_cut_start = MCCONF_L_BATTERY_CUT_START;
 800fd2a:	4c1a      	ldr	r4, [pc, #104]	; (800fd94 <conf_general_get_default_mc_configuration+0x94>)
	conf->l_current_min = MCCONF_L_CURRENT_MIN;
 800fd2c:	4e1a      	ldr	r6, [pc, #104]	; (800fd98 <conf_general_get_default_mc_configuration+0x98>)
	conf->l_max_erpm_fbrake_cc = MCCONF_L_CURR_MAX_RPM_FBRAKE_CC;
 800fd2e:	635d      	str	r5, [r3, #52]	; 0x34
	conf->pwm_mode = MCCONF_PWM_MODE;
 800fd30:	2101      	movs	r1, #1
	conf->l_in_current_min = MCCONF_L_IN_CURRENT_MIN;
 800fd32:	4d1a      	ldr	r5, [pc, #104]	; (800fd9c <conf_general_get_default_mc_configuration+0x9c>)
	conf->l_battery_cut_start = MCCONF_L_BATTERY_CUT_START;
 800fd34:	641c      	str	r4, [r3, #64]	; 0x40
	conf->l_min_duty = MCCONF_L_MIN_DUTY;
 800fd36:	65d8      	str	r0, [r3, #92]	; 0x5c
	conf->l_temp_fet_start = MCCONF_L_LIM_TEMP_FET_START;
 800fd38:	4c19      	ldr	r4, [pc, #100]	; (800fda0 <conf_general_get_default_mc_configuration+0xa0>)
	conf->l_temp_fet_end = MCCONF_L_LIM_TEMP_FET_END;
 800fd3a:	481a      	ldr	r0, [pc, #104]	; (800fda4 <conf_general_get_default_mc_configuration+0xa4>)
	conf->pwm_mode = MCCONF_PWM_MODE;
 800fd3c:	7299      	strb	r1, [r3, #10]
	conf->l_slow_abs_current = MCCONF_L_SLOW_ABS_OVERCURRENT;
 800fd3e:	f883 1048 	strb.w	r1, [r3, #72]	; 0x48
	conf->l_current_max = MCCONF_L_CURRENT_MAX;
 800fd42:	611a      	str	r2, [r3, #16]
	conf->comm_mode = MCCONF_COMM_MODE;
 800fd44:	2100      	movs	r1, #0
	conf->l_in_current_max = MCCONF_L_IN_CURRENT_MAX;
 800fd46:	619a      	str	r2, [r3, #24]

	conf->lo_current_max = conf->l_current_max;
 800fd48:	66da      	str	r2, [r3, #108]	; 0x6c
	conf->lo_current_min = conf->l_current_min;
	conf->lo_in_current_max = conf->l_in_current_max;
 800fd4a:	675a      	str	r2, [r3, #116]	; 0x74
	conf->l_min_vin = MCCONF_L_MIN_VOLTAGE;
 800fd4c:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
	conf->comm_mode = MCCONF_COMM_MODE;
 800fd50:	72d9      	strb	r1, [r3, #11]
	conf->motor_type = MCCONF_DEFAULT_MOTOR_TYPE;
 800fd52:	7319      	strb	r1, [r3, #12]
	conf->sensor_mode = MCCONF_SENSOR_MODE;
 800fd54:	7359      	strb	r1, [r3, #13]
	conf->m_fault_stop_time_ms = MCCONF_M_FAULT_STOP_TIME;
	conf->m_duty_ramp_step = MCCONF_M_RAMP_STEP;
	conf->m_duty_ramp_step_rpm_lim = MCCONF_M_RAMP_STEP_RPM_LIM;
	conf->m_current_backoff_gain = MCCONF_M_CURRENT_BACKOFF_GAIN;
	conf->m_encoder_counts = MCCONF_M_ENCODER_COUNTS;*/
	conf->m_sensor_port_mode = MCCONF_M_SENSOR_PORT_MODE;
 800fd56:	f883 1084 	strb.w	r1, [r3, #132]	; 0x84
	conf->l_current_min = MCCONF_L_CURRENT_MIN;
 800fd5a:	615e      	str	r6, [r3, #20]
	conf->lo_current_min = conf->l_current_min;
 800fd5c:	671e      	str	r6, [r3, #112]	; 0x70
	conf->l_in_current_min = MCCONF_L_IN_CURRENT_MIN;
 800fd5e:	61dd      	str	r5, [r3, #28]
	conf->lo_in_current_min = conf->l_in_current_min;
 800fd60:	679d      	str	r5, [r3, #120]	; 0x78
	conf->l_min_vin = MCCONF_L_MIN_VOLTAGE;
 800fd62:	639a      	str	r2, [r3, #56]	; 0x38
	conf->l_battery_cut_end = MCCONF_L_BATTERY_CUT_END;
 800fd64:	645a      	str	r2, [r3, #68]	; 0x44
	conf->l_temp_fet_start = MCCONF_L_LIM_TEMP_FET_START;
 800fd66:	64dc      	str	r4, [r3, #76]	; 0x4c
	conf->l_temp_motor_start = MCCONF_L_LIM_TEMP_MOTOR_START;
 800fd68:	655c      	str	r4, [r3, #84]	; 0x54
	conf->l_temp_fet_end = MCCONF_L_LIM_TEMP_FET_END;
 800fd6a:	6518      	str	r0, [r3, #80]	; 0x50
	conf->l_temp_motor_end = MCCONF_L_LIM_TEMP_MOTOR_END;
 800fd6c:	6598      	str	r0, [r3, #88]	; 0x58
}
 800fd6e:	bd70      	pop	{r4, r5, r6, pc}
 800fd70:	43020000 	.word	0x43020000
 800fd74:	47c35000 	.word	0x47c35000
 800fd78:	c7c35000 	.word	0xc7c35000
 800fd7c:	43960000 	.word	0x43960000
 800fd80:	42640000 	.word	0x42640000
 800fd84:	3f733333 	.word	0x3f733333
 800fd88:	44bb8000 	.word	0x44bb8000
 800fd8c:	3ba3d70a 	.word	0x3ba3d70a
 800fd90:	42700000 	.word	0x42700000
 800fd94:	41200000 	.word	0x41200000
 800fd98:	c2700000 	.word	0xc2700000
 800fd9c:	c2200000 	.word	0xc2200000
 800fda0:	42a00000 	.word	0x42a00000
 800fda4:	42c80000 	.word	0x42c80000
	...

0800fdb0 <conf_general_read_mc_configuration>:
 *
 * @param conf
 * A pointer to a mcConfiguration_t struct to write the read configuration to.
 */
void conf_general_read_mc_configuration(mcConfiguration_t *conf)
{
 800fdb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fdb2:	4607      	mov	r7, r0
 800fdb4:	b083      	sub	sp, #12
 800fdb6:	1c45      	adds	r5, r0, #1
 800fdb8:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
	bool is_ok = true;
	uint8_t *conf_addr = (uint8_t*)conf;
	uint16_t var;

	for (unsigned int i = 0;i < (sizeof(mcConfiguration_t) / 2);i++) 
 800fdbc:	f240 4652 	movw	r6, #1106	; 0x452
 800fdc0:	e009      	b.n	800fdd6 <conf_general_read_mc_configuration+0x26>
	{
		if (EE_ReadVariable(EEPROM_BASE_MCCONF + i, &var) == 0) 
		{
			conf_addr[2 * i] = (var >> 8) & 0xFF;
 800fdc2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	for (unsigned int i = 0;i < (sizeof(mcConfiguration_t) / 2);i++) 
 800fdc6:	42b4      	cmp	r4, r6
			conf_addr[2 * i] = (var >> 8) & 0xFF;
 800fdc8:	ea4f 2213 	mov.w	r2, r3, lsr #8
 800fdcc:	f805 2c01 	strb.w	r2, [r5, #-1]
			conf_addr[2 * i + 1] = var & 0xFF;
 800fdd0:	f805 3b02 	strb.w	r3, [r5], #2
	for (unsigned int i = 0;i < (sizeof(mcConfiguration_t) / 2);i++) 
 800fdd4:	d00b      	beq.n	800fdee <conf_general_read_mc_configuration+0x3e>
		if (EE_ReadVariable(EEPROM_BASE_MCCONF + i, &var) == 0) 
 800fdd6:	4620      	mov	r0, r4
 800fdd8:	f10d 0106 	add.w	r1, sp, #6
 800fddc:	f001 fa90 	bl	8011300 <EE_ReadVariable>
 800fde0:	3401      	adds	r4, #1
 800fde2:	b2a4      	uxth	r4, r4
 800fde4:	2800      	cmp	r0, #0
 800fde6:	d0ec      	beq.n	800fdc2 <conf_general_read_mc_configuration+0x12>


	if (!is_ok) 
	{
		//chvprintf(&SD1, (uint8_t *)"conf_ok\r\n");
		conf_general_get_default_mc_configuration(conf);
 800fde8:	4638      	mov	r0, r7
 800fdea:	f7ff ff89 	bl	800fd00 <conf_general_get_default_mc_configuration>
	}

	
}
 800fdee:	b003      	add	sp, #12
 800fdf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fdf2:	bf00      	nop
	...

0800fe00 <timer_thread>:
	WWDG_SetCounter(100);

}


static THD_FUNCTION(timer_thread, arg) {
 800fe00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ch.rlist.r_current->p_name = name;
 800fe04:	4b79      	ldr	r3, [pc, #484]	; (800ffec <timer_thread+0x1ec>)
 800fe06:	4a7a      	ldr	r2, [pc, #488]	; (800fff0 <timer_thread+0x1f0>)
 800fe08:	699b      	ldr	r3, [r3, #24]
 800fe0a:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8010028 <timer_thread+0x228>
 800fe0e:	f8df 821c 	ldr.w	r8, [pc, #540]	; 801002c <timer_thread+0x22c>
 800fe12:	4f78      	ldr	r7, [pc, #480]	; (800fff4 <timer_thread+0x1f4>)

			print_m = smc1.angle *100;
			//print_m = sinf(smc1.ThetaCal)*100;
			//print_m = print_l - print_k ;

			Usart1_printf(&SD1, (uint8_t *)"%d	%d	",print_a,print_b);
 800fe14:	4c78      	ldr	r4, [pc, #480]	; (800fff8 <timer_thread+0x1f8>)
static THD_FUNCTION(timer_thread, arg) {
 800fe16:	ed2d 8b06 	vpush	{d8-d10}
		MeasSensorValue.InputVoltage = GET_INPUT_VOLTAGE();
 800fe1a:	eddf 9a78 	vldr	s19, [pc, #480]	; 800fffc <timer_thread+0x1fc>
 800fe1e:	ed9f 9a78 	vldr	s18, [pc, #480]	; 8010000 <timer_thread+0x200>
		MeasSensorValue.MotorTemp = NTC_TEMP(ADC_IND_TEMP_PCB);
 800fe22:	eddf 8a78 	vldr	s17, [pc, #480]	; 8010004 <timer_thread+0x204>
 800fe26:	ed9f 8a78 	vldr	s16, [pc, #480]	; 8010008 <timer_thread+0x208>
 800fe2a:	619a      	str	r2, [r3, #24]
static THD_FUNCTION(timer_thread, arg) {
 800fe2c:	b089      	sub	sp, #36	; 0x24
		chThdSleepMilliseconds(100);
 800fe2e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800fe32:	f7fd f995 	bl	800d160 <chThdSleep>
		MeasSensorValue.MotorTemp = NTC_TEMP(ADC_IND_TEMP_PCB);
 800fe36:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 800fe3a:	eddf aa74 	vldr	s21, [pc, #464]	; 801000c <timer_thread+0x20c>
 800fe3e:	ee07 3a10 	vmov	s14, r3
 800fe42:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		MeasSensorValue.InputVoltage = GET_INPUT_VOLTAGE();
 800fe46:	f8b8 3010 	ldrh.w	r3, [r8, #16]
		MeasSensorValue.MotorTemp = NTC_TEMP(ADC_IND_TEMP_PCB);
 800fe4a:	ee88 0a87 	vdiv.f32	s0, s17, s14
		MeasSensorValue.InputVoltage = GET_INPUT_VOLTAGE();
 800fe4e:	ee07 3a90 	vmov	s15, r3
 800fe52:	eef8 7a67 	vcvt.f32.u32	s15, s15
		MeasSensorValue.MotorTemp = NTC_TEMP(ADC_IND_TEMP_PCB);
 800fe56:	ee30 0a48 	vsub.f32	s0, s0, s16
		MeasSensorValue.InputVoltage = GET_INPUT_VOLTAGE();
 800fe5a:	ee67 7aa9 	vmul.f32	s15, s15, s19
		MeasSensorValue.MotorTemp = NTC_TEMP(ADC_IND_TEMP_PCB);
 800fe5e:	ee80 0a08 	vdiv.f32	s0, s0, s16
		MeasSensorValue.InputVoltage = GET_INPUT_VOLTAGE();
 800fe62:	ee67 7a89 	vmul.f32	s15, s15, s18
 800fe66:	edc9 7a00 	vstr	s15, [r9]
		MeasSensorValue.MotorTemp = NTC_TEMP(ADC_IND_TEMP_PCB);
 800fe6a:	f002 fb29 	bl	80124c0 <logf>
 800fe6e:	ee80 0a2a 	vdiv.f32	s0, s0, s21
			print_l = smc1.Theta *100;
 800fe72:	4b67      	ldr	r3, [pc, #412]	; (8010010 <timer_thread+0x210>)
			Usart1_printf(&SD1, (uint8_t *)"%d	%d	",print_a,print_b);
 800fe74:	4967      	ldr	r1, [pc, #412]	; (8010014 <timer_thread+0x214>)
 800fe76:	4620      	mov	r0, r4
			print_c = ParkParm.qIalpha * 100;
 800fe78:	eddf 7a67 	vldr	s15, [pc, #412]	; 8010018 <timer_thread+0x218>
			print_d = ParkParm.qIbeta * 100;
 800fe7c:	edd7 5a06 	vldr	s11, [r7, #24]
			print_c = ParkParm.qIalpha * 100;
 800fe80:	edd7 0a05 	vldr	s1, [r7, #20]
		MeasSensorValue.MotorTemp = NTC_TEMP(ADC_IND_TEMP_PCB);
 800fe84:	ed9f 5a65 	vldr	s10, [pc, #404]	; 801001c <timer_thread+0x21c>
			print_b = ParkParm.qIb * 100;
 800fe88:	ed97 6a04 	vldr	s12, [r7, #16]
			print_a = ParkParm.qIa * 100;
 800fe8c:	edd7 6a03 	vldr	s13, [r7, #12]
			print_e = ParkParm.qId * 100;
 800fe90:	edd7 1a07 	vldr	s3, [r7, #28]
			print_l = smc1.Theta *100;
 800fe94:	ed93 aa2e 	vldr	s20, [r3, #184]	; 0xb8
			print_m = smc1.angle *100;
 800fe98:	ed93 7a32 	vldr	s14, [r3, #200]	; 0xc8
			print_f = ParkParm.qIq * 100;
 800fe9c:	ed97 2a08 	vldr	s4, [r7, #32]
			print_g = ParkParm.qVd * 100;
 800fea0:	edd7 2a09 	vldr	s5, [r7, #36]	; 0x24
			print_h = ParkParm.qVq * 100;
 800fea4:	ed97 3a0a 	vldr	s6, [r7, #40]	; 0x28
			print_i = ParkParm.qValpha * 100;
 800fea8:	edd7 3a0b 	vldr	s7, [r7, #44]	; 0x2c
			print_j = ParkParm.qVbeta * 100;
 800feac:	ed97 4a0c 	vldr	s8, [r7, #48]	; 0x30
			print_k = ParkParm.qAngle*100;
 800feb0:	edd7 4a00 	vldr	s9, [r7]
		MeasSensorValue.MotorTemp = NTC_TEMP(ADC_IND_TEMP_PCB);
 800feb4:	ed9f 1a5a 	vldr	s2, [pc, #360]	; 8010020 <timer_thread+0x220>
			print_d = ParkParm.qIbeta * 100;
 800feb8:	ee65 5aa7 	vmul.f32	s11, s11, s15
		MeasSensorValue.MotorTemp = NTC_TEMP(ADC_IND_TEMP_PCB);
 800febc:	ee30 5a05 	vadd.f32	s10, s0, s10
			print_c = ParkParm.qIalpha * 100;
 800fec0:	ee20 0aa7 	vmul.f32	s0, s1, s15
			print_d = ParkParm.qIbeta * 100;
 800fec4:	eefd 5ae5 	vcvt.s32.f32	s11, s11
			print_b = ParkParm.qIb * 100;
 800fec8:	ee26 6a27 	vmul.f32	s12, s12, s15
			print_c = ParkParm.qIalpha * 100;
 800fecc:	eebd 0ac0 	vcvt.s32.f32	s0, s0
			print_d = ParkParm.qIbeta * 100;
 800fed0:	ee15 5a90 	vmov	r5, s11
			print_b = ParkParm.qIb * 100;
 800fed4:	eebd 6ac6 	vcvt.s32.f32	s12, s12
			print_a = ParkParm.qIa * 100;
 800fed8:	ee66 6aa7 	vmul.f32	s13, s13, s15
			print_c = ParkParm.qIalpha * 100;
 800fedc:	ee10 3a10 	vmov	r3, s0
			print_a = ParkParm.qIa * 100;
 800fee0:	eefd 6ae6 	vcvt.s32.f32	s13, s13
			print_d = ParkParm.qIbeta * 100;
 800fee4:	fa0f fb85 	sxth.w	fp, r5
			print_e = ParkParm.qId * 100;
 800fee8:	ee61 1aa7 	vmul.f32	s3, s3, s15
			Usart1_printf(&SD1, (uint8_t *)"%d	%d	",print_a,print_b);
 800feec:	ee16 5a10 	vmov	r5, s12
			print_c = ParkParm.qIalpha * 100;
 800fef0:	b21b      	sxth	r3, r3
			print_e = ParkParm.qId * 100;
 800fef2:	eefd 1ae1 	vcvt.s32.f32	s3, s3
			print_c = ParkParm.qIalpha * 100;
 800fef6:	9301      	str	r3, [sp, #4]
			print_f = ParkParm.qIq * 100;
 800fef8:	ee22 2a27 	vmul.f32	s4, s4, s15
			Usart1_printf(&SD1, (uint8_t *)"%d	%d	",print_a,print_b);
 800fefc:	b22b      	sxth	r3, r5
 800fefe:	ee16 5a90 	vmov	r5, s13
			print_f = ParkParm.qIq * 100;
 800ff02:	eebd 2ac2 	vcvt.s32.f32	s4, s4
			Usart1_printf(&SD1, (uint8_t *)"%d	%d	",print_a,print_b);
 800ff06:	b22a      	sxth	r2, r5
			print_g = ParkParm.qVd * 100;
 800ff08:	ee62 2aa7 	vmul.f32	s5, s5, s15
			print_e = ParkParm.qId * 100;
 800ff0c:	ee11 5a90 	vmov	r5, s3
			print_g = ParkParm.qVd * 100;
 800ff10:	eefd 2ae2 	vcvt.s32.f32	s5, s5
			print_e = ParkParm.qId * 100;
 800ff14:	b22e      	sxth	r6, r5
		MeasSensorValue.MotorTemp = NTC_TEMP(ADC_IND_TEMP_PCB);
 800ff16:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
			print_f = ParkParm.qIq * 100;
 800ff1a:	ee12 5a10 	vmov	r5, s4
		MeasSensorValue.MotorTemp = NTC_TEMP(ADC_IND_TEMP_PCB);
 800ff1e:	eeca 0a85 	vdiv.f32	s1, s21, s10
			print_e = ParkParm.qId * 100;
 800ff22:	9602      	str	r6, [sp, #8]
			print_f = ParkParm.qIq * 100;
 800ff24:	b22e      	sxth	r6, r5
 800ff26:	9603      	str	r6, [sp, #12]
			print_h = ParkParm.qVq * 100;
 800ff28:	ee23 3a27 	vmul.f32	s6, s6, s15
			print_g = ParkParm.qVd * 100;
 800ff2c:	ee12 5a90 	vmov	r5, s5
			print_h = ParkParm.qVq * 100;
 800ff30:	eebd 3ac3 	vcvt.s32.f32	s6, s6
			print_i = ParkParm.qValpha * 100;
 800ff34:	ee63 3aa7 	vmul.f32	s7, s7, s15
			print_g = ParkParm.qVd * 100;
 800ff38:	b22d      	sxth	r5, r5
 800ff3a:	9504      	str	r5, [sp, #16]
			print_j = ParkParm.qVbeta * 100;
 800ff3c:	ee24 4a27 	vmul.f32	s8, s8, s15
			print_h = ParkParm.qVq * 100;
 800ff40:	ee13 5a10 	vmov	r5, s6
			print_i = ParkParm.qValpha * 100;
 800ff44:	eefd 3ae3 	vcvt.s32.f32	s7, s7
			print_j = ParkParm.qVbeta * 100;
 800ff48:	eebd 4ac4 	vcvt.s32.f32	s8, s8
			print_k = ParkParm.qAngle*100;
 800ff4c:	ee64 4aa7 	vmul.f32	s9, s9, s15
			print_h = ParkParm.qVq * 100;
 800ff50:	b22d      	sxth	r5, r5
 800ff52:	462e      	mov	r6, r5
			print_i = ParkParm.qValpha * 100;
 800ff54:	ee13 5a90 	vmov	r5, s7
			print_j = ParkParm.qVbeta * 100;
 800ff58:	ee14 ca10 	vmov	ip, s8
			print_k = ParkParm.qAngle*100;
 800ff5c:	eefd 4ae4 	vcvt.s32.f32	s9, s9
			print_l = smc1.Theta *100;
 800ff60:	ee2a 5a27 	vmul.f32	s10, s20, s15
			print_i = ParkParm.qValpha * 100;
 800ff64:	b22d      	sxth	r5, r5
			print_l = smc1.Theta *100;
 800ff66:	eebd 5ac5 	vcvt.s32.f32	s10, s10
			print_i = ParkParm.qValpha * 100;
 800ff6a:	9505      	str	r5, [sp, #20]
			print_j = ParkParm.qVbeta * 100;
 800ff6c:	fa0f f58c 	sxth.w	r5, ip
			print_k = ParkParm.qAngle*100;
 800ff70:	ee14 ca90 	vmov	ip, s9
			print_m = smc1.angle *100;
 800ff74:	ee67 7a27 	vmul.f32	s15, s14, s15
			print_j = ParkParm.qVbeta * 100;
 800ff78:	9506      	str	r5, [sp, #24]
			print_k = ParkParm.qAngle*100;
 800ff7a:	fa0f f58c 	sxth.w	r5, ip
			print_l = smc1.Theta *100;
 800ff7e:	ee15 ca10 	vmov	ip, s10
			print_m = smc1.angle *100;
 800ff82:	eefd 7ae7 	vcvt.s32.f32	s15, s15
			print_l = smc1.Theta *100;
 800ff86:	fa0f fc8c 	sxth.w	ip, ip
		MeasSensorValue.MotorTemp = NTC_TEMP(ADC_IND_TEMP_PCB);
 800ff8a:	ee30 7ac1 	vsub.f32	s14, s1, s2
			print_k = ParkParm.qAngle*100;
 800ff8e:	9507      	str	r5, [sp, #28]
			print_l = smc1.Theta *100;
 800ff90:	4665      	mov	r5, ip
			print_m = smc1.angle *100;
 800ff92:	ee17 ca90 	vmov	ip, s15
		MeasSensorValue.MotorTemp = NTC_TEMP(ADC_IND_TEMP_PCB);
 800ff96:	ed89 7a01 	vstr	s14, [r9, #4]
			print_m = smc1.angle *100;
 800ff9a:	fa0f fa8c 	sxth.w	sl, ip
			Usart1_printf(&SD1, (uint8_t *)"%d	%d	",print_a,print_b);
 800ff9e:	f001 fbb7 	bl	8011710 <Usart1_printf>
			Usart1_printf(&SD1, (uint8_t *)"%d	%d	",print_c,print_d);
 800ffa2:	465b      	mov	r3, fp
 800ffa4:	9a01      	ldr	r2, [sp, #4]
 800ffa6:	491b      	ldr	r1, [pc, #108]	; (8010014 <timer_thread+0x214>)
 800ffa8:	4620      	mov	r0, r4
 800ffaa:	f001 fbb1 	bl	8011710 <Usart1_printf>
			Usart1_printf(&SD1, (uint8_t *)"%d	%d	",print_e,print_f);
 800ffae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ffb2:	4918      	ldr	r1, [pc, #96]	; (8010014 <timer_thread+0x214>)
 800ffb4:	4620      	mov	r0, r4
 800ffb6:	f001 fbab 	bl	8011710 <Usart1_printf>
			Usart1_printf(&SD1, (uint8_t *)"%d	%d	",print_g,print_h);
 800ffba:	4633      	mov	r3, r6
 800ffbc:	9a04      	ldr	r2, [sp, #16]
 800ffbe:	4915      	ldr	r1, [pc, #84]	; (8010014 <timer_thread+0x214>)
 800ffc0:	4620      	mov	r0, r4
 800ffc2:	f001 fba5 	bl	8011710 <Usart1_printf>
			Usart1_printf(&SD1, (uint8_t *)"%d	%d	",print_i,print_j);
 800ffc6:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 800ffca:	4912      	ldr	r1, [pc, #72]	; (8010014 <timer_thread+0x214>)
 800ffcc:	4620      	mov	r0, r4
 800ffce:	f001 fb9f 	bl	8011710 <Usart1_printf>
			Usart1_printf(&SD1, (uint8_t *)"%d	%d	",print_k,print_l);
 800ffd2:	9a07      	ldr	r2, [sp, #28]
 800ffd4:	490f      	ldr	r1, [pc, #60]	; (8010014 <timer_thread+0x214>)
 800ffd6:	462b      	mov	r3, r5
 800ffd8:	4620      	mov	r0, r4
 800ffda:	f001 fb99 	bl	8011710 <Usart1_printf>
			Usart1_printf(&SD1, (uint8_t *)"%d	\r\n",print_m);
 800ffde:	4652      	mov	r2, sl
 800ffe0:	4910      	ldr	r1, [pc, #64]	; (8010024 <timer_thread+0x224>)
 800ffe2:	4620      	mov	r0, r4
 800ffe4:	f001 fb94 	bl	8011710 <Usart1_printf>
 800ffe8:	e721      	b.n	800fe2e <timer_thread+0x2e>
 800ffea:	bf00      	nop
 800ffec:	20000c40 	.word	0x20000c40
 800fff0:	08013de0 	.word	0x08013de0
 800fff4:	20002184 	.word	0x20002184
 800fff8:	20001298 	.word	0x20001298
 800fffc:	3a534067 	.word	0x3a534067
 8010000:	42ca0000 	.word	0x42ca0000
 8010004:	4c1c363c 	.word	0x4c1c363c
 8010008:	461c4000 	.word	0x461c4000
 801000c:	4556a000 	.word	0x4556a000
 8010010:	2000222c 	.word	0x2000222c
 8010014:	08013dec 	.word	0x08013dec
 8010018:	42c80000 	.word	0x42c80000
 801001c:	3b5bcf0f 	.word	0x3b5bcf0f
 8010020:	43889333 	.word	0x43889333
 8010024:	08013df4 	.word	0x08013df4
 8010028:	20002208 	.word	0x20002208
 801002c:	2000132c 	.word	0x2000132c

08010030 <mcpwm_adc_dma_int_handler>:
{
 8010030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (EncMode == ENCODER_MODE_AHALL)
 8010032:	4aa8      	ldr	r2, [pc, #672]	; (80102d4 <mcpwm_adc_dma_int_handler+0x2a4>)
	MCCtrlCnt++;
 8010034:	4ca8      	ldr	r4, [pc, #672]	; (80102d8 <mcpwm_adc_dma_int_handler+0x2a8>)
	if (EncMode == ENCODER_MODE_AHALL)
 8010036:	7812      	ldrb	r2, [r2, #0]
	MCCtrlCnt++;
 8010038:	6823      	ldr	r3, [r4, #0]
	if (EncMode == ENCODER_MODE_AHALL)
 801003a:	2a03      	cmp	r2, #3
	MCCtrlCnt++;
 801003c:	f103 0301 	add.w	r3, r3, #1
{
 8010040:	ed2d 8b02 	vpush	{d8}
	MCCtrlCnt++;
 8010044:	6023      	str	r3, [r4, #0]
	if (EncMode == ENCODER_MODE_AHALL)
 8010046:	d11b      	bne.n	8010080 <mcpwm_adc_dma_int_handler+0x50>
		smc1.HallPLLA = ((float)ADC_Value[ADC_IND_SENS1] - 1241.0f)/ 4095.0f;
 8010048:	4aa4      	ldr	r2, [pc, #656]	; (80102dc <mcpwm_adc_dma_int_handler+0x2ac>)
 801004a:	ed9f 6aa5 	vldr	s12, [pc, #660]	; 80102e0 <mcpwm_adc_dma_int_handler+0x2b0>
 801004e:	8891      	ldrh	r1, [r2, #4]
		smc1.HallPLLB = ((float)ADC_Value[ADC_IND_SENS2] - 1241.0f)/ 4095.0f;
 8010050:	8852      	ldrh	r2, [r2, #2]
		smc1.HallPLLA = ((float)ADC_Value[ADC_IND_SENS1] - 1241.0f)/ 4095.0f;
 8010052:	eddf 6aa4 	vldr	s13, [pc, #656]	; 80102e4 <mcpwm_adc_dma_int_handler+0x2b4>
		smc1.HallPLLB = ((float)ADC_Value[ADC_IND_SENS2] - 1241.0f)/ 4095.0f;
 8010056:	ee07 2a90 	vmov	s15, r2
		smc1.HallPLLA = ((float)ADC_Value[ADC_IND_SENS1] - 1241.0f)/ 4095.0f;
 801005a:	ee07 1a10 	vmov	s14, r1
		smc1.HallPLLB = ((float)ADC_Value[ADC_IND_SENS2] - 1241.0f)/ 4095.0f;
 801005e:	eef8 7a67 	vcvt.f32.u32	s15, s15
		smc1.HallPLLA = ((float)ADC_Value[ADC_IND_SENS1] - 1241.0f)/ 4095.0f;
 8010062:	eeb8 7a47 	vcvt.f32.u32	s14, s14
		smc1.HallPLLB = ((float)ADC_Value[ADC_IND_SENS2] - 1241.0f)/ 4095.0f;
 8010066:	ee77 7ac6 	vsub.f32	s15, s15, s12
		smc1.HallPLLA = ((float)ADC_Value[ADC_IND_SENS1] - 1241.0f)/ 4095.0f;
 801006a:	ee37 7a46 	vsub.f32	s14, s14, s12
 801006e:	4a9e      	ldr	r2, [pc, #632]	; (80102e8 <mcpwm_adc_dma_int_handler+0x2b8>)
 8010070:	ee87 6a26 	vdiv.f32	s12, s14, s13
		smc1.HallPLLB = ((float)ADC_Value[ADC_IND_SENS2] - 1241.0f)/ 4095.0f;
 8010074:	ee87 7aa6 	vdiv.f32	s14, s15, s13
		smc1.HallPLLA = ((float)ADC_Value[ADC_IND_SENS1] - 1241.0f)/ 4095.0f;
 8010078:	ed82 6a12 	vstr	s12, [r2, #72]	; 0x48
		smc1.HallPLLB = ((float)ADC_Value[ADC_IND_SENS2] - 1241.0f)/ 4095.0f;
 801007c:	ed82 7a14 	vstr	s14, [r2, #80]	; 0x50
	if(MCCtrlCnt % SPD_CTRL_DIV == 0) //speed ctrl
 8010080:	0719      	lsls	r1, r3, #28
 8010082:	f000 80c2 	beq.w	801020a <mcpwm_adc_dma_int_handler+0x1da>
	if(MCCtrlCnt % CURR_CTRL_DIV == 0)//current ctrl
 8010086:	f013 0301 	ands.w	r3, r3, #1
 801008a:	f040 80a6 	bne.w	80101da <mcpwm_adc_dma_int_handler+0x1aa>
		TIM12->CNT = 0;
 801008e:	4997      	ldr	r1, [pc, #604]	; (80102ec <mcpwm_adc_dma_int_handler+0x2bc>)
		if(!McCtrlBits.DcCalDone)
 8010090:	4a97      	ldr	r2, [pc, #604]	; (80102f0 <mcpwm_adc_dma_int_handler+0x2c0>)
		TIM12->CNT = 0;
 8010092:	624b      	str	r3, [r1, #36]	; 0x24
		if(!McCtrlBits.DcCalDone)
 8010094:	7811      	ldrb	r1, [r2, #0]
 8010096:	4a91      	ldr	r2, [pc, #580]	; (80102dc <mcpwm_adc_dma_int_handler+0x2ac>)
 8010098:	88d5      	ldrh	r5, [r2, #6]
 801009a:	8916      	ldrh	r6, [r2, #8]
 801009c:	074a      	lsls	r2, r1, #29
 801009e:	f140 80a3 	bpl.w	80101e8 <mcpwm_adc_dma_int_handler+0x1b8>
			control_mode = CONTROL_MODE_SETUP;
 80100a2:	4f94      	ldr	r7, [pc, #592]	; (80102f4 <mcpwm_adc_dma_int_handler+0x2c4>)
 80100a4:	703b      	strb	r3, [r7, #0]
			if(control_mode == CONTROL_MODE_SETUP)
 80100a6:	783b      	ldrb	r3, [r7, #0]
 80100a8:	2b00      	cmp	r3, #0
 80100aa:	f040 80b2 	bne.w	8010212 <mcpwm_adc_dma_int_handler+0x1e2>
				ParkParm.qAngle += 0.0002f;//from gui 
 80100ae:	4c92      	ldr	r4, [pc, #584]	; (80102f8 <mcpwm_adc_dma_int_handler+0x2c8>)
 80100b0:	ed9f 7a92 	vldr	s14, [pc, #584]	; 80102fc <mcpwm_adc_dma_int_handler+0x2cc>
 80100b4:	edd4 8a00 	vldr	s17, [r4]
				if(TWOPI <=  ParkParm.qAngle)ParkParm.qAngle = TWOPI - ParkParm.qAngle;
 80100b8:	eddf 7a91 	vldr	s15, [pc, #580]	; 8010300 <mcpwm_adc_dma_int_handler+0x2d0>
				ParkParm.qVd = 0.2f;
 80100bc:	4a91      	ldr	r2, [pc, #580]	; (8010304 <mcpwm_adc_dma_int_handler+0x2d4>)
 80100be:	6262      	str	r2, [r4, #36]	; 0x24
				ParkParm.qAngle += 0.0002f;//from gui 
 80100c0:	ee78 8a87 	vadd.f32	s17, s17, s14
				ParkParm.qVq = 0.0f;
 80100c4:	2300      	movs	r3, #0
				if(TWOPI <=  ParkParm.qAngle)ParkParm.qAngle = TWOPI - ParkParm.qAngle;
 80100c6:	eef4 8ae7 	vcmpe.f32	s17, s15
 80100ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100ce:	bfa8      	it	ge
 80100d0:	ee77 8ae8 	vsubge.f32	s17, s15, s17
				ParkParm.qVq = 0.0f;
 80100d4:	62a3      	str	r3, [r4, #40]	; 0x28
 80100d6:	eeb0 0a68 	vmov.f32	s0, s17
				if(TWOPI <=  ParkParm.qAngle)ParkParm.qAngle = TWOPI - ParkParm.qAngle;
 80100da:	edc4 8a00 	vstr	s17, [r4]
 80100de:	f002 f9a7 	bl	8012430 <cosf>
 80100e2:	eeb0 8a40 	vmov.f32	s16, s0
 80100e6:	eeb0 0a68 	vmov.f32	s0, s17
 80100ea:	f002 fc89 	bl	8012a00 <sinf>
			MeasCurrParm.CorrADC_a = ADC_Value[ADC_IND_CURR1] - MeasCurrParm.Offseta;
 80100ee:	4b86      	ldr	r3, [pc, #536]	; (8010308 <mcpwm_adc_dma_int_handler+0x2d8>)
			ParkParm.qIbeta = ParkParm.qIa*INV_SQRT3 + 2*ParkParm.qIb*INV_SQRT3;
 80100f0:	ed9f 6a86 	vldr	s12, [pc, #536]	; 801030c <mcpwm_adc_dma_int_handler+0x2dc>
			MeasCurrParm.CorrADC_b = ADC_Value[ADC_IND_CURR2] - MeasCurrParm.Offsetb;
 80100f4:	8a5a      	ldrh	r2, [r3, #18]
			MeasCurrParm.CorrADC_a = ADC_Value[ADC_IND_CURR1] - MeasCurrParm.Offseta;
 80100f6:	8a19      	ldrh	r1, [r3, #16]
			ParkParm.qIb = MeasCurrParm.qKb * (float)MeasCurrParm.CorrADC_b;
 80100f8:	edd3 7a03 	vldr	s15, [r3, #12]
			ParkParm.qIa = MeasCurrParm.qKa * (float)MeasCurrParm.CorrADC_a;
 80100fc:	edd3 5a02 	vldr	s11, [r3, #8]
			if(control_mode != CONTROL_MODE_SETUP && control_mode != CONTROL_MODE_NONE)
 8010100:	7838      	ldrb	r0, [r7, #0]
			MeasCurrParm.CorrADC_b = ADC_Value[ADC_IND_CURR2] - MeasCurrParm.Offsetb;
 8010102:	1ab6      	subs	r6, r6, r2
 8010104:	b2b6      	uxth	r6, r6
 8010106:	b232      	sxth	r2, r6
			ParkParm.qIb = MeasCurrParm.qKb * (float)MeasCurrParm.CorrADC_b;
 8010108:	ee07 2a10 	vmov	s14, r2
			MeasCurrParm.CorrADC_a = ADC_Value[ADC_IND_CURR1] - MeasCurrParm.Offseta;
 801010c:	1a6d      	subs	r5, r5, r1
			ParkParm.qIb = MeasCurrParm.qKb * (float)MeasCurrParm.CorrADC_b;
 801010e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
			MeasCurrParm.CorrADC_a = ADC_Value[ADC_IND_CURR1] - MeasCurrParm.Offseta;
 8010112:	b2ad      	uxth	r5, r5
 8010114:	b229      	sxth	r1, r5
			ParkParm.qIb = MeasCurrParm.qKb * (float)MeasCurrParm.CorrADC_b;
 8010116:	ee66 6aa7 	vmul.f32	s13, s13, s15
			ParkParm.qIa = MeasCurrParm.qKa * (float)MeasCurrParm.CorrADC_a;
 801011a:	ee07 1a90 	vmov	s15, r1
			ParkParm.qIbeta = ParkParm.qIa*INV_SQRT3 + 2*ParkParm.qIb*INV_SQRT3;
 801011e:	ee36 7aa6 	vadd.f32	s14, s13, s13
			ParkParm.qIa = MeasCurrParm.qKa * (float)MeasCurrParm.CorrADC_a;
 8010122:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			ParkParm.qIbeta = ParkParm.qIa*INV_SQRT3 + 2*ParkParm.qIb*INV_SQRT3;
 8010126:	ee27 7a06 	vmul.f32	s14, s14, s12
			ParkParm.qIa = MeasCurrParm.qKa * (float)MeasCurrParm.CorrADC_a;
 801012a:	ee67 7aa5 	vmul.f32	s15, s15, s11
			MeasCurrParm.CorrADC_c = -(MeasCurrParm.CorrADC_a + MeasCurrParm.CorrADC_b);
 801012e:	4435      	add	r5, r6
			ParkParm.qIbeta = ParkParm.qIa*INV_SQRT3 + 2*ParkParm.qIb*INV_SQRT3;
 8010130:	eea7 7a86 	vfma.f32	s14, s15, s12
			MeasCurrParm.CorrADC_c = -(MeasCurrParm.CorrADC_a + MeasCurrParm.CorrADC_b);
 8010134:	426d      	negs	r5, r5
 8010136:	809d      	strh	r5, [r3, #4]
			MeasCurrParm.CorrADC_a = ADC_Value[ADC_IND_CURR1] - MeasCurrParm.Offseta;
 8010138:	8019      	strh	r1, [r3, #0]
			ParkParm.qId = ParkParm.qIalpha*cosf(ParkParm.qAngle) + ParkParm.qIbeta*sinf(ParkParm.qAngle);
 801013a:	ee67 5a00 	vmul.f32	s11, s14, s0
			ParkParm.qIq = -ParkParm.qIalpha*sinf(ParkParm.qAngle) + ParkParm.qIbeta*cosf(ParkParm.qAngle);
 801013e:	ee27 6a08 	vmul.f32	s12, s14, s16
			ParkParm.qId = ParkParm.qIalpha*cosf(ParkParm.qAngle) + ParkParm.qIbeta*sinf(ParkParm.qAngle);
 8010142:	eee7 5a88 	vfma.f32	s11, s15, s16
			MeasCurrParm.CorrADC_b = ADC_Value[ADC_IND_CURR2] - MeasCurrParm.Offsetb;
 8010146:	805a      	strh	r2, [r3, #2]
			ParkParm.qIq = -ParkParm.qIalpha*sinf(ParkParm.qAngle) + ParkParm.qIbeta*cosf(ParkParm.qAngle);
 8010148:	eea7 6ac0 	vfms.f32	s12, s15, s0
			ParkParm.qIb = MeasCurrParm.qKb * (float)MeasCurrParm.CorrADC_b;
 801014c:	edc4 6a04 	vstr	s13, [r4, #16]
			ParkParm.qIbeta = ParkParm.qIa*INV_SQRT3 + 2*ParkParm.qIb*INV_SQRT3;
 8010150:	ed84 7a06 	vstr	s14, [r4, #24]
			ParkParm.qIa = MeasCurrParm.qKa * (float)MeasCurrParm.CorrADC_a;
 8010154:	edc4 7a03 	vstr	s15, [r4, #12]
			ParkParm.qIalpha = ParkParm.qIa;
 8010158:	edc4 7a05 	vstr	s15, [r4, #20]
			ParkParm.qId = ParkParm.qIalpha*cosf(ParkParm.qAngle) + ParkParm.qIbeta*sinf(ParkParm.qAngle);
 801015c:	edc4 5a07 	vstr	s11, [r4, #28]
			ParkParm.qIq = -ParkParm.qIalpha*sinf(ParkParm.qAngle) + ParkParm.qIbeta*cosf(ParkParm.qAngle);
 8010160:	ed84 6a08 	vstr	s12, [r4, #32]
			if(control_mode != CONTROL_MODE_SETUP && control_mode != CONTROL_MODE_NONE)
 8010164:	b180      	cbz	r0, 8010188 <mcpwm_adc_dma_int_handler+0x158>
 8010166:	783b      	ldrb	r3, [r7, #0]
 8010168:	2b04      	cmp	r3, #4
 801016a:	d00d      	beq.n	8010188 <mcpwm_adc_dma_int_handler+0x158>
				CurrentControl();
 801016c:	f000 fba0 	bl	80108b0 <CurrentControl>
 8010170:	edd4 8a00 	vldr	s17, [r4]
 8010174:	eeb0 0a68 	vmov.f32	s0, s17
 8010178:	f002 f95a 	bl	8012430 <cosf>
 801017c:	eeb0 8a40 	vmov.f32	s16, s0
 8010180:	eeb0 0a68 	vmov.f32	s0, s17
 8010184:	f002 fc3c 	bl	8012a00 <sinf>
			ParkParm.qValpha =  ParkParm.qVd*cosf(ParkParm.qAngle) - ParkParm.qVq*sinf(ParkParm.qAngle);
 8010188:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
 801018c:	ed94 7a09 	vldr	s14, [r4, #36]	; 0x24
			SVGenParm.qVr2 = (-ParkParm.qVbeta + SQRT3 * ParkParm.qValpha)/2;
 8010190:	eddf 5a5f 	vldr	s11, [pc, #380]	; 8010310 <mcpwm_adc_dma_int_handler+0x2e0>
			SVGenParm.qVr1 = ParkParm.qVbeta;
 8010194:	4b5f      	ldr	r3, [pc, #380]	; (8010314 <mcpwm_adc_dma_int_handler+0x2e4>)
			ParkParm.qVbeta  =  ParkParm.qVd*sinf(ParkParm.qAngle) + ParkParm.qVq*cosf(ParkParm.qAngle);
 8010196:	ee67 6a88 	vmul.f32	s13, s15, s16
			ParkParm.qValpha =  ParkParm.qVd*cosf(ParkParm.qAngle) - ParkParm.qVq*sinf(ParkParm.qAngle);
 801019a:	ee60 7a67 	vnmul.f32	s15, s0, s15
			ParkParm.qVbeta  =  ParkParm.qVd*sinf(ParkParm.qAngle) + ParkParm.qVq*cosf(ParkParm.qAngle);
 801019e:	eee7 6a00 	vfma.f32	s13, s14, s0
			ParkParm.qValpha =  ParkParm.qVd*cosf(ParkParm.qAngle) - ParkParm.qVq*sinf(ParkParm.qAngle);
 80101a2:	eee7 7a08 	vfma.f32	s15, s14, s16
			SVGenParm.qVr2 = (-ParkParm.qVbeta + SQRT3 * ParkParm.qValpha)/2;
 80101a6:	eeb1 7a66 	vneg.f32	s14, s13
 80101aa:	eeb0 6a47 	vmov.f32	s12, s14
 80101ae:	eea7 6aa5 	vfma.f32	s12, s15, s11
			SVGenParm.qVr3 = (-ParkParm.qVbeta - SQRT3 * ParkParm.qValpha)/2;
 80101b2:	eea7 7ae5 	vfms.f32	s14, s15, s11
			SVGenParm.qVr2 = (-ParkParm.qVbeta + SQRT3 * ParkParm.qValpha)/2;
 80101b6:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 80101ba:	ee26 6a25 	vmul.f32	s12, s12, s11
			SVGenParm.qVr3 = (-ParkParm.qVbeta - SQRT3 * ParkParm.qValpha)/2;
 80101be:	ee27 7a25 	vmul.f32	s14, s14, s11
			ParkParm.qValpha =  ParkParm.qVd*cosf(ParkParm.qAngle) - ParkParm.qVq*sinf(ParkParm.qAngle);
 80101c2:	edc4 7a0b 	vstr	s15, [r4, #44]	; 0x2c
			ParkParm.qVbeta  =  ParkParm.qVd*sinf(ParkParm.qAngle) + ParkParm.qVq*cosf(ParkParm.qAngle);
 80101c6:	edc4 6a0c 	vstr	s13, [r4, #48]	; 0x30
			SVGenParm.qVr1 = ParkParm.qVbeta;
 80101ca:	edc3 6a01 	vstr	s13, [r3, #4]
			SVGenParm.qVr2 = (-ParkParm.qVbeta + SQRT3 * ParkParm.qValpha)/2;
 80101ce:	ed83 6a02 	vstr	s12, [r3, #8]
			SVGenParm.qVr3 = (-ParkParm.qVbeta - SQRT3 * ParkParm.qValpha)/2;
 80101d2:	ed83 7a03 	vstr	s14, [r3, #12]
			CalcSVGen();
 80101d6:	f000 fc6b 	bl	8010ab0 <CalcSVGen>
}
 80101da:	ecbd 8b02 	vpop	{d8}
	WWDG_SetCounter(100);
 80101de:	2064      	movs	r0, #100	; 0x64
}
 80101e0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	WWDG_SetCounter(100);
 80101e4:	f002 b914 	b.w	8012410 <WWDG_SetCounter>
			MeasCurrParm.curr_start_samples++;
 80101e8:	4b47      	ldr	r3, [pc, #284]	; (8010308 <mcpwm_adc_dma_int_handler+0x2d8>)
}
 80101ea:	ecbd 8b02 	vpop	{d8}
			MeasCurrParm.curr1_sum += ADC_Value[ADC_IND_CURR2] ;
 80101ee:	e9d3 1205 	ldrd	r1, r2, [r3, #20]
			MeasCurrParm.curr_start_samples++;
 80101f2:	8b98      	ldrh	r0, [r3, #28]
			MeasCurrParm.curr0_sum += ADC_Value[ADC_IND_CURR1] ;
 80101f4:	440d      	add	r5, r1
			MeasCurrParm.curr_start_samples++;
 80101f6:	3001      	adds	r0, #1
			MeasCurrParm.curr1_sum += ADC_Value[ADC_IND_CURR2] ;
 80101f8:	4416      	add	r6, r2
			MeasCurrParm.curr_start_samples++;
 80101fa:	8398      	strh	r0, [r3, #28]
			MeasCurrParm.curr1_sum += ADC_Value[ADC_IND_CURR2] ;
 80101fc:	e9c3 5605 	strd	r5, r6, [r3, #20]
	WWDG_SetCounter(100);
 8010200:	2064      	movs	r0, #100	; 0x64
}
 8010202:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	WWDG_SetCounter(100);
 8010206:	f002 b903 	b.w	8012410 <WWDG_SetCounter>
		SpeedControl();
 801020a:	f000 fb99 	bl	8010940 <SpeedControl>
 801020e:	6823      	ldr	r3, [r4, #0]
 8010210:	e739      	b.n	8010086 <mcpwm_adc_dma_int_handler+0x56>
			else if(control_mode == CONTROL_MODE_CURRENT)
 8010212:	783b      	ldrb	r3, [r7, #0]
 8010214:	2b01      	cmp	r3, #1
 8010216:	d022      	beq.n	801025e <mcpwm_adc_dma_int_handler+0x22e>
			else if(control_mode == CONTROL_MODE_SPEED)//operate speed controller
 8010218:	783b      	ldrb	r3, [r7, #0]
 801021a:	2b02      	cmp	r3, #2
 801021c:	d041      	beq.n	80102a2 <mcpwm_adc_dma_int_handler+0x272>
			else if(control_mode == CONTROL_MODE_POSITION)//operate positon controller
 801021e:	783b      	ldrb	r3, [r7, #0]
 8010220:	2b03      	cmp	r3, #3
 8010222:	d00e      	beq.n	8010242 <mcpwm_adc_dma_int_handler+0x212>
				ParkParm.qAngle = 0.0f;
 8010224:	eddf 7a3c 	vldr	s15, [pc, #240]	; 8010318 <mcpwm_adc_dma_int_handler+0x2e8>
				CtrlParm.qVdRef = 0.0f;
 8010228:	4b3c      	ldr	r3, [pc, #240]	; (801031c <mcpwm_adc_dma_int_handler+0x2ec>)
				ParkParm.qAngle = 0.0f;
 801022a:	4c33      	ldr	r4, [pc, #204]	; (80102f8 <mcpwm_adc_dma_int_handler+0x2c8>)
				CtrlParm.qVdRef = 0.0f;
 801022c:	edc3 7a01 	vstr	s15, [r3, #4]
				ParkParm.qAngle = 0.0f;
 8010230:	edc4 7a00 	vstr	s15, [r4]
				CtrlParm.qVqRef = 0.0f; //from gui
 8010234:	eeb0 0a67 	vmov.f32	s0, s15
 8010238:	edc3 7a02 	vstr	s15, [r3, #8]
 801023c:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8010240:	e755      	b.n	80100ee <mcpwm_adc_dma_int_handler+0xbe>
 8010242:	4c2d      	ldr	r4, [pc, #180]	; (80102f8 <mcpwm_adc_dma_int_handler+0x2c8>)
 8010244:	edd4 8a00 	vldr	s17, [r4]
 8010248:	eeb0 0a68 	vmov.f32	s0, s17
 801024c:	f002 f8f0 	bl	8012430 <cosf>
 8010250:	eeb0 8a40 	vmov.f32	s16, s0
 8010254:	eeb0 0a68 	vmov.f32	s0, s17
 8010258:	f002 fbd2 	bl	8012a00 <sinf>
 801025c:	e747      	b.n	80100ee <mcpwm_adc_dma_int_handler+0xbe>
				ParkParm.qAngle += 0.0002f;//from gui 
 801025e:	4c26      	ldr	r4, [pc, #152]	; (80102f8 <mcpwm_adc_dma_int_handler+0x2c8>)
 8010260:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80102fc <mcpwm_adc_dma_int_handler+0x2cc>
 8010264:	edd4 8a00 	vldr	s17, [r4]
				if(TWOPI <=  ParkParm.qAngle)ParkParm.qAngle = TWOPI - ParkParm.qAngle;
 8010268:	eddf 7a25 	vldr	s15, [pc, #148]	; 8010300 <mcpwm_adc_dma_int_handler+0x2d0>
				CtrlParm.qVdRef = 0.2f;
 801026c:	4b2b      	ldr	r3, [pc, #172]	; (801031c <mcpwm_adc_dma_int_handler+0x2ec>)
 801026e:	4925      	ldr	r1, [pc, #148]	; (8010304 <mcpwm_adc_dma_int_handler+0x2d4>)
 8010270:	6059      	str	r1, [r3, #4]
				ParkParm.qAngle += 0.0002f;//from gui 
 8010272:	ee78 8a87 	vadd.f32	s17, s17, s14
				CtrlParm.qVqRef = 0.0f; //from gui
 8010276:	2200      	movs	r2, #0
				if(TWOPI <=  ParkParm.qAngle)ParkParm.qAngle = TWOPI - ParkParm.qAngle;
 8010278:	eef4 8ae7 	vcmpe.f32	s17, s15
 801027c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010280:	bfa8      	it	ge
 8010282:	ee77 8ae8 	vsubge.f32	s17, s15, s17
				CtrlParm.qVqRef = 0.0f; //from gui
 8010286:	609a      	str	r2, [r3, #8]
 8010288:	eeb0 0a68 	vmov.f32	s0, s17
				if(TWOPI <=  ParkParm.qAngle)ParkParm.qAngle = TWOPI - ParkParm.qAngle;
 801028c:	edc4 8a00 	vstr	s17, [r4]
 8010290:	f002 f8ce 	bl	8012430 <cosf>
 8010294:	eeb0 8a40 	vmov.f32	s16, s0
 8010298:	eeb0 0a68 	vmov.f32	s0, s17
 801029c:	f002 fbb0 	bl	8012a00 <sinf>
 80102a0:	e725      	b.n	80100ee <mcpwm_adc_dma_int_handler+0xbe>
				ParkParm.qAngle = smc1.ThetaCal;
 80102a2:	4a11      	ldr	r2, [pc, #68]	; (80102e8 <mcpwm_adc_dma_int_handler+0x2b8>)
				CtrlParm.qVqRef = PIParmW.qOut; 
 80102a4:	4b1e      	ldr	r3, [pc, #120]	; (8010320 <mcpwm_adc_dma_int_handler+0x2f0>)
				ParkParm.qAngle = smc1.ThetaCal;
 80102a6:	edd2 8a31 	vldr	s17, [r2, #196]	; 0xc4
				CtrlParm.qVqRef = PIParmW.qOut; 
 80102aa:	6a1a      	ldr	r2, [r3, #32]
				CtrlParm.qVelRef = 0.1f;
 80102ac:	4b1b      	ldr	r3, [pc, #108]	; (801031c <mcpwm_adc_dma_int_handler+0x2ec>)
				ParkParm.qAngle = smc1.ThetaCal;
 80102ae:	4c12      	ldr	r4, [pc, #72]	; (80102f8 <mcpwm_adc_dma_int_handler+0x2c8>)
				CtrlParm.qVelRef = 0.1f;
 80102b0:	491c      	ldr	r1, [pc, #112]	; (8010324 <mcpwm_adc_dma_int_handler+0x2f4>)
				CtrlParm.qVqRef = PIParmW.qOut; 
 80102b2:	609a      	str	r2, [r3, #8]
 80102b4:	eeb0 0a68 	vmov.f32	s0, s17
				CtrlParm.qVdRef = 0.0f;
 80102b8:	2200      	movs	r2, #0
				ParkParm.qAngle = smc1.ThetaCal;
 80102ba:	edc4 8a00 	vstr	s17, [r4]
				CtrlParm.qVelRef = 0.1f;
 80102be:	6019      	str	r1, [r3, #0]
				CtrlParm.qVdRef = 0.0f;
 80102c0:	605a      	str	r2, [r3, #4]
 80102c2:	f002 f8b5 	bl	8012430 <cosf>
 80102c6:	eeb0 8a40 	vmov.f32	s16, s0
 80102ca:	eeb0 0a68 	vmov.f32	s0, s17
 80102ce:	f002 fb97 	bl	8012a00 <sinf>
 80102d2:	e70c      	b.n	80100ee <mcpwm_adc_dma_int_handler+0xbe>
 80102d4:	20002214 	.word	0x20002214
 80102d8:	20001484 	.word	0x20001484
 80102dc:	2000132c 	.word	0x2000132c
 80102e0:	449b2000 	.word	0x449b2000
 80102e4:	457ff000 	.word	0x457ff000
 80102e8:	2000222c 	.word	0x2000222c
 80102ec:	40001800 	.word	0x40001800
 80102f0:	200020f0 	.word	0x200020f0
 80102f4:	20001488 	.word	0x20001488
 80102f8:	20002184 	.word	0x20002184
 80102fc:	3951b717 	.word	0x3951b717
 8010300:	40c90fdb 	.word	0x40c90fdb
 8010304:	3e4ccccd 	.word	0x3e4ccccd
 8010308:	200021e8 	.word	0x200021e8
 801030c:	3f13cd3a 	.word	0x3f13cd3a
 8010310:	3fddb3d7 	.word	0x3fddb3d7
 8010314:	200021c4 	.word	0x200021c4
 8010318:	00000000 	.word	0x00000000
 801031c:	200020e0 	.word	0x200020e0
 8010320:	20002160 	.word	0x20002160
 8010324:	3dcccccd 	.word	0x3dcccccd
	...

08010330 <mcpwm_init>:
{
 8010330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	TIM_DeInit(TIM1);
 8010334:	4dcc      	ldr	r5, [pc, #816]	; (8010668 <mcpwm_init+0x338>)
	TIM_DeInit(TIM8);
 8010336:	4fcd      	ldr	r7, [pc, #820]	; (801066c <mcpwm_init+0x33c>)
	chvprintf(&SD1, (uint8_t *)"to mc_interface -> mcpwm_init\r\n");
 8010338:	49cd      	ldr	r1, [pc, #820]	; (8010670 <mcpwm_init+0x340>)
 801033a:	48ce      	ldr	r0, [pc, #824]	; (8010674 <mcpwm_init+0x344>)
	DMA_Init(DMA2_Stream4, &DMA_InitStructure);
 801033c:	f8df 9370 	ldr.w	r9, [pc, #880]	; 80106b0 <mcpwm_init+0x380>
{
 8010340:	b0a9      	sub	sp, #164	; 0xa4
	chvprintf(&SD1, (uint8_t *)"to mc_interface -> mcpwm_init\r\n");
 8010342:	f7ff f8dd 	bl	800f500 <chvprintf>
	utils_sys_lock_cnt();
 8010346:	f001 f933 	bl	80115b0 <utils_sys_lock_cnt>
	TIM_DeInit(TIM1);
 801034a:	4628      	mov	r0, r5
 801034c:	f001 fcf8 	bl	8011d40 <TIM_DeInit>
	TIM_DeInit(TIM8);
 8010350:	4638      	mov	r0, r7
	TIM1->CNT = 0;
 8010352:	2400      	movs	r4, #0
	TIM_DeInit(TIM8);
 8010354:	f001 fcf4 	bl	8011d40 <TIM_DeInit>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
 8010358:	2101      	movs	r1, #1
	TIM1->CNT = 0;
 801035a:	626c      	str	r4, [r5, #36]	; 0x24
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
 801035c:	4608      	mov	r0, r1
	TIM8->CNT = 0;
 801035e:	627c      	str	r4, [r7, #36]	; 0x24
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 8010360:	2601      	movs	r6, #1
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
 8010362:	f001 fca5 	bl	8011cb0 <RCC_APB2PeriphClockCmd>
	TIM_TimeBaseInit(TIM1, &TIM_TimeBaseStructure);
 8010366:	4628      	mov	r0, r5
 8010368:	a903      	add	r1, sp, #12
	TIM_TimeBaseStructure.TIM_Prescaler = 0;
 801036a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_CenterAligned1;
 801036e:	f241 4382 	movw	r3, #5250	; 0x1482
 8010372:	e9cd 2303 	strd	r2, r3, [sp, #12]
	TIM_TimeBaseStructure.TIM_Period = SYSTEM_CORE_CLOCK  / (int)PWMFREQ /2;
 8010376:	f8ad 4014 	strh.w	r4, [sp, #20]
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 801037a:	f88d 6016 	strb.w	r6, [sp, #22]
	TIM_TimeBaseInit(TIM1, &TIM_TimeBaseStructure);
 801037e:	f001 fdbf 	bl	8011f00 <TIM_TimeBaseInit>
	TIM_OCInitStructure.TIM_Pulse = TIM1->ARR / 2;
 8010382:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 8010384:	4abc      	ldr	r2, [pc, #752]	; (8010678 <mcpwm_init+0x348>)
 8010386:	920e      	str	r2, [sp, #56]	; 0x38
	TIM_OCInitStructure.TIM_Pulse = TIM1->ARR / 2;
 8010388:	40f3      	lsrs	r3, r6
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 801038a:	f04f 0804 	mov.w	r8, #4
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
 801038e:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
	TIM_OC1Init(TIM1, &TIM_OCInitStructure);
 8010392:	4628      	mov	r0, r5
	TIM_OCInitStructure.TIM_OCNPolarity = TIM_OCNPolarity_High;
 8010394:	4bb9      	ldr	r3, [pc, #740]	; (801067c <mcpwm_init+0x34c>)
 8010396:	9312      	str	r3, [sp, #72]	; 0x48
	TIM_OC1Init(TIM1, &TIM_OCInitStructure);
 8010398:	a90e      	add	r1, sp, #56	; 0x38
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 801039a:	f8ad 803c 	strh.w	r8, [sp, #60]	; 0x3c
	TIM_OC1Init(TIM1, &TIM_OCInitStructure);
 801039e:	f001 fe27 	bl	8011ff0 <TIM_OC1Init>
	TIM_OC2Init(TIM1, &TIM_OCInitStructure);
 80103a2:	a90e      	add	r1, sp, #56	; 0x38
 80103a4:	4628      	mov	r0, r5
 80103a6:	f001 fe5b 	bl	8012060 <TIM_OC2Init>
	TIM_OC3Init(TIM1, &TIM_OCInitStructure);
 80103aa:	a90e      	add	r1, sp, #56	; 0x38
 80103ac:	4628      	mov	r0, r5
 80103ae:	f001 fe9f 	bl	80120f0 <TIM_OC3Init>
	TIM_OC4Init(TIM1, &TIM_OCInitStructure);
 80103b2:	a90e      	add	r1, sp, #56	; 0x38
 80103b4:	4628      	mov	r0, r5
 80103b6:	f001 fee3 	bl	8012180 <TIM_OC4Init>
	TIM_OC1PreloadConfig(TIM1, TIM_OCPreload_Enable);
 80103ba:	4628      	mov	r0, r5
 80103bc:	2108      	movs	r1, #8
 80103be:	f001 ff17 	bl	80121f0 <TIM_OC1PreloadConfig>
	TIM_OC2PreloadConfig(TIM1, TIM_OCPreload_Enable);
 80103c2:	4628      	mov	r0, r5
 80103c4:	2108      	movs	r1, #8
 80103c6:	f001 ff1b 	bl	8012200 <TIM_OC2PreloadConfig>
	TIM_OC3PreloadConfig(TIM1, TIM_OCPreload_Enable);
 80103ca:	4628      	mov	r0, r5
 80103cc:	2108      	movs	r1, #8
 80103ce:	f001 ff27 	bl	8012220 <TIM_OC3PreloadConfig>
	TIM_OC4PreloadConfig(TIM1, TIM_OCPreload_Enable);
 80103d2:	4628      	mov	r0, r5
 80103d4:	2108      	movs	r1, #8
 80103d6:	f001 ff2b 	bl	8012230 <TIM_OC4PreloadConfig>
	TIM_BDTRInitStructure.TIM_OSSRState = TIM_OSSRState_Enable;
 80103da:	f04f 2208 	mov.w	r2, #134219776	; 0x8000800
	TIM_BDTRInitStructure.TIM_OSSIState = TIM_OSSRState_Enable;
 80103de:	f44f 03a0 	mov.w	r3, #5242880	; 0x500000
 80103e2:	e9cd 2306 	strd	r2, r3, [sp, #24]
	TIM_BDTRConfig(TIM1, &TIM_BDTRInitStructure);
 80103e6:	4628      	mov	r0, r5
	TIM_BDTRInitStructure.TIM_DeadTime = MCPWM_DEAD_TIME_CYCLES;
 80103e8:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
	TIM_BDTRConfig(TIM1, &TIM_BDTRInitStructure);
 80103ec:	a906      	add	r1, sp, #24
	TIM_BDTRInitStructure.TIM_DeadTime = MCPWM_DEAD_TIME_CYCLES;
 80103ee:	9308      	str	r3, [sp, #32]
	TIM_BDTRInitStructure.TIM_BreakPolarity = TIM_BreakPolarity_High;
 80103f0:	f8ad 4024 	strh.w	r4, [sp, #36]	; 0x24
	TIM_BDTRConfig(TIM1, &TIM_BDTRInitStructure);
 80103f4:	f001 ff2c 	bl	8012250 <TIM_BDTRConfig>
	TIM_CCPreloadControl(TIM1, ENABLE);
 80103f8:	4631      	mov	r1, r6
 80103fa:	4628      	mov	r0, r5
 80103fc:	f001 ff50 	bl	80122a0 <TIM_CCPreloadControl>
	TIM_ARRPreloadConfig(TIM1, ENABLE);
 8010400:	4631      	mov	r1, r6
 8010402:	4628      	mov	r0, r5
 8010404:	f001 fdd4 	bl	8011fb0 <TIM_ARRPreloadConfig>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2 | RCC_AHB1Periph_GPIOA | RCC_AHB1Periph_GPIOC, ENABLE);
 8010408:	4631      	mov	r1, r6
 801040a:	489d      	ldr	r0, [pc, #628]	; (8010680 <mcpwm_init+0x350>)
 801040c:	f001 fc30 	bl	8011c70 <RCC_AHB1PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1 | RCC_APB2Periph_ADC2 | RCC_APB2Periph_ADC3, ENABLE);
 8010410:	4631      	mov	r1, r6
 8010412:	f44f 60e0 	mov.w	r0, #1792	; 0x700
 8010416:	f001 fc4b 	bl	8011cb0 <RCC_APB2PeriphClockCmd>
	dmaStreamAllocate(STM32_DMA_STREAM(STM32_DMA_STREAM_ID(2, 4)),3,(stm32_dmaisr_t)mcpwm_adc_dma_int_handler,(void *)0);
 801041a:	4623      	mov	r3, r4
 801041c:	4a99      	ldr	r2, [pc, #612]	; (8010684 <mcpwm_init+0x354>)
 801041e:	489a      	ldr	r0, [pc, #616]	; (8010688 <mcpwm_init+0x358>)
 8010420:	2103      	movs	r1, #3
 8010422:	f7fd ff2d 	bl	800e280 <dmaStreamAllocate>
	DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)&ADC_Value;
 8010426:	4b99      	ldr	r3, [pc, #612]	; (801068c <mcpwm_init+0x35c>)
 8010428:	931b      	str	r3, [sp, #108]	; 0x6c
	DMA_InitStructure.DMA_BufferSize = HW_ADC_CHANNELS;
 801042a:	230c      	movs	r3, #12
 801042c:	931d      	str	r3, [sp, #116]	; 0x74
	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&ADC->CDR;
 801042e:	4a98      	ldr	r2, [pc, #608]	; (8010690 <mcpwm_init+0x360>)
 8010430:	921a      	str	r2, [sp, #104]	; 0x68
	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
 8010432:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	DMA_InitStructure.DMA_Priority = DMA_Priority_High;
 8010436:	f44f 7280 	mov.w	r2, #256	; 0x100
	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 801043a:	f44f 6a80 	mov.w	sl, #1024	; 0x400
	DMA_Init(DMA2_Stream4, &DMA_InitStructure);
 801043e:	4648      	mov	r0, r9
	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
 8010440:	f44f 6b00 	mov.w	fp, #2048	; 0x800
	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
 8010444:	9321      	str	r3, [sp, #132]	; 0x84
	DMA_Init(DMA2_Stream4, &DMA_InitStructure);
 8010446:	a919      	add	r1, sp, #100	; 0x64
	DMA_InitStructure.DMA_Priority = DMA_Priority_High;
 8010448:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 801044c:	e9cd 2322 	strd	r2, r3, [sp, #136]	; 0x88
	DMA_InitStructure.DMA_Channel = DMA_Channel_0;
 8010450:	9419      	str	r4, [sp, #100]	; 0x64
	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
 8010452:	941c      	str	r4, [sp, #112]	; 0x70
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8010454:	941e      	str	r4, [sp, #120]	; 0x78
	DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
 8010456:	e9cd 4424 	strd	r4, r4, [sp, #144]	; 0x90
	DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 801045a:	e9cd 4426 	strd	r4, r4, [sp, #152]	; 0x98
	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
 801045e:	e9cd ab1f 	strd	sl, fp, [sp, #124]	; 0x7c
	DMA_Init(DMA2_Stream4, &DMA_InitStructure);
 8010462:	f001 fa9d 	bl	80119a0 <DMA_Init>
	DMA_Cmd(DMA2_Stream4, ENABLE);
 8010466:	4631      	mov	r1, r6
 8010468:	4648      	mov	r0, r9
 801046a:	f001 fac9 	bl	8011a00 <DMA_Cmd>
	DMA_ITConfig(DMA2_Stream4, DMA_IT_TC, ENABLE);
 801046e:	4632      	mov	r2, r6
 8010470:	4648      	mov	r0, r9
 8010472:	2110      	movs	r1, #16
 8010474:	f001 fad4 	bl	8011a20 <DMA_ITConfig>
	ADC_CommonInitStructure.ADC_Mode = ADC_TripleMode_RegSimult;
 8010478:	2216      	movs	r2, #22
	ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_1;
 801047a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
	ADC_CommonInit(&ADC_CommonInitStructure);
 801047e:	a80a      	add	r0, sp, #40	; 0x28
	ADC_CommonInitStructure.ADC_Mode = ADC_TripleMode_RegSimult;
 8010480:	920a      	str	r2, [sp, #40]	; 0x28
	ADC_CommonInitStructure.ADC_Prescaler = ADC_Prescaler_Div2;
 8010482:	940b      	str	r4, [sp, #44]	; 0x2c
	ADC_CommonInitStructure.ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
 8010484:	940d      	str	r4, [sp, #52]	; 0x34
	ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_1;
 8010486:	930c      	str	r3, [sp, #48]	; 0x30
	ADC_CommonInit(&ADC_CommonInitStructure);
 8010488:	f001 fa02 	bl	8011890 <ADC_CommonInit>
	ADC_InitStructure.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_Falling;
 801048c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
	ADC_Init(ADC1, &ADC_InitStructure);
 8010490:	a913      	add	r1, sp, #76	; 0x4c
	ADC_InitStructure.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_Falling;
 8010492:	9315      	str	r3, [sp, #84]	; 0x54
	ADC_Init(ADC3, &ADC_InitStructure);
 8010494:	f8df 921c 	ldr.w	r9, [pc, #540]	; 80106b4 <mcpwm_init+0x384>
	ADC_Init(ADC1, &ADC_InitStructure);
 8010498:	487e      	ldr	r0, [pc, #504]	; (8010694 <mcpwm_init+0x364>)
	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
 801049a:	9413      	str	r4, [sp, #76]	; 0x4c
	ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_T8_CC1;
 801049c:	f04f 6350 	mov.w	r3, #218103808	; 0xd000000
 80104a0:	9316      	str	r3, [sp, #88]	; 0x58
	ADC_InitStructure.ADC_ContinuousConvMode = DISABLE;
 80104a2:	f88d 4051 	strb.w	r4, [sp, #81]	; 0x51
	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 80104a6:	9417      	str	r4, [sp, #92]	; 0x5c
	ADC_InitStructure.ADC_NbrOfConversion = HW_ADC_NBR_CONV;
 80104a8:	f88d 8060 	strb.w	r8, [sp, #96]	; 0x60
	ADC_InitStructure.ADC_ScanConvMode = ENABLE;
 80104ac:	f88d 6050 	strb.w	r6, [sp, #80]	; 0x50
	ADC_Init(ADC1, &ADC_InitStructure);
 80104b0:	f001 f9c6 	bl	8011840 <ADC_Init>
	ADC_Init(ADC2, &ADC_InitStructure);
 80104b4:	a913      	add	r1, sp, #76	; 0x4c
 80104b6:	4878      	ldr	r0, [pc, #480]	; (8010698 <mcpwm_init+0x368>)
 80104b8:	f001 f9c2 	bl	8011840 <ADC_Init>
	ADC_Init(ADC3, &ADC_InitStructure);
 80104bc:	a913      	add	r1, sp, #76	; 0x4c
 80104be:	4648      	mov	r0, r9
 80104c0:	f001 f9be 	bl	8011840 <ADC_Init>
	hw_setup_adc_channels();
 80104c4:	f7ff fb94 	bl	800fbf0 <hw_setup_adc_channels>
	ADC_MultiModeDMARequestAfterLastTransferCmd(ENABLE);
 80104c8:	4630      	mov	r0, r6
 80104ca:	f001 fa51 	bl	8011970 <ADC_MultiModeDMARequestAfterLastTransferCmd>
	ADC_Cmd(ADC1, ENABLE);
 80104ce:	4631      	mov	r1, r6
 80104d0:	4870      	ldr	r0, [pc, #448]	; (8010694 <mcpwm_init+0x364>)
 80104d2:	f001 f9f5 	bl	80118c0 <ADC_Cmd>
	ADC_Cmd(ADC2, ENABLE);
 80104d6:	4631      	mov	r1, r6
 80104d8:	486f      	ldr	r0, [pc, #444]	; (8010698 <mcpwm_init+0x368>)
 80104da:	f001 f9f1 	bl	80118c0 <ADC_Cmd>
	ADC_Cmd(ADC3, ENABLE);
 80104de:	4631      	mov	r1, r6
 80104e0:	4648      	mov	r0, r9
 80104e2:	f001 f9ed 	bl	80118c0 <ADC_Cmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM8, ENABLE);
 80104e6:	4631      	mov	r1, r6
 80104e8:	2002      	movs	r0, #2
 80104ea:	f001 fbe1 	bl	8011cb0 <RCC_APB2PeriphClockCmd>
	TIM_TimeBaseInit(TIM8, &TIM_TimeBaseStructure);
 80104ee:	a903      	add	r1, sp, #12
 80104f0:	4638      	mov	r0, r7
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 80104f2:	f642 1304 	movw	r3, #10500	; 0x2904
	TIM_TimeBaseStructure.TIM_Prescaler = 0;
 80104f6:	9403      	str	r4, [sp, #12]
	TIM_TimeBaseStructure.TIM_Period = SYSTEM_CORE_CLOCK  / (int)PWMFREQ;
 80104f8:	f8ad 4014 	strh.w	r4, [sp, #20]
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 80104fc:	f88d 4016 	strb.w	r4, [sp, #22]
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8010500:	9304      	str	r3, [sp, #16]
	TIM_TimeBaseInit(TIM8, &TIM_TimeBaseStructure);
 8010502:	f001 fcfd 	bl	8011f00 <TIM_TimeBaseInit>
	TIM_OCInitStructure.TIM_Pulse = TIM1->ARR;
 8010506:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 8010508:	4a5b      	ldr	r2, [pc, #364]	; (8010678 <mcpwm_init+0x348>)
 801050a:	920e      	str	r2, [sp, #56]	; 0x38
	TIM_OC1Init(TIM8, &TIM_OCInitStructure);	TIM_OC1PreloadConfig(TIM8, TIM_OCPreload_Enable);
 801050c:	a90e      	add	r1, sp, #56	; 0x38
	TIM_OCInitStructure.TIM_OCNPolarity = TIM_OCNPolarity_High;
 801050e:	4a5b      	ldr	r2, [pc, #364]	; (801067c <mcpwm_init+0x34c>)
 8010510:	9212      	str	r2, [sp, #72]	; 0x48
	TIM_OC1Init(TIM8, &TIM_OCInitStructure);	TIM_OC1PreloadConfig(TIM8, TIM_OCPreload_Enable);
 8010512:	4638      	mov	r0, r7
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
 8010514:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
	TIM_OC1Init(TIM8, &TIM_OCInitStructure);	TIM_OC1PreloadConfig(TIM8, TIM_OCPreload_Enable);
 8010518:	f001 fd6a 	bl	8011ff0 <TIM_OC1Init>
 801051c:	4638      	mov	r0, r7
 801051e:	2108      	movs	r1, #8
 8010520:	f001 fe66 	bl	80121f0 <TIM_OC1PreloadConfig>
	TIM_OC2Init(TIM8, &TIM_OCInitStructure);	TIM_OC2PreloadConfig(TIM8, TIM_OCPreload_Enable);
 8010524:	a90e      	add	r1, sp, #56	; 0x38
 8010526:	4638      	mov	r0, r7
 8010528:	f001 fd9a 	bl	8012060 <TIM_OC2Init>
 801052c:	4638      	mov	r0, r7
 801052e:	2108      	movs	r1, #8
 8010530:	f001 fe66 	bl	8012200 <TIM_OC2PreloadConfig>
	TIM_OC3Init(TIM8, &TIM_OCInitStructure);	TIM_OC3PreloadConfig(TIM8, TIM_OCPreload_Enable);
 8010534:	a90e      	add	r1, sp, #56	; 0x38
 8010536:	4638      	mov	r0, r7
 8010538:	f001 fdda 	bl	80120f0 <TIM_OC3Init>
 801053c:	4638      	mov	r0, r7
 801053e:	2108      	movs	r1, #8
 8010540:	f001 fe6e 	bl	8012220 <TIM_OC3PreloadConfig>
	TIM_ARRPreloadConfig(TIM8, ENABLE);
 8010544:	4631      	mov	r1, r6
 8010546:	4638      	mov	r0, r7
 8010548:	f001 fd32 	bl	8011fb0 <TIM_ARRPreloadConfig>
	TIM_CCPreloadControl(TIM8, ENABLE);
 801054c:	4631      	mov	r1, r6
 801054e:	4638      	mov	r0, r7
 8010550:	f001 fea6 	bl	80122a0 <TIM_CCPreloadControl>
	TIM_CtrlPWMOutputs(TIM8, ENABLE);
 8010554:	4631      	mov	r1, r6
 8010556:	4638      	mov	r0, r7
 8010558:	f001 fe92 	bl	8012280 <TIM_CtrlPWMOutputs>
	TIM_SelectOutputTrigger(TIM1, TIM_TRGOSource_Update);
 801055c:	4628      	mov	r0, r5
 801055e:	2120      	movs	r1, #32
 8010560:	f001 fede 	bl	8012320 <TIM_SelectOutputTrigger>
	TIM_SelectMasterSlaveMode(TIM1, TIM_MasterSlaveMode_Enable);
 8010564:	4628      	mov	r0, r5
 8010566:	2180      	movs	r1, #128	; 0x80
 8010568:	f001 fefa 	bl	8012360 <TIM_SelectMasterSlaveMode>
	TIM_SelectInputTrigger(TIM8, TIM_TS_ITR0);
 801056c:	4621      	mov	r1, r4
 801056e:	4638      	mov	r0, r7
 8010570:	f001 fece 	bl	8012310 <TIM_SelectInputTrigger>
	TIM_SelectSlaveMode(TIM8, TIM_SlaveMode_Reset);
 8010574:	4641      	mov	r1, r8
 8010576:	4638      	mov	r0, r7
 8010578:	f001 fee2 	bl	8012340 <TIM_SelectSlaveMode>
	TIM_Cmd(TIM8, ENABLE);
 801057c:	4631      	mov	r1, r6
 801057e:	4638      	mov	r0, r7
 8010580:	f001 fd26 	bl	8011fd0 <TIM_Cmd>
	TIM_Cmd(TIM1, ENABLE);
 8010584:	4631      	mov	r1, r6
 8010586:	4628      	mov	r0, r5
 8010588:	f001 fd22 	bl	8011fd0 <TIM_Cmd>
	TIM_CtrlPWMOutputs(TIM1, ENABLE);
 801058c:	4631      	mov	r1, r6
 801058e:	4628      	mov	r0, r5
 8010590:	f001 fe76 	bl	8012280 <TIM_CtrlPWMOutputs>
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 8010594:	4631      	mov	r1, r6
 8010596:	4630      	mov	r0, r6
 8010598:	f001 fb7a 	bl	8011c90 <RCC_APB1PeriphClockCmd>
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 801059c:	f04f 39ff 	mov.w	r9, #4294967295
	TIM_TimeBaseStructure.TIM_Prescaler = PrescalerValue;
 80105a0:	2353      	movs	r3, #83	; 0x53
	TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
 80105a2:	a903      	add	r1, sp, #12
 80105a4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 80105a8:	e9cd 3903 	strd	r3, r9, [sp, #12]
	TIM_TimeBaseStructure.TIM_Period = 0xFFFFFFFF;
 80105ac:	f8ad 4014 	strh.w	r4, [sp, #20]
	TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
 80105b0:	f001 fca6 	bl	8011f00 <TIM_TimeBaseInit>
	TIM_Cmd(TIM2, ENABLE);
 80105b4:	4631      	mov	r1, r6
 80105b6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80105ba:	f001 fd09 	bl	8011fd0 <TIM_Cmd>
	TIM1->CR1 |= TIM_CR1_UDIS;
 80105be:	682b      	ldr	r3, [r5, #0]
	TIM_TimeBaseInit(TIM12, &TIM_TimeBaseStructure);
 80105c0:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 80106b8 <mcpwm_init+0x388>
	TIM1->CR1 |= TIM_CR1_UDIS;
 80105c4:	f043 0302 	orr.w	r3, r3, #2
 80105c8:	602b      	str	r3, [r5, #0]
	TIM8->CR1 |= TIM_CR1_UDIS;
 80105ca:	683b      	ldr	r3, [r7, #0]
 80105cc:	f043 0302 	orr.w	r3, r3, #2
 80105d0:	603b      	str	r3, [r7, #0]
	TIM8->CCR1 = TIM1->ARR;//for vdc
 80105d2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80105d4:	637b      	str	r3, [r7, #52]	; 0x34
	TIM8->CCR2 = TIM1->ARR;//for Ib
 80105d6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80105d8:	63bb      	str	r3, [r7, #56]	; 0x38
	TIM8->CCR3 = TIM1->ARR;//for Ia
 80105da:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80105dc:	63fb      	str	r3, [r7, #60]	; 0x3c
	TIM1->CR1 &= ~TIM_CR1_UDIS;
 80105de:	682b      	ldr	r3, [r5, #0]
 80105e0:	f023 0302 	bic.w	r3, r3, #2
 80105e4:	602b      	str	r3, [r5, #0]
	TIM8->CR1 &= ~TIM_CR1_UDIS;
 80105e6:	683b      	ldr	r3, [r7, #0]
	McCtrlBits.DcCalDone = do_dc_cal();
 80105e8:	4d2c      	ldr	r5, [pc, #176]	; (801069c <mcpwm_init+0x36c>)
	TIM8->CR1 &= ~TIM_CR1_UDIS;
 80105ea:	f023 0302 	bic.w	r3, r3, #2
 80105ee:	603b      	str	r3, [r7, #0]
	utils_sys_unlock_cnt();
 80105f0:	f000 ffee 	bl	80115d0 <utils_sys_unlock_cnt>
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM12, ENABLE);
 80105f4:	4631      	mov	r1, r6
 80105f6:	2040      	movs	r0, #64	; 0x40
 80105f8:	f001 fb4a 	bl	8011c90 <RCC_APB1PeriphClockCmd>
	TIM_TimeBaseStructure.TIM_Prescaler = PrescalerValue;
 80105fc:	2307      	movs	r3, #7
	TIM_TimeBaseInit(TIM12, &TIM_TimeBaseStructure);
 80105fe:	a903      	add	r1, sp, #12
 8010600:	4640      	mov	r0, r8
	TIM_TimeBaseStructure.TIM_Prescaler = PrescalerValue;
 8010602:	9303      	str	r3, [sp, #12]
	TIM_TimeBaseStructure.TIM_Period = 0xFFFFFFFF;
 8010604:	f8ad 4014 	strh.w	r4, [sp, #20]
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8010608:	f8cd 9010 	str.w	r9, [sp, #16]
	TIM_TimeBaseInit(TIM12, &TIM_TimeBaseStructure);
 801060c:	f001 fc78 	bl	8011f00 <TIM_TimeBaseInit>
	TIM_Cmd(TIM12, ENABLE);
 8010610:	4631      	mov	r1, r6
 8010612:	4640      	mov	r0, r8
 8010614:	f001 fcdc 	bl	8011fd0 <TIM_Cmd>
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_WWDG, ENABLE);
 8010618:	4631      	mov	r1, r6
 801061a:	4658      	mov	r0, fp
 801061c:	f001 fb38 	bl	8011c90 <RCC_APB1PeriphClockCmd>
	WWDG_SetPrescaler(WWDG_Prescaler_1);
 8010620:	4620      	mov	r0, r4
 8010622:	f001 fecd 	bl	80123c0 <WWDG_SetPrescaler>
	WWDG_SetWindowValue(255);
 8010626:	20ff      	movs	r0, #255	; 0xff
 8010628:	f001 feda 	bl	80123e0 <WWDG_SetWindowValue>
	WWDG_Enable(100);
 801062c:	2064      	movs	r0, #100	; 0x64
 801062e:	f001 fef7 	bl	8012420 <WWDG_Enable>
	SetupControlParameters();
 8010632:	f000 f99d 	bl	8010970 <SetupControlParameters>
	ENABLE_GATE();
 8010636:	4a1a      	ldr	r2, [pc, #104]	; (80106a0 <mcpwm_init+0x370>)
	DCCAL_OFF();
 8010638:	4b1a      	ldr	r3, [pc, #104]	; (80106a4 <mcpwm_init+0x374>)
	ENABLE_GATE();
 801063a:	f8a2 a018 	strh.w	sl, [r2, #24]
	DCCAL_OFF();
 801063e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8010642:	835a      	strh	r2, [r3, #26]
	McCtrlBits.DcCalDone = do_dc_cal();
 8010644:	f000 fab4 	bl	8010bb0 <do_dc_cal>
	chThdCreateStatic(timer_thread_wa, sizeof(timer_thread_wa), NORMALPRIO, timer_thread, NULL);
 8010648:	9400      	str	r4, [sp, #0]
	McCtrlBits.DcCalDone = do_dc_cal();
 801064a:	782c      	ldrb	r4, [r5, #0]
	chThdCreateStatic(timer_thread_wa, sizeof(timer_thread_wa), NORMALPRIO, timer_thread, NULL);
 801064c:	4b16      	ldr	r3, [pc, #88]	; (80106a8 <mcpwm_init+0x378>)
	McCtrlBits.DcCalDone = do_dc_cal();
 801064e:	f360 0482 	bfi	r4, r0, #2, #1
	chThdCreateStatic(timer_thread_wa, sizeof(timer_thread_wa), NORMALPRIO, timer_thread, NULL);
 8010652:	2240      	movs	r2, #64	; 0x40
 8010654:	f44f 61b3 	mov.w	r1, #1432	; 0x598
	McCtrlBits.DcCalDone = do_dc_cal();
 8010658:	702c      	strb	r4, [r5, #0]
	chThdCreateStatic(timer_thread_wa, sizeof(timer_thread_wa), NORMALPRIO, timer_thread, NULL);
 801065a:	4814      	ldr	r0, [pc, #80]	; (80106ac <mcpwm_init+0x37c>)
 801065c:	f7fc fd48 	bl	800d0f0 <chThdCreateStatic>
}
 8010660:	b029      	add	sp, #164	; 0xa4
 8010662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010666:	bf00      	nop
 8010668:	40010000 	.word	0x40010000
 801066c:	40010400 	.word	0x40010400
 8010670:	08013dc0 	.word	0x08013dc0
 8010674:	20001298 	.word	0x20001298
 8010678:	00010060 	.word	0x00010060
 801067c:	02000100 	.word	0x02000100
 8010680:	00400005 	.word	0x00400005
 8010684:	08010031 	.word	0x08010031
 8010688:	08013c00 	.word	0x08013c00
 801068c:	2000132c 	.word	0x2000132c
 8010690:	40012308 	.word	0x40012308
 8010694:	40012000 	.word	0x40012000
 8010698:	40012100 	.word	0x40012100
 801069c:	200020f0 	.word	0x200020f0
 80106a0:	40020800 	.word	0x40020800
 80106a4:	40020400 	.word	0x40020400
 80106a8:	0800fe01 	.word	0x0800fe01
 80106ac:	20001490 	.word	0x20001490
 80106b0:	40026470 	.word	0x40026470
 80106b4:	40012200 	.word	0x40012200
 80106b8:	40001800 	.word	0x40001800
 80106bc:	00000000 	.word	0x00000000

080106c0 <update_timer_Duty>:
{
 80106c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80106c4:	4616      	mov	r6, r2
 80106c6:	4680      	mov	r8, r0
 80106c8:	460f      	mov	r7, r1
	utils_sys_lock_cnt();
 80106ca:	f000 ff71 	bl	80115b0 <utils_sys_lock_cnt>
	TIM1->CR1 |= TIM_CR1_UDIS;
 80106ce:	4b0d      	ldr	r3, [pc, #52]	; (8010704 <update_timer_Duty+0x44>)
	TIM8->CR1 |= TIM_CR1_UDIS;
 80106d0:	4c0d      	ldr	r4, [pc, #52]	; (8010708 <update_timer_Duty+0x48>)
	TIM1->CR1 |= TIM_CR1_UDIS;
 80106d2:	681d      	ldr	r5, [r3, #0]
 80106d4:	f045 0502 	orr.w	r5, r5, #2
 80106d8:	601d      	str	r5, [r3, #0]
	TIM8->CR1 |= TIM_CR1_UDIS;
 80106da:	6825      	ldr	r5, [r4, #0]
 80106dc:	f045 0502 	orr.w	r5, r5, #2
 80106e0:	6025      	str	r5, [r4, #0]
	TIM1->CCR1 = duty_A;
 80106e2:	f8c3 8034 	str.w	r8, [r3, #52]	; 0x34
	TIM1->CCR2 = duty_B;
 80106e6:	639f      	str	r7, [r3, #56]	; 0x38
	TIM1->CCR3 = duty_C;
 80106e8:	63de      	str	r6, [r3, #60]	; 0x3c
	TIM1->CR1 &= ~TIM_CR1_UDIS;
 80106ea:	681a      	ldr	r2, [r3, #0]
 80106ec:	f022 0202 	bic.w	r2, r2, #2
 80106f0:	601a      	str	r2, [r3, #0]
	TIM8->CR1 &= ~TIM_CR1_UDIS;
 80106f2:	6823      	ldr	r3, [r4, #0]
 80106f4:	f023 0302 	bic.w	r3, r3, #2
 80106f8:	6023      	str	r3, [r4, #0]
}
 80106fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	utils_sys_unlock_cnt();
 80106fe:	f000 bf67 	b.w	80115d0 <utils_sys_unlock_cnt>
 8010702:	bf00      	nop
 8010704:	40010000 	.word	0x40010000
 8010708:	40010400 	.word	0x40010400
 801070c:	00000000 	.word	0x00000000

08010710 <sample_send_thread>:
	return (float)RPM / 60.0f;
}



static THD_FUNCTION(sample_send_thread, arg) {
 8010710:	b508      	push	{r3, lr}
 8010712:	4b04      	ldr	r3, [pc, #16]	; (8010724 <sample_send_thread+0x14>)
 8010714:	4a04      	ldr	r2, [pc, #16]	; (8010728 <sample_send_thread+0x18>)
 8010716:	699b      	ldr	r3, [r3, #24]
 8010718:	619a      	str	r2, [r3, #24]

	//chvprintf(&SD1, (uint8_t *)"to mc_interface -> SampleSender\r\n");


	for(;;) {
		chEvtWaitAny((eventmask_t) 1);
 801071a:	2001      	movs	r0, #1
 801071c:	f7fc fe30 	bl	800d380 <chEvtWaitAny>
 8010720:	e7fb      	b.n	801071a <sample_send_thread+0xa>
 8010722:	bf00      	nop
 8010724:	20000c40 	.word	0x20000c40
 8010728:	08013e00 	.word	0x08013e00
 801072c:	00000000 	.word	0x00000000

08010730 <mc_interface_init>:
{
 8010730:	b5f0      	push	{r4, r5, r6, r7, lr}
	m_conf = *configuration;
 8010732:	4c2c      	ldr	r4, [pc, #176]	; (80107e4 <mc_interface_init+0xb4>)
	m_lock_enabled = false;
 8010734:	4d2c      	ldr	r5, [pc, #176]	; (80107e8 <mc_interface_init+0xb8>)
	m_sample_len = 1000;
 8010736:	4f2d      	ldr	r7, [pc, #180]	; (80107ec <mc_interface_init+0xbc>)
	m_sample_at_start = 0;
 8010738:	4e2d      	ldr	r6, [pc, #180]	; (80107f0 <mc_interface_init+0xc0>)
{
 801073a:	b083      	sub	sp, #12
	m_conf = *configuration;
 801073c:	4601      	mov	r1, r0
 801073e:	22d4      	movs	r2, #212	; 0xd4
 8010740:	4620      	mov	r0, r4
 8010742:	f7fc f9d5 	bl	800caf0 <memcpy>
	m_cycles_running = 0;
 8010746:	4b2b      	ldr	r3, [pc, #172]	; (80107f4 <mc_interface_init+0xc4>)
	m_lock_override_once = false;
 8010748:	492b      	ldr	r1, [pc, #172]	; (80107f8 <mc_interface_init+0xc8>)
	m_motor_current_sum = 0.0;
 801074a:	4a2c      	ldr	r2, [pc, #176]	; (80107fc <mc_interface_init+0xcc>)
	m_fault_now = FAULT_CODE_NONE;
 801074c:	2000      	movs	r0, #0
	chThdCreateStatic(sample_send_thread_wa, sizeof(sample_send_thread_wa), NORMALPRIO - 1, sample_send_thread, NULL);
 801074e:	9000      	str	r0, [sp, #0]
	m_cycles_running = 0;
 8010750:	6018      	str	r0, [r3, #0]
	m_motor_current_sum = 0.0;
 8010752:	2300      	movs	r3, #0
	m_lock_enabled = false;
 8010754:	7028      	strb	r0, [r5, #0]
	m_lock_override_once = false;
 8010756:	7008      	strb	r0, [r1, #0]
	m_input_current_sum = 0.0;
 8010758:	4d29      	ldr	r5, [pc, #164]	; (8010800 <mc_interface_init+0xd0>)
	m_motor_current_sum = 0.0;
 801075a:	6013      	str	r3, [r2, #0]
	m_motor_current_iterations = 0.0;
 801075c:	4929      	ldr	r1, [pc, #164]	; (8010804 <mc_interface_init+0xd4>)
	m_input_current_iterations = 0.0;
 801075e:	4a2a      	ldr	r2, [pc, #168]	; (8010808 <mc_interface_init+0xd8>)
	m_input_current_sum = 0.0;
 8010760:	602b      	str	r3, [r5, #0]
	m_motor_current_iterations = 0.0;
 8010762:	600b      	str	r3, [r1, #0]
	m_amp_seconds = 0.0;
 8010764:	4d29      	ldr	r5, [pc, #164]	; (801080c <mc_interface_init+0xdc>)
	m_input_current_iterations = 0.0;
 8010766:	6013      	str	r3, [r2, #0]
	m_amp_seconds_charged = 0.0;
 8010768:	4929      	ldr	r1, [pc, #164]	; (8010810 <mc_interface_init+0xe0>)
	m_watt_seconds = 0.0;
 801076a:	4a2a      	ldr	r2, [pc, #168]	; (8010814 <mc_interface_init+0xe4>)
	m_amp_seconds = 0.0;
 801076c:	602b      	str	r3, [r5, #0]
	m_amp_seconds_charged = 0.0;
 801076e:	600b      	str	r3, [r1, #0]
	m_watt_seconds_charged = 0.0;
 8010770:	4d29      	ldr	r5, [pc, #164]	; (8010818 <mc_interface_init+0xe8>)
	m_watt_seconds = 0.0;
 8010772:	6013      	str	r3, [r2, #0]
	m_position_set = 0.0;
 8010774:	4929      	ldr	r1, [pc, #164]	; (801081c <mc_interface_init+0xec>)
	m_last_adc_duration_sample = 0.0;
 8010776:	4a2a      	ldr	r2, [pc, #168]	; (8010820 <mc_interface_init+0xf0>)
	m_watt_seconds_charged = 0.0;
 8010778:	602b      	str	r3, [r5, #0]
	m_position_set = 0.0;
 801077a:	600b      	str	r3, [r1, #0]
	m_sample_int = 1;
 801077c:	4d29      	ldr	r5, [pc, #164]	; (8010824 <mc_interface_init+0xf4>)
	m_last_adc_duration_sample = 0.0;
 801077e:	6013      	str	r3, [r2, #0]
	m_sample_ready = 1;
 8010780:	4a29      	ldr	r2, [pc, #164]	; (8010828 <mc_interface_init+0xf8>)
	m_sample_now = 0;
 8010782:	492a      	ldr	r1, [pc, #168]	; (801082c <mc_interface_init+0xfc>)
	m_sample_len = 1000;
 8010784:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8010788:	603b      	str	r3, [r7, #0]
	m_sample_int = 1;
 801078a:	2301      	movs	r3, #1
 801078c:	602b      	str	r3, [r5, #0]
	m_sample_ready = 1;
 801078e:	6013      	str	r3, [r2, #0]
	m_fault_now = FAULT_CODE_NONE;
 8010790:	4d27      	ldr	r5, [pc, #156]	; (8010830 <mc_interface_init+0x100>)
	m_start_comm = 0;
 8010792:	4a28      	ldr	r2, [pc, #160]	; (8010834 <mc_interface_init+0x104>)
	m_sample_now = 0;
 8010794:	6008      	str	r0, [r1, #0]
	m_conf.m_sensor_port_mode = SENSOR_PORT_MODE_AS5047_SPI;
 8010796:	2102      	movs	r1, #2
	m_sample_at_start = 0;
 8010798:	6030      	str	r0, [r6, #0]
	chThdCreateStatic(sample_send_thread_wa, sizeof(sample_send_thread_wa), NORMALPRIO - 1, sample_send_thread, NULL);
 801079a:	4b27      	ldr	r3, [pc, #156]	; (8010838 <mc_interface_init+0x108>)
	m_start_comm = 0;
 801079c:	6010      	str	r0, [r2, #0]
	m_fault_now = FAULT_CODE_NONE;
 801079e:	7028      	strb	r0, [r5, #0]
	m_conf.m_sensor_port_mode = SENSOR_PORT_MODE_AS5047_SPI;
 80107a0:	f884 1084 	strb.w	r1, [r4, #132]	; 0x84
	chThdCreateStatic(sample_send_thread_wa, sizeof(sample_send_thread_wa), NORMALPRIO - 1, sample_send_thread, NULL);
 80107a4:	223f      	movs	r2, #63	; 0x3f
 80107a6:	f44f 61b3 	mov.w	r1, #1432	; 0x598
 80107aa:	4824      	ldr	r0, [pc, #144]	; (801083c <mc_interface_init+0x10c>)
 80107ac:	f7fc fca0 	bl	800d0f0 <chThdCreateStatic>
	switch (m_conf.m_sensor_port_mode) {
 80107b0:	f894 3084 	ldrb.w	r3, [r4, #132]	; 0x84
 80107b4:	b2db      	uxtb	r3, r3
 80107b6:	2b01      	cmp	r3, #1
 80107b8:	d009      	beq.n	80107ce <mc_interface_init+0x9e>
 80107ba:	2b02      	cmp	r3, #2
 80107bc:	d101      	bne.n	80107c2 <mc_interface_init+0x92>
			encoder_init_as5047p_spi();
 80107be:	f000 fa8f 	bl	8010ce0 <encoder_init_as5047p_spi>
	mcpwm_init(&m_conf);
 80107c2:	4808      	ldr	r0, [pc, #32]	; (80107e4 <mc_interface_init+0xb4>)
}
 80107c4:	b003      	add	sp, #12
 80107c6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	mcpwm_init(&m_conf);
 80107ca:	f7ff bdb1 	b.w	8010330 <mcpwm_init>
			encoder_init_abi(m_conf.m_encoder_counts);
 80107ce:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80107d2:	f000 fa25 	bl	8010c20 <encoder_init_abi>
	mcpwm_init(&m_conf);
 80107d6:	4803      	ldr	r0, [pc, #12]	; (80107e4 <mc_interface_init+0xb4>)
}
 80107d8:	b003      	add	sp, #12
 80107da:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	mcpwm_init(&m_conf);
 80107de:	f7ff bda7 	b.w	8010330 <mcpwm_init>
 80107e2:	bf00      	nop
 80107e4:	20001a30 	.word	0x20001a30
 80107e8:	20001b18 	.word	0x20001b18
 80107ec:	20001b30 	.word	0x20001b30
 80107f0:	20001b28 	.word	0x20001b28
 80107f4:	20001b04 	.word	0x20001b04
 80107f8:	20001b19 	.word	0x20001b19
 80107fc:	20001b20 	.word	0x20001b20
 8010800:	20001b10 	.word	0x20001b10
 8010804:	20001b1c 	.word	0x20001b1c
 8010808:	20001b0c 	.word	0x20001b0c
 801080c:	20001a28 	.word	0x20001a28
 8010810:	20001a2c 	.word	0x20001a2c
 8010814:	20001b40 	.word	0x20001b40
 8010818:	20001b44 	.word	0x20001b44
 801081c:	20001b24 	.word	0x20001b24
 8010820:	20001b14 	.word	0x20001b14
 8010824:	20001b2c 	.word	0x20001b2c
 8010828:	20001b38 	.word	0x20001b38
 801082c:	20001b34 	.word	0x20001b34
 8010830:	20001b08 	.word	0x20001b08
 8010834:	20001b3c 	.word	0x20001b3c
 8010838:	08010711 	.word	0x08010711
 801083c:	20001b48 	.word	0x20001b48

08010840 <CalcPI>:

}
void CalcPI( tPIParm *pParm)
{
	float U,Exc,Err;
	Err  = pParm->qInRef - pParm->qInMeas;
 8010840:	edd0 5a07 	vldr	s11, [r0, #28]
 8010844:	ed90 6a06 	vldr	s12, [r0, #24]
	
	U  = pParm->qdSum + pParm->qKp * Err;
 8010848:	edd0 7a00 	vldr	s15, [r0]
 801084c:	ed90 7a01 	vldr	s14, [r0, #4]

	if( U > pParm->qOutMax )          pParm->qOut = pParm->qOutMax;
 8010850:	edd0 6a04 	vldr	s13, [r0, #16]
	Err  = pParm->qInRef - pParm->qInMeas;
 8010854:	ee36 6a65 	vsub.f32	s12, s12, s11
	U  = pParm->qdSum + pParm->qKp * Err;
 8010858:	eef0 5a67 	vmov.f32	s11, s15
 801085c:	eee7 5a06 	vfma.f32	s11, s14, s12
	if( U > pParm->qOutMax )          pParm->qOut = pParm->qOutMax;
 8010860:	eef4 6ae5 	vcmpe.f32	s13, s11
 8010864:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	U  = pParm->qdSum + pParm->qKp * Err;
 8010868:	eeb0 7a65 	vmov.f32	s14, s11
	if( U > pParm->qOutMax )          pParm->qOut = pParm->qOutMax;
 801086c:	d40b      	bmi.n	8010886 <CalcPI+0x46>
	else if( U < pParm->qOutMin )    pParm->qOut = pParm->qOutMin;
 801086e:	edd0 6a05 	vldr	s13, [r0, #20]
 8010872:	eef4 6ae5 	vcmpe.f32	s13, s11
 8010876:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801087a:	dc04      	bgt.n	8010886 <CalcPI+0x46>
	else                  pParm->qOut = U ;
 801087c:	eef0 6a65 	vmov.f32	s13, s11
 8010880:	edc0 5a08 	vstr	s11, [r0, #32]
 8010884:	e001      	b.n	801088a <CalcPI+0x4a>
	else if( U < pParm->qOutMin )    pParm->qOut = pParm->qOutMin;
 8010886:	edc0 6a08 	vstr	s13, [r0, #32]

	Exc = U - pParm->qOut;

	pParm->qdSum = pParm->qdSum + pParm->qKi * Err - pParm->qKc * Exc ;
 801088a:	ed90 5a02 	vldr	s10, [r0, #8]
 801088e:	edd0 5a03 	vldr	s11, [r0, #12]
 8010892:	eee5 7a06 	vfma.f32	s15, s10, s12
	Exc = U - pParm->qOut;
 8010896:	ee37 7a66 	vsub.f32	s14, s14, s13
	pParm->qdSum = pParm->qdSum + pParm->qKi * Err - pParm->qKc * Exc ;
 801089a:	eee5 7ac7 	vfms.f32	s15, s11, s14
 801089e:	edc0 7a00 	vstr	s15, [r0]
	
	return;
}
 80108a2:	4770      	bx	lr
	...

080108b0 <CurrentControl>:
{
 80108b0:	b538      	push	{r3, r4, r5, lr}
	PIParmD.qInMeas = ParkParm.qId;
 80108b2:	4b1b      	ldr	r3, [pc, #108]	; (8010920 <CurrentControl+0x70>)
 80108b4:	4c1b      	ldr	r4, [pc, #108]	; (8010924 <CurrentControl+0x74>)
	PIParmD.qInRef	= CtrlParm.qVdRef;
 80108b6:	4d1c      	ldr	r5, [pc, #112]	; (8010928 <CurrentControl+0x78>)
	PIParmD.qInMeas = ParkParm.qId;
 80108b8:	69e1      	ldr	r1, [r4, #28]
	PIParmD.qInRef	= CtrlParm.qVdRef;
 80108ba:	686a      	ldr	r2, [r5, #4]
{
 80108bc:	ed2d 8b02 	vpush	{d8}
	CalcPI(&PIParmD);
 80108c0:	4618      	mov	r0, r3
	PIParmD.qInMeas = ParkParm.qId;
 80108c2:	61d9      	str	r1, [r3, #28]
	PIParmD.qInRef	= CtrlParm.qVdRef;
 80108c4:	619a      	str	r2, [r3, #24]
	CalcPI(&PIParmD);
 80108c6:	f7ff ffbb 	bl	8010840 <CalcPI>
		ParkParm.qVd = PIParmD.qOut;
 80108ca:	edd3 7a08 	vldr	s15, [r3, #32]
	PIParmQ.qOutMax = sqrtf((0.95*0.95) - qVdSquared);
 80108ce:	ed9f 0a17 	vldr	s0, [pc, #92]	; 801092c <CurrentControl+0x7c>
		ParkParm.qVd = PIParmD.qOut;
 80108d2:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
	qVdSquared = ParkParm.qVd * ParkParm.qVd;
 80108d6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80108da:	4b15      	ldr	r3, [pc, #84]	; (8010930 <CurrentControl+0x80>)
	PIParmQ.qOutMax = sqrtf((0.95*0.95) - qVdSquared);
 80108dc:	ee30 0a67 	vsub.f32	s0, s0, s15
	qVdSquared = ParkParm.qVd * ParkParm.qVd;
 80108e0:	edc3 7a00 	vstr	s15, [r3]
 80108e4:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80108e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	PIParmQ.qOutMax = sqrtf((0.95*0.95) - qVdSquared);
 80108ec:	eeb1 8ac0 	vsqrt.f32	s16, s0
 80108f0:	d412      	bmi.n	8010918 <CurrentControl+0x68>
 80108f2:	4b10      	ldr	r3, [pc, #64]	; (8010934 <CurrentControl+0x84>)
	PIParmQ.qInRef	= CtrlParm.qVqRef;
 80108f4:	68a9      	ldr	r1, [r5, #8]
	PIParmQ.qInMeas = ParkParm.qIq;
 80108f6:	6a22      	ldr	r2, [r4, #32]
	PIParmQ.qInRef	= CtrlParm.qVqRef;
 80108f8:	6199      	str	r1, [r3, #24]
	CalcPI(&PIParmQ);
 80108fa:	4618      	mov	r0, r3
	PIParmQ.qInMeas = ParkParm.qIq;
 80108fc:	61da      	str	r2, [r3, #28]
	PIParmQ.qOutMin = -PIParmQ.qOutMax;
 80108fe:	eef1 7a48 	vneg.f32	s15, s16
	PIParmQ.qOutMax = sqrtf((0.95*0.95) - qVdSquared);
 8010902:	ed83 8a04 	vstr	s16, [r3, #16]
	PIParmQ.qOutMin = -PIParmQ.qOutMax;
 8010906:	edc3 7a05 	vstr	s15, [r3, #20]
	CalcPI(&PIParmQ);
 801090a:	f7ff ff99 	bl	8010840 <CalcPI>
}
 801090e:	ecbd 8b02 	vpop	{d8}
		ParkParm.qVq = PIParmQ.qOut;
 8010912:	6a1b      	ldr	r3, [r3, #32]
 8010914:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8010916:	bd38      	pop	{r3, r4, r5, pc}
	PIParmQ.qOutMax = sqrtf((0.95*0.95) - qVdSquared);
 8010918:	f002 f922 	bl	8012b60 <sqrtf>
 801091c:	e7e9      	b.n	80108f2 <CurrentControl+0x42>
 801091e:	bf00      	nop
 8010920:	200020f4 	.word	0x200020f4
 8010924:	20002184 	.word	0x20002184
 8010928:	200020e0 	.word	0x200020e0
 801092c:	3f670a3d 	.word	0x3f670a3d
 8010930:	200021e4 	.word	0x200021e4
 8010934:	2000213c 	.word	0x2000213c
	...

08010940 <SpeedControl>:
	PIParmW.qInMeas = smc1.Omega;
 8010940:	4b05      	ldr	r3, [pc, #20]	; (8010958 <SpeedControl+0x18>)
 8010942:	4906      	ldr	r1, [pc, #24]	; (801095c <SpeedControl+0x1c>)
	PIParmW.qInRef	= CtrlParm.qVelRef;
 8010944:	4a06      	ldr	r2, [pc, #24]	; (8010960 <SpeedControl+0x20>)
	PIParmW.qInMeas = smc1.Omega;
 8010946:	f8d1 10d4 	ldr.w	r1, [r1, #212]	; 0xd4
	PIParmW.qInRef	= CtrlParm.qVelRef;
 801094a:	6812      	ldr	r2, [r2, #0]
	PIParmW.qInMeas = smc1.Omega;
 801094c:	61d9      	str	r1, [r3, #28]
	CalcPI(&PIParmW);
 801094e:	4618      	mov	r0, r3
	PIParmW.qInRef	= CtrlParm.qVelRef;
 8010950:	619a      	str	r2, [r3, #24]
	CalcPI(&PIParmW);
 8010952:	f7ff bf75 	b.w	8010840 <CalcPI>
 8010956:	bf00      	nop
 8010958:	20002160 	.word	0x20002160
 801095c:	2000222c 	.word	0x2000222c
 8010960:	200020e0 	.word	0x200020e0
	...

08010970 <SetupControlParameters>:


void SetupControlParameters(void)
{
 8010970:	b470      	push	{r4, r5, r6}
	MeasCurrParm.Offseta = 0;//curr0_offset;
	MeasCurrParm.Offsetb = 0;//curr1_offset;

	// ============= SVGen ===============
	// Set PWM period to Loop Time
	SVGenParm.iPWMPeriod = TIM1->ARR;
 8010972:	4d1e      	ldr	r5, [pc, #120]	; (80109ec <SetupControlParameters+0x7c>)
 8010974:	4a1e      	ldr	r2, [pc, #120]	; (80109f0 <SetupControlParameters+0x80>)
 8010976:	6aed      	ldr	r5, [r5, #44]	; 0x2c
	MeasCurrParm.qKa    = DQKA;
 8010978:	4c1e      	ldr	r4, [pc, #120]	; (80109f4 <SetupControlParameters+0x84>)

	CtrlParm.qVelRef = 0.0f;
 801097a:	491f      	ldr	r1, [pc, #124]	; (80109f8 <SetupControlParameters+0x88>)
	SVGenParm.iPWMPeriod = TIM1->ARR;
 801097c:	6015      	str	r5, [r2, #0]
	MeasCurrParm.qKb    = DQKB;
 801097e:	2500      	movs	r5, #0
	CtrlParm.qVelRef = 0.0f;
 8010980:	2300      	movs	r3, #0
	CtrlParm.qVdRef = 0.0f;
	CtrlParm.qVqRef = 0.0f;

	// ============= PI D Term ===============
	PIParmD.qKp = DKP;
 8010982:	481e      	ldr	r0, [pc, #120]	; (80109fc <SetupControlParameters+0x8c>)
	PIParmD.qOutMin = -PIParmD.qOutMax;

	InitPI(&PIParmD);

	// ============= PI Q Term ===============
	PIParmQ.qKp = QKP;
 8010984:	4a1e      	ldr	r2, [pc, #120]	; (8010a00 <SetupControlParameters+0x90>)
	MeasCurrParm.qKb    = DQKB;
 8010986:	6125      	str	r5, [r4, #16]
	MeasCurrParm.qKa    = DQKA;
 8010988:	4d1e      	ldr	r5, [pc, #120]	; (8010a04 <SetupControlParameters+0x94>)
	CtrlParm.qVelRef = 0.0f;
 801098a:	600b      	str	r3, [r1, #0]
	CtrlParm.qVdRef = 0.0f;
 801098c:	604b      	str	r3, [r1, #4]
	CtrlParm.qVqRef = 0.0f;
 801098e:	608b      	str	r3, [r1, #8]
	PIParmD.qKp = DKP;
 8010990:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
	PIParmQ.qKp = QKP;
 8010994:	6051      	str	r1, [r2, #4]
	PIParmD.qKi = DKI;
 8010996:	4e1c      	ldr	r6, [pc, #112]	; (8010a08 <SetupControlParameters+0x98>)
	PIParmD.qKp = DKP;
 8010998:	6041      	str	r1, [r0, #4]
	MeasCurrParm.qKa    = DQKA;
 801099a:	e9c4 5502 	strd	r5, r5, [r4, #8]
	PIParmQ.qOutMin = -PIParmQ.qOutMax;

	InitPI(&PIParmQ);

	// ============= PI W Term ===============
	PIParmW.qKp = WKP;
 801099e:	491b      	ldr	r1, [pc, #108]	; (8010a0c <SetupControlParameters+0x9c>)
	PIParmD.qKc = DKC;
 80109a0:	4c1b      	ldr	r4, [pc, #108]	; (8010a10 <SetupControlParameters+0xa0>)
	PIParmD.qOutMin = -PIParmD.qOutMax;
 80109a2:	4d1c      	ldr	r5, [pc, #112]	; (8010a14 <SetupControlParameters+0xa4>)
	PIParmQ.qKi = QKI;
 80109a4:	6096      	str	r6, [r2, #8]
	PIParmQ.qKc = QKC;
 80109a6:	60d4      	str	r4, [r2, #12]
	PIParmD.qKi = DKI;
 80109a8:	6086      	str	r6, [r0, #8]
	PIParmD.qKc = DKC;
 80109aa:	60c4      	str	r4, [r0, #12]
	PIParmD.qOutMax = DOUTMAX;
 80109ac:	6104      	str	r4, [r0, #16]
	PIParmQ.qOutMax = QOUTMAX;
 80109ae:	6114      	str	r4, [r2, #16]
	PIParmD.qOutMin = -PIParmD.qOutMax;
 80109b0:	6145      	str	r5, [r0, #20]
	PIParmQ.qOutMin = -PIParmQ.qOutMax;
 80109b2:	6155      	str	r5, [r2, #20]
	pParm->qdSum=0;
 80109b4:	6003      	str	r3, [r0, #0]
	pParm->qOut=0;
 80109b6:	6203      	str	r3, [r0, #32]
	pParm->qdSum=0;
 80109b8:	6013      	str	r3, [r2, #0]
	pParm->qOut=0;
 80109ba:	6213      	str	r3, [r2, #32]
	PIParmW.qKi = WKI;
 80109bc:	4816      	ldr	r0, [pc, #88]	; (8010a18 <SetupControlParameters+0xa8>)
	PIParmW.qOutMin = -PIParmW.qOutMax;

	InitPI(&PIParmW);

	// ============= PI PLL Term ===============
	PIParmPLL.qKp = PLLKP;		 
 80109be:	4a17      	ldr	r2, [pc, #92]	; (8010a1c <SetupControlParameters+0xac>)
	PIParmW.qKp = WKP;
 80109c0:	4e17      	ldr	r6, [pc, #92]	; (8010a20 <SetupControlParameters+0xb0>)
	PIParmW.qKi = WKI;
 80109c2:	6088      	str	r0, [r1, #8]
	PIParmPLL.qKp = PLLKP;		 
 80109c4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	PIParmW.qOutMax = WOUTMAX;
 80109c8:	4d16      	ldr	r5, [pc, #88]	; (8010a24 <SetupControlParameters+0xb4>)
	PIParmW.qKp = WKP;
 80109ca:	604e      	str	r6, [r1, #4]
	PIParmPLL.qKp = PLLKP;		 
 80109cc:	6050      	str	r0, [r2, #4]
	PIParmPLL.qKi = PLLKI;		 
 80109ce:	4e16      	ldr	r6, [pc, #88]	; (8010a28 <SetupControlParameters+0xb8>)
	PIParmW.qOutMin = -PIParmW.qOutMax;
 80109d0:	4816      	ldr	r0, [pc, #88]	; (8010a2c <SetupControlParameters+0xbc>)
	PIParmW.qKc = WKC;
 80109d2:	60cc      	str	r4, [r1, #12]
	PIParmPLL.qKc = PLLKC;		 
 80109d4:	60d4      	str	r4, [r2, #12]
	PIParmPLL.qKi = PLLKI;		 
 80109d6:	6096      	str	r6, [r2, #8]
	PIParmW.qOutMax = WOUTMAX;
 80109d8:	610d      	str	r5, [r1, #16]
	pParm->qdSum=0;
 80109da:	600b      	str	r3, [r1, #0]
	pParm->qOut=0;
 80109dc:	620b      	str	r3, [r1, #32]
	PIParmW.qOutMin = -PIParmW.qOutMax;
 80109de:	6148      	str	r0, [r1, #20]
	PIParmPLL.qOutMax = PLLOUTMAX;	 
 80109e0:	6115      	str	r5, [r2, #16]
	PIParmPLL.qOutMin = -PIParmPLL.qOutMax;
 80109e2:	6150      	str	r0, [r2, #20]
	pParm->qdSum=0;
 80109e4:	6013      	str	r3, [r2, #0]
	pParm->qOut=0;
 80109e6:	6213      	str	r3, [r2, #32]

	InitPI(&PIParmPLL);

}
 80109e8:	bc70      	pop	{r4, r5, r6}
 80109ea:	4770      	bx	lr
 80109ec:	40010000 	.word	0x40010000
 80109f0:	200021c4 	.word	0x200021c4
 80109f4:	200021e8 	.word	0x200021e8
 80109f8:	200020e0 	.word	0x200020e0
 80109fc:	200020f4 	.word	0x200020f4
 8010a00:	2000213c 	.word	0x2000213c
 8010a04:	3a534067 	.word	0x3a534067
 8010a08:	3a83126f 	.word	0x3a83126f
 8010a0c:	20002160 	.word	0x20002160
 8010a10:	3f7fff58 	.word	0x3f7fff58
 8010a14:	bf7fff58 	.word	0xbf7fff58
 8010a18:	3b23d70a 	.word	0x3b23d70a
 8010a1c:	20002118 	.word	0x20002118
 8010a20:	3dcccccd 	.word	0x3dcccccd
 8010a24:	3f733333 	.word	0x3f733333
 8010a28:	3c23d70a 	.word	0x3c23d70a
 8010a2c:	bf733333 	.word	0xbf733333

08010a30 <CalcTimes>:



void CalcTimes(void)
{
	SVGenParm.T1 = ((float)SVGenParm.iPWMPeriod * SVGenParm.T1);
 8010a30:	4a1b      	ldr	r2, [pc, #108]	; (8010aa0 <CalcTimes+0x70>)
 8010a32:	edd2 7a00 	vldr	s15, [r2]
 8010a36:	edd2 6a04 	vldr	s13, [r2, #16]
	SVGenParm.T2 = ((float)SVGenParm.iPWMPeriod * SVGenParm.T2);
 8010a3a:	ed92 7a05 	vldr	s14, [r2, #20]
	SVGenParm.T1 = ((float)SVGenParm.iPWMPeriod * SVGenParm.T1);
 8010a3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
	SVGenParm.Tc = (((float)SVGenParm.iPWMPeriod-SVGenParm.T1-SVGenParm.T2)/2);
 8010a42:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
	SVGenParm.T1 = ((float)SVGenParm.iPWMPeriod * SVGenParm.T1);
 8010a46:	ee67 6aa6 	vmul.f32	s13, s15, s13
	SVGenParm.T2 = ((float)SVGenParm.iPWMPeriod * SVGenParm.T2);
 8010a4a:	ee27 7a87 	vmul.f32	s14, s15, s14
	SVGenParm.Tc = (((float)SVGenParm.iPWMPeriod-SVGenParm.T1-SVGenParm.T2)/2);
 8010a4e:	ee77 7ae6 	vsub.f32	s15, s15, s13
	SVGenParm.T1 = ((float)SVGenParm.iPWMPeriod * SVGenParm.T1);
 8010a52:	edc2 6a04 	vstr	s13, [r2, #16]
	SVGenParm.Tc = (((float)SVGenParm.iPWMPeriod-SVGenParm.T1-SVGenParm.T2)/2);
 8010a56:	ee77 7ac7 	vsub.f32	s15, s15, s14
	SVGenParm.T2 = ((float)SVGenParm.iPWMPeriod * SVGenParm.T2);
 8010a5a:	ed82 7a05 	vstr	s14, [r2, #20]
	SVGenParm.Tc = (((float)SVGenParm.iPWMPeriod-SVGenParm.T1-SVGenParm.T2)/2);
 8010a5e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8010a62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010a66:	ee17 3a90 	vmov	r3, s15
 8010a6a:	b29b      	uxth	r3, r3
	SVGenParm.Tb = SVGenParm.Tc + SVGenParm.T1;
 8010a6c:	ee07 3a90 	vmov	s15, r3
 8010a70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	SVGenParm.Tc = (((float)SVGenParm.iPWMPeriod-SVGenParm.T1-SVGenParm.T2)/2);
 8010a74:	8393      	strh	r3, [r2, #28]
	SVGenParm.Tb = SVGenParm.Tc + SVGenParm.T1;
 8010a76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010a7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010a7e:	ee17 3a90 	vmov	r3, s15
 8010a82:	b29b      	uxth	r3, r3
	SVGenParm.Ta = SVGenParm.Tb + SVGenParm.T2 ;
 8010a84:	ee07 3a90 	vmov	s15, r3
 8010a88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	SVGenParm.Tb = SVGenParm.Tc + SVGenParm.T1;
 8010a8c:	8353      	strh	r3, [r2, #26]
	SVGenParm.Ta = SVGenParm.Tb + SVGenParm.T2 ;
 8010a8e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010a92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010a96:	ee17 3a90 	vmov	r3, s15
 8010a9a:	8313      	strh	r3, [r2, #24]

	return;
}  
 8010a9c:	4770      	bx	lr
 8010a9e:	bf00      	nop
 8010aa0:	200021c4 	.word	0x200021c4
	...

08010ab0 <CalcSVGen>:

void CalcSVGen( void )
{ 
	if( SVGenParm.qVr1 >= 0 )
 8010ab0:	483d      	ldr	r0, [pc, #244]	; (8010ba8 <CalcSVGen+0xf8>)
 8010ab2:	ed90 7a01 	vldr	s14, [r0, #4]
 8010ab6:	edd0 7a02 	vldr	s15, [r0, #8]
 8010aba:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8010abe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{ 
 8010ac2:	b508      	push	{r3, lr}
	{       
		// (xx1)
		if( SVGenParm.qVr2 >= 0 )
 8010ac4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
	if( SVGenParm.qVr1 >= 0 )
 8010ac8:	db23      	blt.n	8010b12 <CalcSVGen+0x62>
		if( SVGenParm.qVr2 >= 0 )
 8010aca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ace:	da13      	bge.n	8010af8 <CalcSVGen+0x48>
			update_timer_Duty(SVGenParm.Ta,SVGenParm.Tb,SVGenParm.Tc) ;
		}
		else
		{            
			// (x01)
			if( SVGenParm.qVr3 >= 0 )
 8010ad0:	edd0 6a03 	vldr	s13, [r0, #12]
 8010ad4:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8010ad8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010adc:	db41      	blt.n	8010b62 <CalcSVGen+0xb2>
			{
				// Sector 5: (1,0,1)  120-180 degrees
				SVGenParm.T2 = SVGenParm.qVr1;
 8010ade:	ed80 7a05 	vstr	s14, [r0, #20]
				SVGenParm.T1 = SVGenParm.qVr3;
 8010ae2:	edc0 6a04 	vstr	s13, [r0, #16]
				CalcTimes();
 8010ae6:	f7ff ffa3 	bl	8010a30 <CalcTimes>
			CalcTimes();
			update_timer_Duty(SVGenParm.Tc,SVGenParm.Tb,SVGenParm.Ta) ;
		}
	}

}
 8010aea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
				update_timer_Duty(SVGenParm.Tc,SVGenParm.Ta,SVGenParm.Tb) ;
 8010aee:	8b42      	ldrh	r2, [r0, #26]
 8010af0:	8b01      	ldrh	r1, [r0, #24]
 8010af2:	8b80      	ldrh	r0, [r0, #28]
 8010af4:	f7ff bde4 	b.w	80106c0 <update_timer_Duty>
			SVGenParm.T2 = SVGenParm.qVr2;
 8010af8:	edc0 7a05 	vstr	s15, [r0, #20]
			SVGenParm.T1 = SVGenParm.qVr1;
 8010afc:	ed80 7a04 	vstr	s14, [r0, #16]
			CalcTimes();
 8010b00:	f7ff ff96 	bl	8010a30 <CalcTimes>
}
 8010b04:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			update_timer_Duty(SVGenParm.Ta,SVGenParm.Tb,SVGenParm.Tc) ;
 8010b08:	8b82      	ldrh	r2, [r0, #28]
 8010b0a:	8b41      	ldrh	r1, [r0, #26]
 8010b0c:	8b00      	ldrh	r0, [r0, #24]
 8010b0e:	f7ff bdd7 	b.w	80106c0 <update_timer_Duty>
		if( SVGenParm.qVr2 >= 0 )
 8010b12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b16:	db35      	blt.n	8010b84 <CalcSVGen+0xd4>
			if( SVGenParm.qVr3 >= 0 )
 8010b18:	edd0 6a03 	vldr	s13, [r0, #12]
 8010b1c:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8010b20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b24:	db0c      	blt.n	8010b40 <CalcSVGen+0x90>
				SVGenParm.T2 = SVGenParm.qVr3;
 8010b26:	edc0 6a05 	vstr	s13, [r0, #20]
				SVGenParm.T1 = SVGenParm.qVr2;
 8010b2a:	edc0 7a04 	vstr	s15, [r0, #16]
				CalcTimes();
 8010b2e:	f7ff ff7f 	bl	8010a30 <CalcTimes>
}
 8010b32:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
				update_timer_Duty(SVGenParm.Tb,SVGenParm.Tc,SVGenParm.Ta) ;
 8010b36:	8b02      	ldrh	r2, [r0, #24]
 8010b38:	8b81      	ldrh	r1, [r0, #28]
 8010b3a:	8b40      	ldrh	r0, [r0, #26]
 8010b3c:	f7ff bdc0 	b.w	80106c0 <update_timer_Duty>
				SVGenParm.T2 = -SVGenParm.qVr3;
 8010b40:	eef1 6a66 	vneg.f32	s13, s13
				SVGenParm.T1 = -SVGenParm.qVr1;
 8010b44:	eeb1 7a47 	vneg.f32	s14, s14
				SVGenParm.T2 = -SVGenParm.qVr3;
 8010b48:	edc0 6a05 	vstr	s13, [r0, #20]
				SVGenParm.T1 = -SVGenParm.qVr1;
 8010b4c:	ed80 7a04 	vstr	s14, [r0, #16]
				CalcTimes();
 8010b50:	f7ff ff6e 	bl	8010a30 <CalcTimes>
}
 8010b54:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
				update_timer_Duty(SVGenParm.Ta,SVGenParm.Tc,SVGenParm.Tb) ;
 8010b58:	8b42      	ldrh	r2, [r0, #26]
 8010b5a:	8b81      	ldrh	r1, [r0, #28]
 8010b5c:	8b00      	ldrh	r0, [r0, #24]
 8010b5e:	f7ff bdaf 	b.w	80106c0 <update_timer_Duty>
				SVGenParm.T2 = -SVGenParm.qVr2;
 8010b62:	eef1 7a67 	vneg.f32	s15, s15
				SVGenParm.T1 = -SVGenParm.qVr3;
 8010b66:	eef1 6a66 	vneg.f32	s13, s13
				SVGenParm.T2 = -SVGenParm.qVr2;
 8010b6a:	edc0 7a05 	vstr	s15, [r0, #20]
				SVGenParm.T1 = -SVGenParm.qVr3;
 8010b6e:	edc0 6a04 	vstr	s13, [r0, #16]
				CalcTimes();
 8010b72:	f7ff ff5d 	bl	8010a30 <CalcTimes>
}
 8010b76:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
				update_timer_Duty(SVGenParm.Tb,SVGenParm.Ta,SVGenParm.Tc) ;
 8010b7a:	8b82      	ldrh	r2, [r0, #28]
 8010b7c:	8b01      	ldrh	r1, [r0, #24]
 8010b7e:	8b40      	ldrh	r0, [r0, #26]
 8010b80:	f7ff bd9e 	b.w	80106c0 <update_timer_Duty>
			SVGenParm.T2 = -SVGenParm.qVr1;
 8010b84:	eeb1 7a47 	vneg.f32	s14, s14
			SVGenParm.T1 = -SVGenParm.qVr2;
 8010b88:	eef1 7a67 	vneg.f32	s15, s15
			SVGenParm.T2 = -SVGenParm.qVr1;
 8010b8c:	ed80 7a05 	vstr	s14, [r0, #20]
			SVGenParm.T1 = -SVGenParm.qVr2;
 8010b90:	edc0 7a04 	vstr	s15, [r0, #16]
			CalcTimes();
 8010b94:	f7ff ff4c 	bl	8010a30 <CalcTimes>
}
 8010b98:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			update_timer_Duty(SVGenParm.Tc,SVGenParm.Tb,SVGenParm.Ta) ;
 8010b9c:	8b02      	ldrh	r2, [r0, #24]
 8010b9e:	8b41      	ldrh	r1, [r0, #26]
 8010ba0:	8b80      	ldrh	r0, [r0, #28]
 8010ba2:	f7ff bd8d 	b.w	80106c0 <update_timer_Duty>
 8010ba6:	bf00      	nop
 8010ba8:	200021c4 	.word	0x200021c4
 8010bac:	00000000 	.word	0x00000000

08010bb0 <do_dc_cal>:
tMeasCurrParm MeasCurrParm;
tMeasSensorValue MeasSensorValue;


bool do_dc_cal(void)
{
 8010bb0:	b538      	push	{r3, r4, r5, lr}
	uint16_t fault_cnt=0;
	DCCAL_ON();
 8010bb2:	4b18      	ldr	r3, [pc, #96]	; (8010c14 <do_dc_cal+0x64>)
	
	while(IS_DRV_FAULT())
 8010bb4:	4d18      	ldr	r5, [pc, #96]	; (8010c18 <do_dc_cal+0x68>)
	DCCAL_ON();
 8010bb6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8010bba:	831a      	strh	r2, [r3, #24]
	while(IS_DRV_FAULT())
 8010bbc:	692b      	ldr	r3, [r5, #16]
 8010bbe:	04db      	lsls	r3, r3, #19
 8010bc0:	bf58      	it	pl
 8010bc2:	2405      	movpl	r4, #5
 8010bc4:	d40d      	bmi.n	8010be2 <do_dc_cal+0x32>
		if(5 < fault_cnt)
		{
			return false;
		}
		
		chThdSleepMilliseconds(1000);
 8010bc6:	f242 7010 	movw	r0, #10000	; 0x2710
 8010bca:	f7fc fac9 	bl	800d160 <chThdSleep>
	while(IS_DRV_FAULT())
 8010bce:	692b      	ldr	r3, [r5, #16]
 8010bd0:	3c01      	subs	r4, #1
 8010bd2:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8010bd6:	b2a4      	uxth	r4, r4
 8010bd8:	d103      	bne.n	8010be2 <do_dc_cal+0x32>
		if(5 < fault_cnt)
 8010bda:	2c00      	cmp	r4, #0
 8010bdc:	d1f3      	bne.n	8010bc6 <do_dc_cal+0x16>
			return false;
 8010bde:	4620      	mov	r0, r4

	//chvprintf(&SD1, (uint8_t *)"curr0_offset : %u\r\n",MeasCurrParm.Offseta);
	//chvprintf(&SD1, (uint8_t *)"curr1_offset : %u\r\n",MeasCurrParm.Offsetb);

	return true;
}
 8010be0:	bd38      	pop	{r3, r4, r5, pc}
	MeasCurrParm.curr0_sum = 0;
 8010be2:	4c0e      	ldr	r4, [pc, #56]	; (8010c1c <do_dc_cal+0x6c>)
 8010be4:	2300      	movs	r3, #0
	chThdSleepMilliseconds(1000);
 8010be6:	f242 7010 	movw	r0, #10000	; 0x2710
	MeasCurrParm.curr1_sum = 0;
 8010bea:	e9c4 3305 	strd	r3, r3, [r4, #20]
	MeasCurrParm.curr_start_samples = 0;
 8010bee:	83a3      	strh	r3, [r4, #28]
	chThdSleepMilliseconds(1000);
 8010bf0:	f7fc fab6 	bl	800d160 <chThdSleep>
	MeasCurrParm.Offsetb = MeasCurrParm.curr1_sum / MeasCurrParm.curr_start_samples;
 8010bf4:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
	DCCAL_OFF();
 8010bf8:	4806      	ldr	r0, [pc, #24]	; (8010c14 <do_dc_cal+0x64>)
	MeasCurrParm.Offseta = MeasCurrParm.curr0_sum / MeasCurrParm.curr_start_samples;
 8010bfa:	8ba1      	ldrh	r1, [r4, #28]
 8010bfc:	fbb2 f2f1 	udiv	r2, r2, r1
	DCCAL_OFF();
 8010c00:	f44f 5580 	mov.w	r5, #4096	; 0x1000
	MeasCurrParm.Offseta = MeasCurrParm.curr0_sum / MeasCurrParm.curr_start_samples;
 8010c04:	8222      	strh	r2, [r4, #16]
	MeasCurrParm.Offsetb = MeasCurrParm.curr1_sum / MeasCurrParm.curr_start_samples;
 8010c06:	fbb3 f3f1 	udiv	r3, r3, r1
	DCCAL_OFF();
 8010c0a:	8345      	strh	r5, [r0, #26]
	MeasCurrParm.Offsetb = MeasCurrParm.curr1_sum / MeasCurrParm.curr_start_samples;
 8010c0c:	8263      	strh	r3, [r4, #18]
	return true;
 8010c0e:	2001      	movs	r0, #1
}
 8010c10:	bd38      	pop	{r3, r4, r5, pc}
 8010c12:	bf00      	nop
 8010c14:	40020400 	.word	0x40020400
 8010c18:	40020800 	.word	0x40020800
 8010c1c:	200021e8 	.word	0x200021e8

08010c20 <encoder_init_abi>:
	index_found = false;
	EncMode = ENCODER_MODE_NONE;
	//last_enc_angle = 0.0;
}

void encoder_init_abi(uint32_t counts) {
 8010c20:	b570      	push	{r4, r5, r6, lr}
	EXTI_InitTypeDef   EXTI_InitStructure;

	// Initialize variables
	index_found = false;
	enc_counts = counts;
 8010c22:	4e28      	ldr	r6, [pc, #160]	; (8010cc4 <encoder_init_abi+0xa4>)

	palSetPadMode(HW_HALL_ENC_GPIO1, HW_HALL_ENC_PIN1, PAL_MODE_ALTERNATE(HW_ENC_TIM_AF));
 8010c24:	4c28      	ldr	r4, [pc, #160]	; (8010cc8 <encoder_init_abi+0xa8>)
	index_found = false;
 8010c26:	4b29      	ldr	r3, [pc, #164]	; (8010ccc <encoder_init_abi+0xac>)
	enc_counts = counts;
 8010c28:	6030      	str	r0, [r6, #0]
void encoder_init_abi(uint32_t counts) {
 8010c2a:	b082      	sub	sp, #8
	index_found = false;
 8010c2c:	2500      	movs	r5, #0
	palSetPadMode(HW_HALL_ENC_GPIO1, HW_HALL_ENC_PIN1, PAL_MODE_ALTERNATE(HW_ENC_TIM_AF));
 8010c2e:	4620      	mov	r0, r4
 8010c30:	f44f 7281 	mov.w	r2, #258	; 0x102
 8010c34:	2140      	movs	r1, #64	; 0x40
	index_found = false;
 8010c36:	701d      	strb	r5, [r3, #0]
	palSetPadMode(HW_HALL_ENC_GPIO1, HW_HALL_ENC_PIN1, PAL_MODE_ALTERNATE(HW_ENC_TIM_AF));
 8010c38:	f7fd fe52 	bl	800e8e0 <_pal_lld_setgroupmode>
	palSetPadMode(HW_HALL_ENC_GPIO2, HW_HALL_ENC_PIN2, PAL_MODE_ALTERNATE(HW_ENC_TIM_AF));
 8010c3c:	f44f 7281 	mov.w	r2, #258	; 0x102
 8010c40:	4620      	mov	r0, r4
 8010c42:	2180      	movs	r1, #128	; 0x80
 8010c44:	f7fd fe4c 	bl	800e8e0 <_pal_lld_setgroupmode>
//	palSetPadMode(HW_HALL_ENC_GPIO3, HW_HALL_ENC_PIN3, PAL_MODE_ALTERNATE(HW_ENC_TIM_AF));

	// Enable timer clock
	HW_ENC_TIM_CLK_EN();
 8010c48:	2101      	movs	r1, #1
 8010c4a:	2004      	movs	r0, #4

	// Enable SYSCFG clock
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);

	TIM_EncoderInterfaceConfig (HW_ENC_TIM, TIM_EncoderMode_TI12, TIM_ICPolarity_Rising,TIM_ICPolarity_Rising);
 8010c4c:	f5a4 34fe 	sub.w	r4, r4, #130048	; 0x1fc00
	HW_ENC_TIM_CLK_EN();
 8010c50:	f001 f81e 	bl	8011c90 <RCC_APB1PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 8010c54:	2101      	movs	r1, #1
 8010c56:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8010c5a:	f001 f829 	bl	8011cb0 <RCC_APB2PeriphClockCmd>
	TIM_EncoderInterfaceConfig (HW_ENC_TIM, TIM_EncoderMode_TI12, TIM_ICPolarity_Rising,TIM_ICPolarity_Rising);
 8010c5e:	462a      	mov	r2, r5
 8010c60:	462b      	mov	r3, r5
 8010c62:	4620      	mov	r0, r4
 8010c64:	2103      	movs	r1, #3
 8010c66:	f001 fb8b 	bl	8012380 <TIM_EncoderInterfaceConfig>
	TIM_SetAutoreload(HW_ENC_TIM, enc_counts - 1);
 8010c6a:	6831      	ldr	r1, [r6, #0]
 8010c6c:	4620      	mov	r0, r4
 8010c6e:	3901      	subs	r1, #1
 8010c70:	f001 f996 	bl	8011fa0 <TIM_SetAutoreload>

	// Filter
	HW_ENC_TIM->CCMR1 |= 6 << 12 | 6 << 4;
 8010c74:	69a3      	ldr	r3, [r4, #24]
 8010c76:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 8010c7a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8010c7e:	61a3      	str	r3, [r4, #24]
	HW_ENC_TIM->CCMR2 |= 6 << 4;
 8010c80:	69e3      	ldr	r3, [r4, #28]
 8010c82:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8010c86:	61e3      	str	r3, [r4, #28]

	TIM_Cmd(HW_ENC_TIM, ENABLE);
 8010c88:	4620      	mov	r0, r4
 8010c8a:	2101      	movs	r1, #1
 8010c8c:	f001 f9a0 	bl	8011fd0 <TIM_Cmd>

	// Interrupt on index pulse

	// Connect EXTI Line to pin
	SYSCFG_EXTILineConfig(HW_ENC_EXTI_PORTSRC, HW_ENC_EXTI_PINSRC);
 8010c90:	210b      	movs	r1, #11
 8010c92:	2002      	movs	r0, #2
 8010c94:	f001 f83c 	bl	8011d10 <SYSCFG_EXTILineConfig>

	// Configure EXTI Line
	EXTI_InitStructure.EXTI_Line = HW_ENC_EXTI_LINE;
	EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
	EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
	EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 8010c98:	2401      	movs	r4, #1
	EXTI_InitStructure.EXTI_Line = HW_ENC_EXTI_LINE;
 8010c9a:	f44f 6200 	mov.w	r2, #2048	; 0x800
	EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
 8010c9e:	2308      	movs	r3, #8
	EXTI_Init(&EXTI_InitStructure);
 8010ca0:	4668      	mov	r0, sp
	EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
 8010ca2:	f88d 3005 	strb.w	r3, [sp, #5]
	EXTI_InitStructure.EXTI_Line = HW_ENC_EXTI_LINE;
 8010ca6:	9200      	str	r2, [sp, #0]
	EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 8010ca8:	f88d 5004 	strb.w	r5, [sp, #4]
	EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 8010cac:	f88d 4006 	strb.w	r4, [sp, #6]
	EXTI_Init(&EXTI_InitStructure);
 8010cb0:	f000 fed6 	bl	8011a60 <EXTI_Init>

	// Enable and set EXTI Line Interrupt to the highest priority
	nvicEnableVector(HW_ENC_EXTI_CH, 0);
 8010cb4:	4629      	mov	r1, r5
 8010cb6:	2028      	movs	r0, #40	; 0x28
 8010cb8:	f7fd f90a 	bl	800ded0 <nvicEnableVector>

	EncMode = ENCODER_MODE_ABI;
 8010cbc:	4b04      	ldr	r3, [pc, #16]	; (8010cd0 <encoder_init_abi+0xb0>)
 8010cbe:	701c      	strb	r4, [r3, #0]
}
 8010cc0:	b002      	add	sp, #8
 8010cc2:	bd70      	pop	{r4, r5, r6, pc}
 8010cc4:	20000800 	.word	0x20000800
 8010cc8:	40020400 	.word	0x40020400
 8010ccc:	20002224 	.word	0x20002224
 8010cd0:	20002214 	.word	0x20002214
	...

08010ce0 <encoder_init_as5047p_spi>:

void encoder_init_as5047p_spi(void) {
 8010ce0:	b530      	push	{r4, r5, lr}
	TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;

	palSetPadMode(SPI_SW_MISO_GPIO, SPI_SW_MISO_PIN, PAL_MODE_INPUT);
 8010ce2:	4c1f      	ldr	r4, [pc, #124]	; (8010d60 <encoder_init_as5047p_spi+0x80>)
	TIM_TimeBaseStructure.TIM_Prescaler = 0;
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
	TIM_TimeBaseStructure.TIM_Period = ((168000000 / 2 / AS5047_SAMPLE_RATE_HZ) - 1);
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
	TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;
	TIM_TimeBaseInit(HW_ENC_TIM, &TIM_TimeBaseStructure);
 8010ce4:	4d1f      	ldr	r5, [pc, #124]	; (8010d64 <encoder_init_as5047p_spi+0x84>)
void encoder_init_as5047p_spi(void) {
 8010ce6:	b085      	sub	sp, #20
	palSetPadMode(SPI_SW_MISO_GPIO, SPI_SW_MISO_PIN, PAL_MODE_INPUT);
 8010ce8:	4620      	mov	r0, r4
 8010cea:	2200      	movs	r2, #0
 8010cec:	2140      	movs	r1, #64	; 0x40
 8010cee:	f7fd fdf7 	bl	800e8e0 <_pal_lld_setgroupmode>
	palSetPadMode(SPI_SW_SCK_GPIO, SPI_SW_SCK_PIN, PAL_MODE_OUTPUT_PUSHPULL | PAL_STM32_OSPEED_HIGHEST);
 8010cf2:	4620      	mov	r0, r4
 8010cf4:	2219      	movs	r2, #25
 8010cf6:	2120      	movs	r1, #32
 8010cf8:	f7fd fdf2 	bl	800e8e0 <_pal_lld_setgroupmode>
	palSetPadMode(SPI_SW_CS_GPIO, SPI_SW_CS_PIN, PAL_MODE_OUTPUT_PUSHPULL | PAL_STM32_OSPEED_HIGHEST);
 8010cfc:	4620      	mov	r0, r4
 8010cfe:	2219      	movs	r2, #25
 8010d00:	2110      	movs	r1, #16
 8010d02:	f7fd fded 	bl	800e8e0 <_pal_lld_setgroupmode>
	palSetPadMode(SPI_SW_MOSI_GPIO, SPI_SW_MOSI_PIN, PAL_MODE_OUTPUT_PUSHPULL | PAL_STM32_OSPEED_HIGHEST);
 8010d06:	4620      	mov	r0, r4
 8010d08:	2219      	movs	r2, #25
 8010d0a:	2180      	movs	r1, #128	; 0x80
 8010d0c:	f7fd fde8 	bl	800e8e0 <_pal_lld_setgroupmode>
	palSetPad(SPI_SW_MOSI_GPIO, SPI_SW_MOSI_PIN);
 8010d10:	2380      	movs	r3, #128	; 0x80
 8010d12:	8323      	strh	r3, [r4, #24]
	HW_ENC_TIM_CLK_EN();
 8010d14:	2101      	movs	r1, #1
 8010d16:	2004      	movs	r0, #4
 8010d18:	f000 ffba 	bl	8011c90 <RCC_APB1PeriphClockCmd>
	TIM_TimeBaseStructure.TIM_Prescaler = 0;
 8010d1c:	2300      	movs	r3, #0
	TIM_TimeBaseInit(HW_ENC_TIM, &TIM_TimeBaseStructure);
 8010d1e:	4628      	mov	r0, r5
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8010d20:	f242 02cf 	movw	r2, #8399	; 0x20cf
	TIM_TimeBaseInit(HW_ENC_TIM, &TIM_TimeBaseStructure);
 8010d24:	a901      	add	r1, sp, #4
	TIM_TimeBaseStructure.TIM_Prescaler = 0;
 8010d26:	9301      	str	r3, [sp, #4]
	TIM_TimeBaseStructure.TIM_Period = ((168000000 / 2 / AS5047_SAMPLE_RATE_HZ) - 1);
 8010d28:	f8ad 300c 	strh.w	r3, [sp, #12]
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 8010d2c:	f88d 300e 	strb.w	r3, [sp, #14]
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8010d30:	9202      	str	r2, [sp, #8]
	TIM_TimeBaseInit(HW_ENC_TIM, &TIM_TimeBaseStructure);
 8010d32:	f001 f8e5 	bl	8011f00 <TIM_TimeBaseInit>

	// Enable overflow interrupt
	TIM_ITConfig(HW_ENC_TIM, TIM_IT_Update, ENABLE);
 8010d36:	2201      	movs	r2, #1
 8010d38:	4611      	mov	r1, r2
 8010d3a:	4628      	mov	r0, r5
 8010d3c:	f001 fac0 	bl	80122c0 <TIM_ITConfig>

	// Enable timer
	TIM_Cmd(HW_ENC_TIM, ENABLE);
 8010d40:	4628      	mov	r0, r5
 8010d42:	2101      	movs	r1, #1
 8010d44:	f001 f944 	bl	8011fd0 <TIM_Cmd>

	nvicEnableVector(HW_ENC_TIM_ISR_CH, 6);
 8010d48:	2106      	movs	r1, #6
 8010d4a:	201e      	movs	r0, #30
 8010d4c:	f7fd f8c0 	bl	800ded0 <nvicEnableVector>

	EncMode = ENCODER_MODE_AS5047P_SPI;
 8010d50:	4905      	ldr	r1, [pc, #20]	; (8010d68 <encoder_init_as5047p_spi+0x88>)
	index_found = true;
 8010d52:	4b06      	ldr	r3, [pc, #24]	; (8010d6c <encoder_init_as5047p_spi+0x8c>)
	EncMode = ENCODER_MODE_AS5047P_SPI;
 8010d54:	2002      	movs	r0, #2
	index_found = true;
 8010d56:	2201      	movs	r2, #1
	EncMode = ENCODER_MODE_AS5047P_SPI;
 8010d58:	7008      	strb	r0, [r1, #0]
	index_found = true;
 8010d5a:	701a      	strb	r2, [r3, #0]
}
 8010d5c:	b005      	add	sp, #20
 8010d5e:	bd30      	pop	{r4, r5, pc}
 8010d60:	40020000 	.word	0x40020000
 8010d64:	40000800 	.word	0x40000800
 8010d68:	20002214 	.word	0x20002214
 8010d6c:	20002224 	.word	0x20002224

08010d70 <encoder_reset>:

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8010d70:	bf00      	nop
 8010d72:	bf00      	nop
 8010d74:	bf00      	nop
 8010d76:	bf00      	nop
	// most likely are noise.
	__NOP();
	__NOP();
	__NOP();
	__NOP();
	if (palReadPad(HW_HALL_ENC_GPIO3, HW_HALL_ENC_PIN3)) {
 8010d78:	4b14      	ldr	r3, [pc, #80]	; (8010dcc <encoder_reset+0x5c>)
 8010d7a:	691b      	ldr	r3, [r3, #16]
 8010d7c:	051b      	lsls	r3, r3, #20
 8010d7e:	d51d      	bpl.n	8010dbc <encoder_reset+0x4c>
		const unsigned int cnt = HW_ENC_TIM->CNT;
		static int bad_pulses = 0;
		const unsigned int lim = enc_counts / 20;

		if (index_found) {
 8010d80:	4a13      	ldr	r2, [pc, #76]	; (8010dd0 <encoder_reset+0x60>)
		const unsigned int cnt = HW_ENC_TIM->CNT;
 8010d82:	4914      	ldr	r1, [pc, #80]	; (8010dd4 <encoder_reset+0x64>)
		if (index_found) {
 8010d84:	7813      	ldrb	r3, [r2, #0]
		const unsigned int cnt = HW_ENC_TIM->CNT;
 8010d86:	6a48      	ldr	r0, [r1, #36]	; 0x24
		if (index_found) {
 8010d88:	b19b      	cbz	r3, 8010db2 <encoder_reset+0x42>
		const unsigned int lim = enc_counts / 20;
 8010d8a:	4913      	ldr	r1, [pc, #76]	; (8010dd8 <encoder_reset+0x68>)
 8010d8c:	4b13      	ldr	r3, [pc, #76]	; (8010ddc <encoder_reset+0x6c>)
 8010d8e:	6809      	ldr	r1, [r1, #0]
 8010d90:	fba3 c301 	umull	ip, r3, r3, r1
 8010d94:	091b      	lsrs	r3, r3, #4
			// Some plausibility filtering.
			if (cnt > (enc_counts - lim) || cnt < lim) {
 8010d96:	1ac9      	subs	r1, r1, r3
 8010d98:	4281      	cmp	r1, r0
 8010d9a:	d310      	bcc.n	8010dbe <encoder_reset+0x4e>
 8010d9c:	4298      	cmp	r0, r3
 8010d9e:	d30e      	bcc.n	8010dbe <encoder_reset+0x4e>
				HW_ENC_TIM->CNT = 0;
				bad_pulses = 0;
			} else {
				bad_pulses++;
 8010da0:	490f      	ldr	r1, [pc, #60]	; (8010de0 <encoder_reset+0x70>)
 8010da2:	680b      	ldr	r3, [r1, #0]
 8010da4:	3301      	adds	r3, #1

				if (bad_pulses > 5) {
 8010da6:	2b05      	cmp	r3, #5
				bad_pulses++;
 8010da8:	600b      	str	r3, [r1, #0]
				if (bad_pulses > 5) {
 8010daa:	dd07      	ble.n	8010dbc <encoder_reset+0x4c>
					index_found = 0;
 8010dac:	2300      	movs	r3, #0
 8010dae:	7013      	strb	r3, [r2, #0]
 8010db0:	4770      	bx	lr
				}
			}
		} else {
			HW_ENC_TIM->CNT = 0;
			index_found = true;
			bad_pulses = 0;
 8010db2:	480b      	ldr	r0, [pc, #44]	; (8010de0 <encoder_reset+0x70>)
			HW_ENC_TIM->CNT = 0;
 8010db4:	624b      	str	r3, [r1, #36]	; 0x24
			index_found = true;
 8010db6:	2101      	movs	r1, #1
			bad_pulses = 0;
 8010db8:	6003      	str	r3, [r0, #0]
			index_found = true;
 8010dba:	7011      	strb	r1, [r2, #0]
		}
	}
}
 8010dbc:	4770      	bx	lr
				HW_ENC_TIM->CNT = 0;
 8010dbe:	4905      	ldr	r1, [pc, #20]	; (8010dd4 <encoder_reset+0x64>)
				bad_pulses = 0;
 8010dc0:	4a07      	ldr	r2, [pc, #28]	; (8010de0 <encoder_reset+0x70>)
				HW_ENC_TIM->CNT = 0;
 8010dc2:	2300      	movs	r3, #0
 8010dc4:	624b      	str	r3, [r1, #36]	; 0x24
				bad_pulses = 0;
 8010dc6:	6013      	str	r3, [r2, #0]
 8010dc8:	4770      	bx	lr
 8010dca:	bf00      	nop
 8010dcc:	40020800 	.word	0x40020800
 8010dd0:	20002224 	.word	0x20002224
 8010dd4:	40000800 	.word	0x40000800
 8010dd8:	20000800 	.word	0x20000800
 8010ddc:	cccccccd 	.word	0xcccccccd
 8010de0:	20002218 	.word	0x20002218
	...

08010df0 <encoder_AnalogHallEstimation>:
	//DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
}

#else
void encoder_AnalogHallEstimation (tSMC *s)
{
 8010df0:	b510      	push	{r4, lr}
 8010df2:	ed2d 8b02 	vpush	{d8}
	s->costh = cosf(s->Theta);
 8010df6:	edd0 8a2e 	vldr	s17, [r0, #184]	; 0xb8
 8010dfa:	eeb0 0a68 	vmov.f32	s0, s17
{
 8010dfe:	4604      	mov	r4, r0
	s->costh = cosf(s->Theta);
 8010e00:	f001 fb16 	bl	8012430 <cosf>
 8010e04:	eeb0 8a40 	vmov.f32	s16, s0
 8010e08:	ed84 8a24 	vstr	s16, [r4, #144]	; 0x90
	s->sinth = sinf(s->Theta);
 8010e0c:	eeb0 0a68 	vmov.f32	s0, s17
 8010e10:	f001 fdf6 	bl	8012a00 <sinf>
	
	s->Hall_SinCos = s->HallPLLA * s->costh;
 8010e14:	ed94 6a12 	vldr	s12, [r4, #72]	; 0x48
	s->Hall_CosSin = s->HallPLLB * s->sinth;
 8010e18:	ed94 7a14 	vldr	s14, [r4, #80]	; 0x50
	s->sinth = sinf(s->Theta);
 8010e1c:	ed84 0a25 	vstr	s0, [r4, #148]	; 0x94
	s->Hall_SinCos = s->HallPLLA * s->costh;
 8010e20:	ee28 8a06 	vmul.f32	s16, s16, s12
	s->Hall_CosSin = s->HallPLLB * s->sinth;
 8010e24:	ee20 0a07 	vmul.f32	s0, s0, s14

	float err, tmp_kp, tmp_kpi; 									
	tmp_kp = 1.0f;
	tmp_kpi = (1.0f + 1.0f * HALL_SENSOR_PEROID);
	err = s->Hall_SinCos - s->Hall_CosSin; 											
	s->Hall_PIout += ((tmp_kpi * err) - (tmp_kp * s->Hall_Err0)); 					
 8010e28:	edd4 7a11 	vldr	s15, [r4, #68]	; 0x44
 8010e2c:	eddf 5a45 	vldr	s11, [pc, #276]	; 8010f44 <encoder_AnalogHallEstimation+0x154>
 8010e30:	edd4 6a10 	vldr	s13, [r4, #64]	; 0x40
	s->Hall_SinCos = s->HallPLLA * s->costh;
 8010e34:	ed84 8a21 	vstr	s16, [r4, #132]	; 0x84
	err = s->Hall_SinCos - s->Hall_CosSin; 											
 8010e38:	ee38 6a40 	vsub.f32	s12, s16, s0
	s->Hall_PIout = Bound_limit(s->Hall_PIout, 10.0f);						
 8010e3c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
	s->Hall_PIout += ((tmp_kpi * err) - (tmp_kp * s->Hall_Err0)); 					
 8010e40:	eed6 7a25 	vfnms.f32	s15, s12, s11
	s->Hall_CosSin = s->HallPLLB * s->sinth;
 8010e44:	ed84 0a22 	vstr	s0, [r4, #136]	; 0x88
	s->Hall_PIout += ((tmp_kpi * err) - (tmp_kp * s->Hall_Err0)); 					
 8010e48:	ee77 7aa6 	vadd.f32	s15, s15, s13
	s->Hall_PIout = Bound_limit(s->Hall_PIout, 10.0f);						
 8010e4c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010e50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e54:	dc0f      	bgt.n	8010e76 <encoder_AnalogHallEstimation+0x86>
 8010e56:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 8010e5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010e5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e62:	d550      	bpl.n	8010f06 <encoder_AnalogHallEstimation+0x116>
 8010e64:	eef0 7a47 	vmov.f32	s15, s14
 8010e68:	eddf 4a37 	vldr	s9, [pc, #220]	; 8010f48 <encoder_AnalogHallEstimation+0x158>
 8010e6c:	eddf 5a37 	vldr	s11, [pc, #220]	; 8010f4c <encoder_AnalogHallEstimation+0x15c>
 8010e70:	eddf 6a37 	vldr	s13, [pc, #220]	; 8010f50 <encoder_AnalogHallEstimation+0x160>
 8010e74:	e007      	b.n	8010e86 <encoder_AnalogHallEstimation+0x96>
 8010e76:	eddf 4a37 	vldr	s9, [pc, #220]	; 8010f54 <encoder_AnalogHallEstimation+0x164>
 8010e7a:	eddf 5a37 	vldr	s11, [pc, #220]	; 8010f58 <encoder_AnalogHallEstimation+0x168>
 8010e7e:	eddf 6a37 	vldr	s13, [pc, #220]	; 8010f5c <encoder_AnalogHallEstimation+0x16c>
 8010e82:	eef0 7a47 	vmov.f32	s15, s14
	s->Hall_Err0= err;									

	s->Omega = s->Hall_PIout;

	s->angle += s->Hall_PIout ;
 8010e86:	ed94 7a32 	vldr	s14, [r4, #200]	; 0xc8
	if(TWOPI < s->angle) s->angle = s->angle - TWOPI;
 8010e8a:	ed9f 5a35 	vldr	s10, [pc, #212]	; 8010f60 <encoder_AnalogHallEstimation+0x170>
	s->Hall_PIout = Bound_limit(s->Hall_PIout, 10.0f);						
 8010e8e:	edc4 7a10 	vstr	s15, [r4, #64]	; 0x40
	s->angle += s->Hall_PIout ;
 8010e92:	ee37 7a87 	vadd.f32	s14, s15, s14
	s->Hall_Err0= err;									
 8010e96:	ed84 6a11 	vstr	s12, [r4, #68]	; 0x44
	if(TWOPI < s->angle) s->angle = s->angle - TWOPI;
 8010e9a:	eeb4 7ac5 	vcmpe.f32	s14, s10
 8010e9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	s->Omega = s->Hall_PIout;
 8010ea2:	edc4 7a35 	vstr	s15, [r4, #212]	; 0xd4
	if(TWOPI < s->angle) s->angle = s->angle - TWOPI;
 8010ea6:	dd24      	ble.n	8010ef2 <encoder_AnalogHallEstimation+0x102>
 8010ea8:	ee37 7a45 	vsub.f32	s14, s14, s10
 8010eac:	ed84 7a32 	vstr	s14, [r4, #200]	; 0xc8
	else if(s->angle < 0.0f) s->angle = TWOPI + s->angle;

	s->angleCal= s->angle + 0.3f;

	s->ThetaCal += (s->Hall_PIout /7.0f) ;
 8010eb0:	edd4 7a31 	vldr	s15, [r4, #196]	; 0xc4
	s->angleCal= s->angle + 0.3f;
 8010eb4:	ed9f 5a2b 	vldr	s10, [pc, #172]	; 8010f64 <encoder_AnalogHallEstimation+0x174>
	if(TWOPI < s->ThetaCal) s->ThetaCal = s->ThetaCal -TWOPI;
 8010eb8:	ed9f 6a29 	vldr	s12, [pc, #164]	; 8010f60 <encoder_AnalogHallEstimation+0x170>
	s->ThetaCal += (s->Hall_PIout /7.0f) ;
 8010ebc:	ee76 7aa7 	vadd.f32	s15, s13, s15
	s->angleCal= s->angle + 0.3f;
 8010ec0:	ee37 7a05 	vadd.f32	s14, s14, s10
	if(TWOPI < s->ThetaCal) s->ThetaCal = s->ThetaCal -TWOPI;
 8010ec4:	eef4 7ac6 	vcmpe.f32	s15, s12
 8010ec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	s->angleCal= s->angle + 0.3f;
 8010ecc:	ed84 7a33 	vstr	s14, [r4, #204]	; 0xcc
	if(TWOPI < s->ThetaCal) s->ThetaCal = s->ThetaCal -TWOPI;
 8010ed0:	dc2c      	bgt.n	8010f2c <encoder_AnalogHallEstimation+0x13c>
	else if(s->ThetaCal < 0.0f) s->ThetaCal = TWOPI + s->ThetaCal;

	s->Futi   = s->Hall_PIout / TWOPI * HALL_SENSOR_FREQ;
	s->rpm = 120.0f * s->Futi / 7.0f;

}
 8010ed2:	ecbd 8b02 	vpop	{d8}
	else if(s->ThetaCal < 0.0f) s->ThetaCal = TWOPI + s->ThetaCal;
 8010ed6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010eda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ede:	bf48      	it	mi
 8010ee0:	ee77 7a86 	vaddmi.f32	s15, s15, s12
	s->Futi   = s->Hall_PIout / TWOPI * HALL_SENSOR_FREQ;
 8010ee4:	edc4 5a34 	vstr	s11, [r4, #208]	; 0xd0
	else if(s->ThetaCal < 0.0f) s->ThetaCal = TWOPI + s->ThetaCal;
 8010ee8:	edc4 7a31 	vstr	s15, [r4, #196]	; 0xc4
	s->rpm = 120.0f * s->Futi / 7.0f;
 8010eec:	edc4 4a36 	vstr	s9, [r4, #216]	; 0xd8
}
 8010ef0:	bd10      	pop	{r4, pc}
	else if(s->angle < 0.0f) s->angle = TWOPI + s->angle;
 8010ef2:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8010ef6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010efa:	bf48      	it	mi
 8010efc:	ee37 7a05 	vaddmi.f32	s14, s14, s10
 8010f00:	ed84 7a32 	vstr	s14, [r4, #200]	; 0xc8
 8010f04:	e7d4      	b.n	8010eb0 <encoder_AnalogHallEstimation+0xc0>
 8010f06:	ed9f 5a16 	vldr	s10, [pc, #88]	; 8010f60 <encoder_AnalogHallEstimation+0x170>
 8010f0a:	eddf 6a17 	vldr	s13, [pc, #92]	; 8010f68 <encoder_AnalogHallEstimation+0x178>
 8010f0e:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8010f6c <encoder_AnalogHallEstimation+0x17c>
 8010f12:	eec7 5a85 	vdiv.f32	s11, s15, s10
 8010f16:	eeb1 5a0c 	vmov.f32	s10, #28	; 0x40e00000  7.0
 8010f1a:	ee65 5aa6 	vmul.f32	s11, s11, s13
 8010f1e:	eec7 6a85 	vdiv.f32	s13, s15, s10
 8010f22:	ee25 7a87 	vmul.f32	s14, s11, s14
 8010f26:	eec7 4a05 	vdiv.f32	s9, s14, s10
 8010f2a:	e7ac      	b.n	8010e86 <encoder_AnalogHallEstimation+0x96>
}
 8010f2c:	ecbd 8b02 	vpop	{d8}
	if(TWOPI < s->ThetaCal) s->ThetaCal = s->ThetaCal -TWOPI;
 8010f30:	ee77 7ac6 	vsub.f32	s15, s15, s12
	s->Futi   = s->Hall_PIout / TWOPI * HALL_SENSOR_FREQ;
 8010f34:	edc4 5a34 	vstr	s11, [r4, #208]	; 0xd0
	if(TWOPI < s->ThetaCal) s->ThetaCal = s->ThetaCal -TWOPI;
 8010f38:	edc4 7a31 	vstr	s15, [r4, #196]	; 0xc4
	s->rpm = 120.0f * s->Futi / 7.0f;
 8010f3c:	edc4 4a36 	vstr	s9, [r4, #216]	; 0xd8
}
 8010f40:	bd10      	pop	{r4, pc}
 8010f42:	bf00      	nop
 8010f44:	3f8001a3 	.word	0x3f8001a3
 8010f48:	c90538a1 	.word	0xc90538a1
 8010f4c:	c6f8adfa 	.word	0xc6f8adfa
 8010f50:	bfb6db6e 	.word	0xbfb6db6e
 8010f54:	490538a1 	.word	0x490538a1
 8010f58:	46f8adfa 	.word	0x46f8adfa
 8010f5c:	3fb6db6e 	.word	0x3fb6db6e
 8010f60:	40c90fdb 	.word	0x40c90fdb
 8010f64:	3e99999a 	.word	0x3e99999a
 8010f68:	469c4000 	.word	0x469c4000
 8010f6c:	42f00000 	.word	0x42f00000

08010f70 <encoder_tim_isr>:
void encoder_tim_isr(void) {
 8010f70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if(EncMode == ENCODER_MODE_AS5047P_SPI)
 8010f74:	4b7d      	ldr	r3, [pc, #500]	; (801116c <encoder_tim_isr+0x1fc>)
	LED_RED_ON();
 8010f76:	4a7e      	ldr	r2, [pc, #504]	; (8011170 <encoder_tim_isr+0x200>)
	if(EncMode == ENCODER_MODE_AS5047P_SPI)
 8010f78:	781b      	ldrb	r3, [r3, #0]
	LED_RED_ON();
 8010f7a:	2720      	movs	r7, #32
	if(EncMode == ENCODER_MODE_AS5047P_SPI)
 8010f7c:	2b02      	cmp	r3, #2
void encoder_tim_isr(void) {
 8010f7e:	ed2d 8b06 	vpush	{d8-d10}
	LED_RED_ON();
 8010f82:	8317      	strh	r7, [r2, #24]
	if(EncMode == ENCODER_MODE_AS5047P_SPI)
 8010f84:	d02d      	beq.n	8010fe2 <encoder_tim_isr+0x72>
	else if(EncMode == ENCODER_MODE_PWM)
 8010f86:	2b04      	cmp	r3, #4
 8010f88:	d009      	beq.n	8010f9e <encoder_tim_isr+0x2e>
	else if (EncMode == ENCODER_MODE_AHALL)
 8010f8a:	2b03      	cmp	r3, #3
 8010f8c:	f000 80c8 	beq.w	8011120 <encoder_tim_isr+0x1b0>
}
 8010f90:	ecbd 8b06 	vpop	{d8-d10}
	LED_RED_OFF();
 8010f94:	4b76      	ldr	r3, [pc, #472]	; (8011170 <encoder_tim_isr+0x200>)
 8010f96:	2220      	movs	r2, #32
 8010f98:	835a      	strh	r2, [r3, #26]
}
 8010f9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if((TIM4->SR & TIM_IT_CC1)&&(TIM4->DIER & TIM_IT_CC1))
 8010f9e:	4b75      	ldr	r3, [pc, #468]	; (8011174 <encoder_tim_isr+0x204>)
 8010fa0:	691a      	ldr	r2, [r3, #16]
 8010fa2:	0790      	lsls	r0, r2, #30
 8010fa4:	d5f4      	bpl.n	8010f90 <encoder_tim_isr+0x20>
 8010fa6:	68da      	ldr	r2, [r3, #12]
 8010fa8:	0791      	lsls	r1, r2, #30
 8010faa:	d5f1      	bpl.n	8010f90 <encoder_tim_isr+0x20>
			cap1_cnt++;
 8010fac:	4972      	ldr	r1, [pc, #456]	; (8011178 <encoder_tim_isr+0x208>)
			if((GPIOA->IDR >> HW_HALL_ENC_PIN1) & 1U)
 8010fae:	4873      	ldr	r0, [pc, #460]	; (801117c <encoder_tim_isr+0x20c>)
			cap1_cnt++;
 8010fb0:	880a      	ldrh	r2, [r1, #0]
			TIM4->SR = (uint16_t)~TIM_IT_CC1;	// clear flag
 8010fb2:	f64f 74fd 	movw	r4, #65533	; 0xfffd
			cap1_cnt++;
 8010fb6:	3201      	adds	r2, #1
 8010fb8:	800a      	strh	r2, [r1, #0]
			TIM4->SR = (uint16_t)~TIM_IT_CC1;	// clear flag
 8010fba:	611c      	str	r4, [r3, #16]
			if((GPIOA->IDR >> HW_HALL_ENC_PIN1) & 1U)
 8010fbc:	6902      	ldr	r2, [r0, #16]
 8010fbe:	0652      	lsls	r2, r2, #25
 8010fc0:	f140 80c6 	bpl.w	8011150 <encoder_tim_isr+0x1e0>
				pul1_period = (uint32_t)(cap1_r_new - cap1_r_old);
 8010fc4:	486e      	ldr	r0, [pc, #440]	; (8011180 <encoder_tim_isr+0x210>)
				cap1_r_new = TIM4->CCR1; // read capture data
 8010fc6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
				pul1_period = (uint32_t)(cap1_r_new - cap1_r_old);
 8010fc8:	8801      	ldrh	r1, [r0, #0]
				cap1_r_new = TIM4->CCR1; // read capture data
 8010fca:	4c6e      	ldr	r4, [pc, #440]	; (8011184 <encoder_tim_isr+0x214>)
				pul1_period = (uint32_t)(cap1_r_new - cap1_r_old);
 8010fcc:	4d6e      	ldr	r5, [pc, #440]	; (8011188 <encoder_tim_isr+0x218>)
				cap1_r_new = TIM4->CCR1; // read capture data
 8010fce:	b292      	uxth	r2, r2
				pul1_period = (uint32_t)(cap1_r_new - cap1_r_old);
 8010fd0:	1a51      	subs	r1, r2, r1
				cap1_r_old = cap1_r_new;
 8010fd2:	8002      	strh	r2, [r0, #0]
				cap1_r_new = TIM4->CCR1; // read capture data
 8010fd4:	8022      	strh	r2, [r4, #0]
				TIM4->CCER &= ~TIM_CCER_CC1P;	// to falling edge
 8010fd6:	6a1a      	ldr	r2, [r3, #32]
				pul1_period = (uint32_t)(cap1_r_new - cap1_r_old);
 8010fd8:	8029      	strh	r1, [r5, #0]
				TIM4->CCER &= ~TIM_CCER_CC1P;	// to falling edge
 8010fda:	f022 0202 	bic.w	r2, r2, #2
 8010fde:	621a      	str	r2, [r3, #32]
 8010fe0:	e7d6      	b.n	8010f90 <encoder_tim_isr+0x20>
	palClearPad(SPI_SW_CS_GPIO, SPI_SW_CS_PIN);
 8010fe2:	4d66      	ldr	r5, [pc, #408]	; (801117c <encoder_tim_isr+0x20c>)
 8010fe4:	2610      	movs	r6, #16
			palSetPad(SPI_SW_SCK_GPIO, SPI_SW_SCK_PIN);
 8010fe6:	46b8      	mov	r8, r7
	palClearPad(SPI_SW_CS_GPIO, SPI_SW_CS_PIN);
 8010fe8:	836e      	strh	r6, [r5, #26]
 8010fea:	2400      	movs	r4, #0
 8010fec:	bf00      	nop
 8010fee:	bf00      	nop
 8010ff0:	bf00      	nop
 8010ff2:	bf00      	nop
			palSetPad(SPI_SW_SCK_GPIO, SPI_SW_SCK_PIN);
 8010ff4:	f8a5 8018 	strh.w	r8, [r5, #24]
 8010ff8:	bf00      	nop
 8010ffa:	bf00      	nop
 8010ffc:	bf00      	nop
 8010ffe:	bf00      	nop
			r1 = palReadPad(SPI_SW_MISO_GPIO, SPI_SW_MISO_PIN);
 8011000:	6928      	ldr	r0, [r5, #16]
 8011002:	bf00      	nop
			r2 = palReadPad(SPI_SW_MISO_GPIO, SPI_SW_MISO_PIN);
 8011004:	6929      	ldr	r1, [r5, #16]
 8011006:	bf00      	nop
			r3 = palReadPad(SPI_SW_MISO_GPIO, SPI_SW_MISO_PIN);
 8011008:	692a      	ldr	r2, [r5, #16]
			recieve <<= 1;
 801100a:	0064      	lsls	r4, r4, #1
			if (utils_middle_of_3_int(r1, r2, r3)) {
 801100c:	f3c1 1180 	ubfx	r1, r1, #6, #1
 8011010:	f3c0 1080 	ubfx	r0, r0, #6, #1
 8011014:	f3c2 1280 	ubfx	r2, r2, #6, #1
			recieve <<= 1;
 8011018:	b2a4      	uxth	r4, r4
			if (utils_middle_of_3_int(r1, r2, r3)) {
 801101a:	f000 faa9 	bl	8011570 <utils_middle_of_3_int>
 801101e:	b108      	cbz	r0, 8011024 <encoder_tim_isr+0xb4>
				recieve |= 1;
 8011020:	f044 0401 	orr.w	r4, r4, #1
			palClearPad(SPI_SW_SCK_GPIO, SPI_SW_SCK_PIN);
 8011024:	836f      	strh	r7, [r5, #26]
 8011026:	bf00      	nop
 8011028:	bf00      	nop
 801102a:	bf00      	nop
 801102c:	bf00      	nop
		for (int bit = 0;bit < 16;bit++) {
 801102e:	3e01      	subs	r6, #1
 8011030:	d1dc      	bne.n	8010fec <encoder_tim_isr+0x7c>
		vecpos = fmodf((float)pos, 2340.428571f);
 8011032:	f3c4 030d 	ubfx	r3, r4, #0, #14
 8011036:	ed9f 8a55 	vldr	s16, [pc, #340]	; 801118c <encoder_tim_isr+0x21c>
		smc1.Theta = ((float)vecpos * TWOPI) / 2340.428571f;
 801103a:	4e55      	ldr	r6, [pc, #340]	; (8011190 <encoder_tim_isr+0x220>)
		vecpos = fmodf((float)pos, 2340.428571f);
 801103c:	ee00 3a10 	vmov	s0, r3
	palSetPad(SPI_SW_CS_GPIO, SPI_SW_CS_PIN);
 8011040:	2310      	movs	r3, #16
		vecpos = fmodf((float)pos, 2340.428571f);
 8011042:	eef0 0a48 	vmov.f32	s1, s16
	palSetPad(SPI_SW_CS_GPIO, SPI_SW_CS_PIN);
 8011046:	832b      	strh	r3, [r5, #24]
		vecpos = fmodf((float)pos, 2340.428571f);
 8011048:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 801104c:	f001 fd28 	bl	8012aa0 <fmodf>
		smc1.Theta = ((float)vecpos * TWOPI) / 2340.428571f;
 8011050:	eddf 7a50 	vldr	s15, [pc, #320]	; 8011194 <encoder_tim_isr+0x224>
 8011054:	ee60 7a27 	vmul.f32	s15, s0, s15
 8011058:	ee87 9a88 	vdiv.f32	s18, s15, s16
	smc1.HallPLLA = sinf(smc1.Theta);
 801105c:	eeb0 0a49 	vmov.f32	s0, s18
		smc1.Theta = ((float)vecpos * TWOPI) / 2340.428571f;
 8011060:	ed86 9a2e 	vstr	s18, [r6, #184]	; 0xb8
	smc1.HallPLLA = sinf(smc1.Theta);
 8011064:	f001 fccc 	bl	8012a00 <sinf>
 8011068:	eeb0 8a40 	vmov.f32	s16, s0
	smc1.HallPLLB = cosf(smc1.Theta);
 801106c:	eeb0 0a49 	vmov.f32	s0, s18
	smc1.HallPLLA = sinf(smc1.Theta);
 8011070:	ed86 8a12 	vstr	s16, [r6, #72]	; 0x48
	smc1.HallPLLB = cosf(smc1.Theta);
 8011074:	f001 f9dc 	bl	8012430 <cosf>
	smc1.costh = cosf(smc1.Theta_old);
 8011078:	ed96 aa2f 	vldr	s20, [r6, #188]	; 0xbc
	smc1.HallPLLB = cosf(smc1.Theta);
 801107c:	ed86 0a14 	vstr	s0, [r6, #80]	; 0x50
 8011080:	eef0 8a40 	vmov.f32	s17, s0
	smc1.costh = cosf(smc1.Theta_old);
 8011084:	eeb0 0a4a 	vmov.f32	s0, s20
 8011088:	f001 f9d2 	bl	8012430 <cosf>
 801108c:	eef0 9a40 	vmov.f32	s19, s0
	smc1.sinth = sinf(smc1.Theta_old);
 8011090:	eeb0 0a4a 	vmov.f32	s0, s20
	smc1.costh = cosf(smc1.Theta_old);
 8011094:	edc6 9a24 	vstr	s19, [r6, #144]	; 0x90
	smc1.sinth = sinf(smc1.Theta_old);
 8011098:	f001 fcb2 	bl	8012a00 <sinf>
	smc1.Hall_SinCos = smc1.HallPLLA * smc1.costh;
 801109c:	ee28 7a29 	vmul.f32	s14, s16, s19
	smc1.Hall_CosSin = smc1.HallPLLB * smc1.sinth;
 80110a0:	ee68 8a80 	vmul.f32	s17, s17, s0
	smc1.Hall_PIout += ((tmp_kpi * err) - (tmp_kp * smc1.Hall_Err0)); 					
 80110a4:	edd6 7a11 	vldr	s15, [r6, #68]	; 0x44
 80110a8:	eddf 5a3b 	vldr	s11, [pc, #236]	; 8011198 <encoder_tim_isr+0x228>
	smc1.Hall_SinCos = smc1.HallPLLA * smc1.costh;
 80110ac:	ed86 7a21 	vstr	s14, [r6, #132]	; 0x84
	smc1.Hall_PIout += ((tmp_kpi * err) - (tmp_kp * smc1.Hall_Err0)); 					
 80110b0:	ee77 7aa7 	vadd.f32	s15, s15, s15
	err = smc1.Hall_SinCos - smc1.Hall_CosSin; 											
 80110b4:	ee37 7a68 	vsub.f32	s14, s14, s17
	smc1.Hall_PIout += ((tmp_kpi * err) - (tmp_kp * smc1.Hall_Err0)); 					
 80110b8:	ed96 6a10 	vldr	s12, [r6, #64]	; 0x40
	smc1.Hall_CosSin = smc1.HallPLLB * smc1.sinth;
 80110bc:	edc6 8a22 	vstr	s17, [r6, #136]	; 0x88
	smc1.Hall_PIout += ((tmp_kpi * err) - (tmp_kp * smc1.Hall_Err0)); 					
 80110c0:	eed7 7a25 	vfnms.f32	s15, s14, s11
	smc1.Hall_PIout = Bound_limit(smc1.Hall_PIout, 10.0f);						
 80110c4:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
	smc1.Hall_PIout += ((tmp_kpi * err) - (tmp_kp * smc1.Hall_Err0)); 					
 80110c8:	ee77 7a86 	vadd.f32	s15, s15, s12
	smc1.sinth = sinf(smc1.Theta_old);
 80110cc:	ed86 0a25 	vstr	s0, [r6, #148]	; 0x94
	smc1.Hall_PIout = Bound_limit(smc1.Hall_PIout, 10.0f);						
 80110d0:	eef4 7ae6 	vcmpe.f32	s15, s13
 80110d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110d8:	dc26      	bgt.n	8011128 <encoder_tim_isr+0x1b8>
 80110da:	eefa 6a04 	vmov.f32	s13, #164	; 0xc1200000 -10.0
 80110de:	eef4 7ae6 	vcmpe.f32	s15, s13
 80110e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110e6:	d42e      	bmi.n	8011146 <encoder_tim_isr+0x1d6>
 80110e8:	eddf 6a2c 	vldr	s13, [pc, #176]	; 801119c <encoder_tim_isr+0x22c>
 80110ec:	ee67 6aa6 	vmul.f32	s13, s15, s13
	smc1.angle += smc1.Omega * (float)AS5047_SAMPLE_RATE_HZ  ;
 80110f0:	edd6 5a32 	vldr	s11, [r6, #200]	; 0xc8
	if(TWOPI < smc1.angle) smc1.angle = smc1.angle - TWOPI;
 80110f4:	ed9f 6a27 	vldr	s12, [pc, #156]	; 8011194 <encoder_tim_isr+0x224>
	smc1.Hall_PIout = Bound_limit(smc1.Hall_PIout, 10.0f);						
 80110f8:	edc6 7a10 	vstr	s15, [r6, #64]	; 0x40
	smc1.angle += smc1.Omega * (float)AS5047_SAMPLE_RATE_HZ  ;
 80110fc:	ee76 6aa5 	vadd.f32	s13, s13, s11
	smc1.Hall_Err0= err;									
 8011100:	ed86 7a11 	vstr	s14, [r6, #68]	; 0x44
	if(TWOPI < smc1.angle) smc1.angle = smc1.angle - TWOPI;
 8011104:	eef4 6ac6 	vcmpe.f32	s13, s12
 8011108:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	smc1.Omega = smc1.Hall_PIout;
 801110c:	edc6 7a35 	vstr	s15, [r6, #212]	; 0xd4
	if(TWOPI < smc1.angle) smc1.angle = smc1.angle - TWOPI;
 8011110:	dd0f      	ble.n	8011132 <encoder_tim_isr+0x1c2>
 8011112:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8011116:	edc6 6a32 	vstr	s13, [r6, #200]	; 0xc8
	smc1.Theta_old = smc1.Theta; 
 801111a:	ed86 9a2f 	vstr	s18, [r6, #188]	; 0xbc
 801111e:	e737      	b.n	8010f90 <encoder_tim_isr+0x20>
		encoder_AnalogHallEstimation (&smc1);
 8011120:	481b      	ldr	r0, [pc, #108]	; (8011190 <encoder_tim_isr+0x220>)
 8011122:	f7ff fe65 	bl	8010df0 <encoder_AnalogHallEstimation>
 8011126:	e733      	b.n	8010f90 <encoder_tim_isr+0x20>
	smc1.Hall_PIout = Bound_limit(smc1.Hall_PIout, 10.0f);						
 8011128:	eef0 7a66 	vmov.f32	s15, s13
 801112c:	eddf 6a1c 	vldr	s13, [pc, #112]	; 80111a0 <encoder_tim_isr+0x230>
 8011130:	e7de      	b.n	80110f0 <encoder_tim_isr+0x180>
	else if(smc1.angle < 0.0f) smc1.angle = TWOPI + smc1.angle;
 8011132:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8011136:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801113a:	bf48      	it	mi
 801113c:	ee76 6a86 	vaddmi.f32	s13, s13, s12
 8011140:	edc6 6a32 	vstr	s13, [r6, #200]	; 0xc8
 8011144:	e7e9      	b.n	801111a <encoder_tim_isr+0x1aa>
	smc1.Hall_PIout = Bound_limit(smc1.Hall_PIout, 10.0f);						
 8011146:	eef0 7a66 	vmov.f32	s15, s13
 801114a:	eddf 6a16 	vldr	s13, [pc, #88]	; 80111a4 <encoder_tim_isr+0x234>
 801114e:	e7cf      	b.n	80110f0 <encoder_tim_isr+0x180>
				pul1_width = (uint32_t)(cap1_f - cap1_r_new);
 8011150:	490c      	ldr	r1, [pc, #48]	; (8011184 <encoder_tim_isr+0x214>)
				cap1_f = TIM4->CCR1; // read capture data
 8011152:	6b5a      	ldr	r2, [r3, #52]	; 0x34
				pul1_width = (uint32_t)(cap1_f - cap1_r_new);
 8011154:	8809      	ldrh	r1, [r1, #0]
				cap1_f = TIM4->CCR1; // read capture data
 8011156:	4814      	ldr	r0, [pc, #80]	; (80111a8 <encoder_tim_isr+0x238>)
				pul1_width = (uint32_t)(cap1_f - cap1_r_new);
 8011158:	4c14      	ldr	r4, [pc, #80]	; (80111ac <encoder_tim_isr+0x23c>)
				cap1_f = TIM4->CCR1; // read capture data
 801115a:	b292      	uxth	r2, r2
				pul1_width = (uint32_t)(cap1_f - cap1_r_new);
 801115c:	1a51      	subs	r1, r2, r1
				cap1_f = TIM4->CCR1; // read capture data
 801115e:	8002      	strh	r2, [r0, #0]
				TIM4->CCER |= TIM_CCER_CC1P;	// to rising edge
 8011160:	6a1a      	ldr	r2, [r3, #32]
				pul1_width = (uint32_t)(cap1_f - cap1_r_new);
 8011162:	8021      	strh	r1, [r4, #0]
				TIM4->CCER |= TIM_CCER_CC1P;	// to rising edge
 8011164:	f042 0202 	orr.w	r2, r2, #2
 8011168:	621a      	str	r2, [r3, #32]
 801116a:	e711      	b.n	8010f90 <encoder_tim_isr+0x20>
 801116c:	20002214 	.word	0x20002214
 8011170:	40020800 	.word	0x40020800
 8011174:	40000800 	.word	0x40000800
 8011178:	2000221c 	.word	0x2000221c
 801117c:	40020000 	.word	0x40020000
 8011180:	20002222 	.word	0x20002222
 8011184:	20002220 	.word	0x20002220
 8011188:	20002226 	.word	0x20002226
 801118c:	451246db 	.word	0x451246db
 8011190:	2000222c 	.word	0x2000222c
 8011194:	40c90fdb 	.word	0x40c90fdb
 8011198:	40066666 	.word	0x40066666
 801119c:	461c4000 	.word	0x461c4000
 80111a0:	47c35000 	.word	0x47c35000
 80111a4:	c7c35000 	.word	0xc7c35000
 80111a8:	2000221e 	.word	0x2000221e
 80111ac:	20002228 	.word	0x20002228

080111b0 <ledpwm_init>:

// Private variables
static volatile int led_values[LEDPWM_LED_NUM];
static uint8_t gamma_table[LEDPWM_CNT_TOP + 1];

void ledpwm_init(void) {
 80111b0:	b570      	push	{r4, r5, r6, lr}
	memset((int*)led_values, 0, sizeof(led_values));
 80111b2:	4b14      	ldr	r3, [pc, #80]	; (8011204 <ledpwm_init+0x54>)
 80111b4:	4d14      	ldr	r5, [pc, #80]	; (8011208 <ledpwm_init+0x58>)
void ledpwm_init(void) {
 80111b6:	ed2d 8b02 	vpush	{d8}
	memset((int*)led_values, 0, sizeof(led_values));
 80111ba:	2200      	movs	r2, #0

	// Generate gamma correction table
	for (int i = 0;i < (LEDPWM_CNT_TOP + 1);i++) {
		gamma_table[i] = (int)roundf(powf((float)i / (float)LEDPWM_CNT_TOP, 1.0 / 0.45) * (float)LEDPWM_CNT_TOP);
 80111bc:	ed9f 8a13 	vldr	s16, [pc, #76]	; 801120c <ledpwm_init+0x5c>
 80111c0:	eddf 8a13 	vldr	s17, [pc, #76]	; 8011210 <ledpwm_init+0x60>
	memset((int*)led_values, 0, sizeof(led_values));
 80111c4:	601a      	str	r2, [r3, #0]
 80111c6:	f105 06c9 	add.w	r6, r5, #201	; 0xc9
 80111ca:	605a      	str	r2, [r3, #4]
 80111cc:	462c      	mov	r4, r5
		gamma_table[i] = (int)roundf(powf((float)i / (float)LEDPWM_CNT_TOP, 1.0 / 0.45) * (float)LEDPWM_CNT_TOP);
 80111ce:	1b63      	subs	r3, r4, r5
 80111d0:	ee00 3a10 	vmov	s0, r3
 80111d4:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 80111d8:	eef0 0a68 	vmov.f32	s1, s17
 80111dc:	ee80 0a08 	vdiv.f32	s0, s0, s16
 80111e0:	f001 fa06 	bl	80125f0 <powf>
 80111e4:	ee20 0a08 	vmul.f32	s0, s0, s16
 80111e8:	f001 fbda 	bl	80129a0 <roundf>
 80111ec:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80111f0:	ee17 3a90 	vmov	r3, s15
 80111f4:	f804 3b01 	strb.w	r3, [r4], #1
	for (int i = 0;i < (LEDPWM_CNT_TOP + 1);i++) {
 80111f8:	42b4      	cmp	r4, r6
 80111fa:	d1e8      	bne.n	80111ce <ledpwm_init+0x1e>
	}
}
 80111fc:	ecbd 8b02 	vpop	{d8}
 8011200:	bd70      	pop	{r4, r5, r6, pc}
 8011202:	bf00      	nop
 8011204:	200023d4 	.word	0x200023d4
 8011208:	20002308 	.word	0x20002308
 801120c:	43480000 	.word	0x43480000
 8011210:	400e38e4 	.word	0x400e38e4
	...

08011220 <EE_VerifyPageFullWriteVariable>:
 *           - PAGE_FULL: if valid page is full
 *           - NO_VALID_PAGE: if no valid page was found
 *           - Flash error code: on write Flash error
 */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8011220:	b538      	push	{r3, r4, r5, lr}
	PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8011222:	4a1b      	ldr	r2, [pc, #108]	; (8011290 <EE_VerifyPageFullWriteVariable+0x70>)
	PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8011224:	4b1b      	ldr	r3, [pc, #108]	; (8011294 <EE_VerifyPageFullWriteVariable+0x74>)
	PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8011226:	8812      	ldrh	r2, [r2, #0]
	PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8011228:	881b      	ldrh	r3, [r3, #0]
 801122a:	b29c      	uxth	r4, r3
	PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 801122c:	b292      	uxth	r2, r2
		if (PageStatus1 == VALID_PAGE)
 801122e:	b9ec      	cbnz	r4, 801126c <EE_VerifyPageFullWriteVariable+0x4c>
			if (PageStatus0 == RECEIVE_DATA)
 8011230:	f64e 63ee 	movw	r3, #61166	; 0xeeee
				return PAGE0;         /* Page0 valid */
 8011234:	1ad3      	subs	r3, r2, r3
 8011236:	bf18      	it	ne
 8011238:	2301      	movne	r3, #1
	{
		return  NO_VALID_PAGE;
	}

	/* Get the valid Page start Address */
	Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 801123a:	f503 5400 	add.w	r4, r3, #8192	; 0x2000

	/* Get the valid Page end Address */
	PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));
 801123e:	4a16      	ldr	r2, [pc, #88]	; (8011298 <EE_VerifyPageFullWriteVariable+0x78>)
	Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 8011240:	3401      	adds	r4, #1
	PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));
 8011242:	3301      	adds	r3, #1
	Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 8011244:	03a4      	lsls	r4, r4, #14
	PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));
 8011246:	eb02 3283 	add.w	r2, r2, r3, lsl #14

	/* Check each active page address starting from begining */
	while (Address < PageEndAddress)
 801124a:	4294      	cmp	r4, r2
 801124c:	d303      	bcc.n	8011256 <EE_VerifyPageFullWriteVariable+0x36>
 801124e:	e015      	b.n	801127c <EE_VerifyPageFullWriteVariable+0x5c>
			return FlashStatus;
		}
		else
		{
			/* Next address location */
			Address = Address + 4;
 8011250:	3404      	adds	r4, #4
	while (Address < PageEndAddress)
 8011252:	42a2      	cmp	r2, r4
 8011254:	d912      	bls.n	801127c <EE_VerifyPageFullWriteVariable+0x5c>
		if ((*(__IO uint32_t*)Address) == 0xFFFFFFFF)
 8011256:	6823      	ldr	r3, [r4, #0]
 8011258:	3301      	adds	r3, #1
 801125a:	d1f9      	bne.n	8011250 <EE_VerifyPageFullWriteVariable+0x30>
 801125c:	4605      	mov	r5, r0
			FlashStatus = FLASH_ProgramHalfWord(Address, Data);
 801125e:	4620      	mov	r0, r4
 8011260:	f000 fce6 	bl	8011c30 <FLASH_ProgramHalfWord>
			if (FlashStatus != FLASH_COMPLETE)
 8011264:	2809      	cmp	r0, #9
 8011266:	d00d      	beq.n	8011284 <EE_VerifyPageFullWriteVariable+0x64>
			return FlashStatus;
 8011268:	b280      	uxth	r0, r0
		}
	}

	/* Return PAGE_FULL in case the valid page is full */
	return PAGE_FULL;
}
 801126a:	bd38      	pop	{r3, r4, r5, pc}
		else if (PageStatus0 == VALID_PAGE)
 801126c:	b942      	cbnz	r2, 8011280 <EE_VerifyPageFullWriteVariable+0x60>
			if (PageStatus1 == RECEIVE_DATA)
 801126e:	f64e 63ee 	movw	r3, #61166	; 0xeeee
				return PAGE0;         /* Page0 valid */
 8011272:	1ae3      	subs	r3, r4, r3
 8011274:	fab3 f383 	clz	r3, r3
 8011278:	095b      	lsrs	r3, r3, #5
 801127a:	e7de      	b.n	801123a <EE_VerifyPageFullWriteVariable+0x1a>
	return PAGE_FULL;
 801127c:	2080      	movs	r0, #128	; 0x80
}
 801127e:	bd38      	pop	{r3, r4, r5, pc}
		return  NO_VALID_PAGE;
 8011280:	20ab      	movs	r0, #171	; 0xab
}
 8011282:	bd38      	pop	{r3, r4, r5, pc}
			FlashStatus = FLASH_ProgramHalfWord(Address + 2, VirtAddress);
 8011284:	4629      	mov	r1, r5
 8011286:	1ca0      	adds	r0, r4, #2
 8011288:	f000 fcd2 	bl	8011c30 <FLASH_ProgramHalfWord>
 801128c:	e7ec      	b.n	8011268 <EE_VerifyPageFullWriteVariable+0x48>
 801128e:	bf00      	nop
 8011290:	08004000 	.word	0x08004000
 8011294:	08008000 	.word	0x08008000
 8011298:	08003ffe 	.word	0x08003ffe
 801129c:	00000000 	.word	0x00000000

080112a0 <EE_EraseSectorIfNotEmpty.constprop.1>:

/*
 * Erase flash page if it is not already erased. This is to save write cycles and
 * prevent the memory from getting erased in case of unstable voltage at boot.
 */
static uint16_t EE_EraseSectorIfNotEmpty(uint32_t FLASH_Sector, uint8_t VoltageRange) {
 80112a0:	b510      	push	{r4, lr}
 80112a2:	4604      	mov	r4, r0
	uint8_t *addr = flash_helper_get_sector_address(FLASH_Sector);
 80112a4:	f000 f904 	bl	80114b0 <flash_helper_get_sector_address>
 80112a8:	f500 527f 	add.w	r2, r0, #16320	; 0x3fc0
 80112ac:	323f      	adds	r2, #63	; 0x3f
 80112ae:	3801      	subs	r0, #1
 80112b0:	e001      	b.n	80112b6 <EE_EraseSectorIfNotEmpty.constprop.1+0x16>

	for (unsigned int i = 0;i < PAGE_SIZE;i++) {
 80112b2:	4290      	cmp	r0, r2
 80112b4:	d009      	beq.n	80112ca <EE_EraseSectorIfNotEmpty.constprop.1+0x2a>
		if (addr[i] != 0xFF) {
 80112b6:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 80112ba:	2bff      	cmp	r3, #255	; 0xff
 80112bc:	d0f9      	beq.n	80112b2 <EE_EraseSectorIfNotEmpty.constprop.1+0x12>
			return FLASH_EraseSector(FLASH_Sector, VoltageRange);
 80112be:	4620      	mov	r0, r4
 80112c0:	2102      	movs	r1, #2
 80112c2:	f000 fc75 	bl	8011bb0 <FLASH_EraseSector>
 80112c6:	b280      	uxth	r0, r0
		}
	}

	return FLASH_COMPLETE;
}
 80112c8:	bd10      	pop	{r4, pc}
	return FLASH_COMPLETE;
 80112ca:	2009      	movs	r0, #9
}
 80112cc:	bd10      	pop	{r4, pc}
 80112ce:	bf00      	nop

080112d0 <EE_Format>:
{
 80112d0:	b508      	push	{r3, lr}
	FlashStatus = EE_EraseSectorIfNotEmpty(PAGE0_ID, VOLTAGE_RANGE);
 80112d2:	2008      	movs	r0, #8
 80112d4:	f7ff ffe4 	bl	80112a0 <EE_EraseSectorIfNotEmpty.constprop.1>
 80112d8:	b2c0      	uxtb	r0, r0
	if (FlashStatus != FLASH_COMPLETE)
 80112da:	2809      	cmp	r0, #9
 80112dc:	d000      	beq.n	80112e0 <EE_Format+0x10>
}
 80112de:	bd08      	pop	{r3, pc}
	FlashStatus = FLASH_ProgramHalfWord(PAGE0_BASE_ADDRESS, VALID_PAGE);
 80112e0:	2100      	movs	r1, #0
 80112e2:	4805      	ldr	r0, [pc, #20]	; (80112f8 <EE_Format+0x28>)
 80112e4:	f000 fca4 	bl	8011c30 <FLASH_ProgramHalfWord>
	if (FlashStatus != FLASH_COMPLETE)
 80112e8:	2809      	cmp	r0, #9
 80112ea:	d1f8      	bne.n	80112de <EE_Format+0xe>
	FlashStatus = EE_EraseSectorIfNotEmpty(PAGE1_ID, VOLTAGE_RANGE);
 80112ec:	2010      	movs	r0, #16
 80112ee:	f7ff ffd7 	bl	80112a0 <EE_EraseSectorIfNotEmpty.constprop.1>
 80112f2:	b2c0      	uxtb	r0, r0
}
 80112f4:	bd08      	pop	{r3, pc}
 80112f6:	bf00      	nop
 80112f8:	08004000 	.word	0x08004000
 80112fc:	00000000 	.word	0x00000000

08011300 <EE_ReadVariable>:
	PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8011300:	4b14      	ldr	r3, [pc, #80]	; (8011354 <EE_ReadVariable+0x54>)
	PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8011302:	4a15      	ldr	r2, [pc, #84]	; (8011358 <EE_ReadVariable+0x58>)
	PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8011304:	881b      	ldrh	r3, [r3, #0]
	PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8011306:	8812      	ldrh	r2, [r2, #0]
	PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8011308:	b29b      	uxth	r3, r3
{
 801130a:	b410      	push	{r4}
		if (PageStatus0 == VALID_PAGE)
 801130c:	b12b      	cbz	r3, 801131a <EE_ReadVariable+0x1a>
 801130e:	b292      	uxth	r2, r2
		else if (PageStatus1 == VALID_PAGE)
 8011310:	b9da      	cbnz	r2, 801134a <EE_ReadVariable+0x4a>
 8011312:	4b12      	ldr	r3, [pc, #72]	; (801135c <EE_ReadVariable+0x5c>)
 8011314:	4c12      	ldr	r4, [pc, #72]	; (8011360 <EE_ReadVariable+0x60>)
 8011316:	461a      	mov	r2, r3
 8011318:	e002      	b.n	8011320 <EE_ReadVariable+0x20>
		if (PageStatus0 == VALID_PAGE)
 801131a:	4b12      	ldr	r3, [pc, #72]	; (8011364 <EE_ReadVariable+0x64>)
 801131c:	4c12      	ldr	r4, [pc, #72]	; (8011368 <EE_ReadVariable+0x68>)
 801131e:	461a      	mov	r2, r3
		AddressValue = (*(__IO uint16_t*)Address);
 8011320:	8812      	ldrh	r2, [r2, #0]
		if (AddressValue == VirtAddress)
 8011322:	4290      	cmp	r0, r2
 8011324:	d103      	bne.n	801132e <EE_ReadVariable+0x2e>
 8011326:	e009      	b.n	801133c <EE_ReadVariable+0x3c>
		AddressValue = (*(__IO uint16_t*)Address);
 8011328:	881a      	ldrh	r2, [r3, #0]
		if (AddressValue == VirtAddress)
 801132a:	4290      	cmp	r0, r2
 801132c:	d006      	beq.n	801133c <EE_ReadVariable+0x3c>
			Address = Address - 4;
 801132e:	3b04      	subs	r3, #4
	while (Address > (PageStartAddress + 2))
 8011330:	42a3      	cmp	r3, r4
 8011332:	d8f9      	bhi.n	8011328 <EE_ReadVariable+0x28>
	uint16_t AddressValue = 0x5555, ReadStatus = 1;
 8011334:	2001      	movs	r0, #1
}
 8011336:	f85d 4b04 	ldr.w	r4, [sp], #4
 801133a:	4770      	bx	lr
			*Data = (*(__IO uint16_t*)(Address - 2));
 801133c:	f833 3c02 	ldrh.w	r3, [r3, #-2]
 8011340:	800b      	strh	r3, [r1, #0]
			ReadStatus = 0;
 8011342:	2000      	movs	r0, #0
}
 8011344:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011348:	4770      	bx	lr
		return  NO_VALID_PAGE;
 801134a:	20ab      	movs	r0, #171	; 0xab
}
 801134c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011350:	4770      	bx	lr
 8011352:	bf00      	nop
 8011354:	08004000 	.word	0x08004000
 8011358:	08008000 	.word	0x08008000
 801135c:	0800bffe 	.word	0x0800bffe
 8011360:	08008002 	.word	0x08008002
 8011364:	08007ffe 	.word	0x08007ffe
 8011368:	08004002 	.word	0x08004002
 801136c:	00000000 	.word	0x00000000

08011370 <EE_Init>:
{
 8011370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8011374:	4d47      	ldr	r5, [pc, #284]	; (8011494 <EE_Init+0x124>)
	PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8011376:	4e48      	ldr	r6, [pc, #288]	; (8011498 <EE_Init+0x128>)
	PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8011378:	882c      	ldrh	r4, [r5, #0]
	PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 801137a:	8833      	ldrh	r3, [r6, #0]
	PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 801137c:	b2a4      	uxth	r4, r4
	switch (PageStatus0)
 801137e:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8011382:	4294      	cmp	r4, r2
	PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8011384:	b29b      	uxth	r3, r3
	switch (PageStatus0)
 8011386:	d048      	beq.n	801141a <EE_Init+0xaa>
 8011388:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801138c:	428c      	cmp	r4, r1
 801138e:	d035      	beq.n	80113fc <EE_Init+0x8c>
 8011390:	b124      	cbz	r4, 801139c <EE_Init+0x2c>
		FlashStatus = EE_Format();
 8011392:	f7ff ff9d 	bl	80112d0 <EE_Format>
 8011396:	b280      	uxth	r0, r0
}
 8011398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (PageStatus1 == VALID_PAGE) /* Invalid state -> format eeprom */
 801139c:	2b00      	cmp	r3, #0
 801139e:	d0f8      	beq.n	8011392 <EE_Init+0x22>
		else if (PageStatus1 == ERASED) /* Page0 valid, Page1 erased */
 80113a0:	428b      	cmp	r3, r1
 80113a2:	d062      	beq.n	801146a <EE_Init+0xfa>
 80113a4:	4d3d      	ldr	r5, [pc, #244]	; (801149c <EE_Init+0x12c>)
				if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 80113a6:	4f3e      	ldr	r7, [pc, #248]	; (80114a0 <EE_Init+0x130>)
					ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 80113a8:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 80114a4 <EE_Init+0x134>
	int16_t x = -1;
 80113ac:	f04f 36ff 	mov.w	r6, #4294967295
				if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 80113b0:	f835 3b02 	ldrh.w	r3, [r5], #2
 80113b4:	883a      	ldrh	r2, [r7, #0]
					ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 80113b6:	493b      	ldr	r1, [pc, #236]	; (80114a4 <EE_Init+0x134>)
				if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 80113b8:	4293      	cmp	r3, r2
					x = VarIdx;
 80113ba:	bf08      	it	eq
 80113bc:	b226      	sxtheq	r6, r4
				if (VarIdx != x)
 80113be:	42b4      	cmp	r4, r6
					ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 80113c0:	4618      	mov	r0, r3
 80113c2:	f104 0401 	add.w	r4, r4, #1
				if (VarIdx != x)
 80113c6:	d00b      	beq.n	80113e0 <EE_Init+0x70>
					ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 80113c8:	f7ff ff9a 	bl	8011300 <EE_ReadVariable>
					if (ReadStatus != 0x1)
 80113cc:	2801      	cmp	r0, #1
 80113ce:	d007      	beq.n	80113e0 <EE_Init+0x70>
						EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 80113d0:	f8b8 1000 	ldrh.w	r1, [r8]
 80113d4:	f835 0c02 	ldrh.w	r0, [r5, #-2]
 80113d8:	f7ff ff22 	bl	8011220 <EE_VerifyPageFullWriteVariable>
						if (EepromStatus != FLASH_COMPLETE)
 80113dc:	2809      	cmp	r0, #9
 80113de:	d1db      	bne.n	8011398 <EE_Init+0x28>
			for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 80113e0:	2ca0      	cmp	r4, #160	; 0xa0
 80113e2:	d1e5      	bne.n	80113b0 <EE_Init+0x40>
			FlashStatus = FLASH_ProgramHalfWord(PAGE1_BASE_ADDRESS, VALID_PAGE);
 80113e4:	2100      	movs	r1, #0
 80113e6:	482c      	ldr	r0, [pc, #176]	; (8011498 <EE_Init+0x128>)
 80113e8:	f000 fc22 	bl	8011c30 <FLASH_ProgramHalfWord>
 80113ec:	b280      	uxth	r0, r0
			if (FlashStatus != FLASH_COMPLETE)
 80113ee:	2809      	cmp	r0, #9
 80113f0:	d1d2      	bne.n	8011398 <EE_Init+0x28>
			FlashStatus = EE_EraseSectorIfNotEmpty(PAGE0_ID, VOLTAGE_RANGE);
 80113f2:	2008      	movs	r0, #8
}
 80113f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			FlashStatus = EE_EraseSectorIfNotEmpty(PAGE0_ID, VOLTAGE_RANGE);
 80113f8:	f7ff bf52 	b.w	80112a0 <EE_EraseSectorIfNotEmpty.constprop.1>
		if (PageStatus1 == VALID_PAGE) /* Page0 erased, Page1 valid */
 80113fc:	2b00      	cmp	r3, #0
 80113fe:	d0f8      	beq.n	80113f2 <EE_Init+0x82>
		else if (PageStatus1 == RECEIVE_DATA) /* Page0 erased, Page1 receive */
 8011400:	4293      	cmp	r3, r2
 8011402:	d1c6      	bne.n	8011392 <EE_Init+0x22>
			FlashStatus = EE_EraseSectorIfNotEmpty(PAGE0_ID, VOLTAGE_RANGE);
 8011404:	2008      	movs	r0, #8
 8011406:	f7ff ff4b 	bl	80112a0 <EE_EraseSectorIfNotEmpty.constprop.1>
			if (FlashStatus != FLASH_COMPLETE)
 801140a:	2809      	cmp	r0, #9
 801140c:	d1c4      	bne.n	8011398 <EE_Init+0x28>
			FlashStatus = FLASH_ProgramHalfWord(PAGE1_BASE_ADDRESS, VALID_PAGE);
 801140e:	4630      	mov	r0, r6
 8011410:	2100      	movs	r1, #0
 8011412:	f000 fc0d 	bl	8011c30 <FLASH_ProgramHalfWord>
 8011416:	b280      	uxth	r0, r0
 8011418:	e7be      	b.n	8011398 <EE_Init+0x28>
		if (PageStatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
 801141a:	bb5b      	cbnz	r3, 8011474 <EE_Init+0x104>
 801141c:	4d1f      	ldr	r5, [pc, #124]	; (801149c <EE_Init+0x12c>)
				if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 801141e:	4e22      	ldr	r6, [pc, #136]	; (80114a8 <EE_Init+0x138>)
					ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8011420:	4f20      	ldr	r7, [pc, #128]	; (80114a4 <EE_Init+0x134>)
		if (PageStatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
 8011422:	461c      	mov	r4, r3
	int16_t x = -1;
 8011424:	f04f 38ff 	mov.w	r8, #4294967295
				if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 8011428:	f835 3b02 	ldrh.w	r3, [r5], #2
 801142c:	8832      	ldrh	r2, [r6, #0]
					ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 801142e:	491d      	ldr	r1, [pc, #116]	; (80114a4 <EE_Init+0x134>)
				if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 8011430:	4293      	cmp	r3, r2
					x = VarIdx;
 8011432:	bf08      	it	eq
 8011434:	fa0f f884 	sxtheq.w	r8, r4
				if (VarIdx != x)
 8011438:	4544      	cmp	r4, r8
					ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 801143a:	4618      	mov	r0, r3
 801143c:	f104 0401 	add.w	r4, r4, #1
				if (VarIdx != x)
 8011440:	d00a      	beq.n	8011458 <EE_Init+0xe8>
					ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8011442:	f7ff ff5d 	bl	8011300 <EE_ReadVariable>
					if (ReadStatus != 0x1)
 8011446:	2801      	cmp	r0, #1
 8011448:	d006      	beq.n	8011458 <EE_Init+0xe8>
						EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 801144a:	8839      	ldrh	r1, [r7, #0]
 801144c:	f835 0c02 	ldrh.w	r0, [r5, #-2]
 8011450:	f7ff fee6 	bl	8011220 <EE_VerifyPageFullWriteVariable>
						if (EepromStatus != FLASH_COMPLETE)
 8011454:	2809      	cmp	r0, #9
 8011456:	d19f      	bne.n	8011398 <EE_Init+0x28>
			for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8011458:	2ca0      	cmp	r4, #160	; 0xa0
 801145a:	d1e5      	bne.n	8011428 <EE_Init+0xb8>
			FlashStatus = FLASH_ProgramHalfWord(PAGE0_BASE_ADDRESS, VALID_PAGE);
 801145c:	2100      	movs	r1, #0
 801145e:	480d      	ldr	r0, [pc, #52]	; (8011494 <EE_Init+0x124>)
 8011460:	f000 fbe6 	bl	8011c30 <FLASH_ProgramHalfWord>
 8011464:	b280      	uxth	r0, r0
			if (FlashStatus != FLASH_COMPLETE)
 8011466:	2809      	cmp	r0, #9
 8011468:	d196      	bne.n	8011398 <EE_Init+0x28>
			FlashStatus = EE_EraseSectorIfNotEmpty(PAGE1_ID, VOLTAGE_RANGE);
 801146a:	2010      	movs	r0, #16
}
 801146c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			FlashStatus = EE_EraseSectorIfNotEmpty(PAGE1_ID, VOLTAGE_RANGE);
 8011470:	f7ff bf16 	b.w	80112a0 <EE_EraseSectorIfNotEmpty.constprop.1>
		else if (PageStatus1 == ERASED) /* Page0 receive, Page1 erased */
 8011474:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011478:	4293      	cmp	r3, r2
 801147a:	d18a      	bne.n	8011392 <EE_Init+0x22>
			FlashStatus = EE_EraseSectorIfNotEmpty(PAGE1_ID, VOLTAGE_RANGE);
 801147c:	2010      	movs	r0, #16
 801147e:	f7ff ff0f 	bl	80112a0 <EE_EraseSectorIfNotEmpty.constprop.1>
			if (FlashStatus != FLASH_COMPLETE)
 8011482:	2809      	cmp	r0, #9
 8011484:	d188      	bne.n	8011398 <EE_Init+0x28>
			FlashStatus = FLASH_ProgramHalfWord(PAGE0_BASE_ADDRESS, VALID_PAGE);
 8011486:	4628      	mov	r0, r5
 8011488:	2100      	movs	r1, #0
 801148a:	f000 fbd1 	bl	8011c30 <FLASH_ProgramHalfWord>
 801148e:	b280      	uxth	r0, r0
 8011490:	e782      	b.n	8011398 <EE_Init+0x28>
 8011492:	bf00      	nop
 8011494:	08004000 	.word	0x08004000
 8011498:	08008000 	.word	0x08008000
 801149c:	20001344 	.word	0x20001344
 80114a0:	08008006 	.word	0x08008006
 80114a4:	200023dc 	.word	0x200023dc
 80114a8:	08004006 	.word	0x08004006
 80114ac:	00000000 	.word	0x00000000

080114b0 <flash_helper_get_sector_address>:

	// Jump to the bootloader
	jump_to_bootloader();
}

uint8_t* flash_helper_get_sector_address(uint32_t fsector) {
 80114b0:	2200      	movs	r2, #0
 80114b2:	4908      	ldr	r1, [pc, #32]	; (80114d4 <flash_helper_get_sector_address+0x24>)
	uint8_t *res = 0;

	for (int i = 0;i < FLASH_SECTORS;i++) {
 80114b4:	4613      	mov	r3, r2
 80114b6:	e001      	b.n	80114bc <flash_helper_get_sector_address+0xc>
 80114b8:	f831 2f02 	ldrh.w	r2, [r1, #2]!
		if (flash_sector[i] == fsector) {
 80114bc:	4282      	cmp	r2, r0
 80114be:	d004      	beq.n	80114ca <flash_helper_get_sector_address+0x1a>
	for (int i = 0;i < FLASH_SECTORS;i++) {
 80114c0:	3301      	adds	r3, #1
 80114c2:	2b0c      	cmp	r3, #12
 80114c4:	d1f8      	bne.n	80114b8 <flash_helper_get_sector_address+0x8>
	uint8_t *res = 0;
 80114c6:	2000      	movs	r0, #0
			break;
		}
	}

	return res;
}
 80114c8:	4770      	bx	lr
			res = (uint8_t *)flash_addr[i];
 80114ca:	4a03      	ldr	r2, [pc, #12]	; (80114d8 <flash_helper_get_sector_address+0x28>)
 80114cc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
			break;
 80114d0:	4770      	bx	lr
 80114d2:	bf00      	nop
 80114d4:	08013e40 	.word	0x08013e40
 80114d8:	08013e10 	.word	0x08013e10
 80114dc:	00000000 	.word	0x00000000

080114e0 <Vector88>:
	servo_irq();
	CH_IRQ_EPILOGUE();
}
#endif

CH_IRQ_HANDLER(ADC1_2_3_IRQHandler) {
 80114e0:	b508      	push	{r3, lr}
	CH_IRQ_PROLOGUE();
	ADC_ClearITPendingBit(ADC1, ADC_IT_EOC);
 80114e2:	f240 2105 	movw	r1, #517	; 0x205
 80114e6:	4803      	ldr	r0, [pc, #12]	; (80114f4 <Vector88+0x14>)
 80114e8:	f000 fa52 	bl	8011990 <ADC_ClearITPendingBit>
	//mc_interface_adc_inj_int_handler();
	CH_IRQ_EPILOGUE();
}
 80114ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	CH_IRQ_EPILOGUE();
 80114f0:	f7fc b8fe 	b.w	800d6f0 <_port_irq_epilogue>
 80114f4:	40012000 	.word	0x40012000
	...

08011500 <VectorE0>:

CH_IRQ_HANDLER(HW_ENC_EXTI_ISR_VEC) {
 8011500:	b508      	push	{r3, lr}
	if (EXTI_GetITStatus(HW_ENC_EXTI_LINE) != RESET) {
 8011502:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8011506:	f000 faf3 	bl	8011af0 <EXTI_GetITStatus>
 801150a:	b900      	cbnz	r0, 801150e <VectorE0+0xe>
		encoder_reset();

		// Clear the EXTI line pending bit
		EXTI_ClearITPendingBit(HW_ENC_EXTI_LINE);
	}
}
 801150c:	bd08      	pop	{r3, pc}
		encoder_reset();
 801150e:	f7ff fc2f 	bl	8010d70 <encoder_reset>
		EXTI_ClearITPendingBit(HW_ENC_EXTI_LINE);
 8011512:	f44f 6000 	mov.w	r0, #2048	; 0x800
}
 8011516:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		EXTI_ClearITPendingBit(HW_ENC_EXTI_LINE);
 801151a:	f000 baf1 	b.w	8011b00 <EXTI_ClearITPendingBit>
 801151e:	bf00      	nop

08011520 <VectorB8>:

CH_IRQ_HANDLER(HW_ENC_TIM_ISR_VEC) {
 8011520:	b508      	push	{r3, lr}
	if (TIM_GetITStatus(HW_ENC_TIM, TIM_IT_Update) != RESET) {
 8011522:	2101      	movs	r1, #1
 8011524:	4806      	ldr	r0, [pc, #24]	; (8011540 <VectorB8+0x20>)
 8011526:	f000 fedb 	bl	80122e0 <TIM_GetITStatus>
 801152a:	b900      	cbnz	r0, 801152e <VectorB8+0xe>
		encoder_tim_isr();

		// Clear the IT pending bit
		TIM_ClearITPendingBit(HW_ENC_TIM, TIM_IT_Update);
	}
}
 801152c:	bd08      	pop	{r3, pc}
		encoder_tim_isr();
 801152e:	f7ff fd1f 	bl	8010f70 <encoder_tim_isr>
		TIM_ClearITPendingBit(HW_ENC_TIM, TIM_IT_Update);
 8011532:	2101      	movs	r1, #1
 8011534:	4802      	ldr	r0, [pc, #8]	; (8011540 <VectorB8+0x20>)
}
 8011536:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		TIM_ClearITPendingBit(HW_ENC_TIM, TIM_IT_Update);
 801153a:	f000 bee1 	b.w	8012300 <TIM_ClearITPendingBit>
 801153e:	bf00      	nop
 8011540:	40000800 	.word	0x40000800
	...

08011550 <VectorF8>:

CH_IRQ_HANDLER(TIM8_CC_IRQHandler) {
 8011550:	b508      	push	{r3, lr}
	if (TIM_GetITStatus(TIM8, TIM_IT_CC1) != RESET) {
 8011552:	2102      	movs	r1, #2
 8011554:	4805      	ldr	r0, [pc, #20]	; (801156c <VectorF8+0x1c>)
 8011556:	f000 fec3 	bl	80122e0 <TIM_GetITStatus>
 801155a:	b900      	cbnz	r0, 801155e <VectorF8+0xe>
		//mcpwm_foc_tim_sample_int_handler();

		// Clear the IT pending bit
		TIM_ClearITPendingBit(TIM8, TIM_IT_CC1);
	}
}
 801155c:	bd08      	pop	{r3, pc}
		TIM_ClearITPendingBit(TIM8, TIM_IT_CC1);
 801155e:	2102      	movs	r1, #2
 8011560:	4802      	ldr	r0, [pc, #8]	; (801156c <VectorF8+0x1c>)
}
 8011562:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		TIM_ClearITPendingBit(TIM8, TIM_IT_CC1);
 8011566:	f000 becb 	b.w	8012300 <TIM_ClearITPendingBit>
 801156a:	bf00      	nop
 801156c:	40010400 	.word	0x40010400

08011570 <utils_middle_of_3_int>:
 * The middle value
 */
int utils_middle_of_3_int(int a, int b, int c) {
	int middle;

	if ((a <= b) && (a <= c)) {
 8011570:	4288      	cmp	r0, r1
 8011572:	dd05      	ble.n	8011580 <utils_middle_of_3_int+0x10>
		middle = (b <= c) ? b : c;
	} else if ((b <= a) && (b <= c)) {
 8011574:	4291      	cmp	r1, r2
 8011576:	dd0b      	ble.n	8011590 <utils_middle_of_3_int+0x20>
		middle = (a <= c) ? a : c;
	} else {
		middle = (a <= b) ? a : b;
 8011578:	4288      	cmp	r0, r1
 801157a:	bfa8      	it	ge
 801157c:	4608      	movge	r0, r1
	}
	return middle;
}
 801157e:	4770      	bx	lr
	if ((a <= b) && (a <= c)) {
 8011580:	4290      	cmp	r0, r2
 8011582:	dd09      	ble.n	8011598 <utils_middle_of_3_int+0x28>
	} else if ((b <= a) && (b <= c)) {
 8011584:	4288      	cmp	r0, r1
 8011586:	daf5      	bge.n	8011574 <utils_middle_of_3_int+0x4>
		middle = (a <= b) ? a : b;
 8011588:	4288      	cmp	r0, r1
 801158a:	bfa8      	it	ge
 801158c:	4608      	movge	r0, r1
}
 801158e:	4770      	bx	lr
		middle = (a <= c) ? a : c;
 8011590:	4290      	cmp	r0, r2
 8011592:	bfa8      	it	ge
 8011594:	4610      	movge	r0, r2
 8011596:	4770      	bx	lr
		middle = (b <= c) ? b : c;
 8011598:	4291      	cmp	r1, r2
 801159a:	bfa8      	it	ge
 801159c:	4611      	movge	r1, r2
 801159e:	4608      	mov	r0, r1
 80115a0:	4770      	bx	lr
 80115a2:	bf00      	nop
	...

080115b0 <utils_sys_lock_cnt>:
 * exist to unlock the system. That means, if lock is called five times, unlock has to
 * be called five times as well. Note that chSysLock and chSysLockFromIsr are the same
 * for this port.
 */
void utils_sys_lock_cnt(void) {
	if (!sys_lock_cnt) {
 80115b0:	4b04      	ldr	r3, [pc, #16]	; (80115c4 <utils_sys_lock_cnt+0x14>)
 80115b2:	681a      	ldr	r2, [r3, #0]
 80115b4:	b912      	cbnz	r2, 80115bc <utils_sys_lock_cnt+0xc>
 80115b6:	2220      	movs	r2, #32
 80115b8:	f382 8811 	msr	BASEPRI, r2
		chSysLock();
	}
	sys_lock_cnt++;
 80115bc:	681a      	ldr	r2, [r3, #0]
 80115be:	3201      	adds	r2, #1
 80115c0:	601a      	str	r2, [r3, #0]
}
 80115c2:	4770      	bx	lr
 80115c4:	200023e0 	.word	0x200023e0
	...

080115d0 <utils_sys_unlock_cnt>:
 * exist to unlock the system. That means, if lock is called five times, unlock has to
 * be called five times as well. Note that chSysUnlock and chSysUnlockFromIsr are the same
 * for this port.
 */
void utils_sys_unlock_cnt(void) {
	if (sys_lock_cnt) {
 80115d0:	4b05      	ldr	r3, [pc, #20]	; (80115e8 <utils_sys_unlock_cnt+0x18>)
 80115d2:	681a      	ldr	r2, [r3, #0]
 80115d4:	b132      	cbz	r2, 80115e4 <utils_sys_unlock_cnt+0x14>
		sys_lock_cnt--;
 80115d6:	681a      	ldr	r2, [r3, #0]
 80115d8:	3a01      	subs	r2, #1
 80115da:	601a      	str	r2, [r3, #0]
		if (!sys_lock_cnt) {
 80115dc:	681b      	ldr	r3, [r3, #0]
 80115de:	b90b      	cbnz	r3, 80115e4 <utils_sys_unlock_cnt+0x14>
 80115e0:	f383 8811 	msr	BASEPRI, r3
			chSysUnlock();
		}
	}
}
 80115e4:	4770      	bx	lr
 80115e6:	bf00      	nop
 80115e8:	200023e0 	.word	0x200023e0
 80115ec:	00000000 	.word	0x00000000

080115f0 <timeout_thread>:
systime_t timeout_get_timeout_msec(void) {
	return timeout_msec;
}

static THD_FUNCTION(timeout_thread, arg)
{
 80115f0:	b580      	push	{r7, lr}
 80115f2:	4f13      	ldr	r7, [pc, #76]	; (8011640 <timeout_thread+0x50>)
 80115f4:	4a13      	ldr	r2, [pc, #76]	; (8011644 <timeout_thread+0x54>)
 80115f6:	69bb      	ldr	r3, [r7, #24]
 80115f8:	4c13      	ldr	r4, [pc, #76]	; (8011648 <timeout_thread+0x58>)
 80115fa:	f8df a054 	ldr.w	sl, [pc, #84]	; 8011650 <timeout_thread+0x60>
 80115fe:	4d13      	ldr	r5, [pc, #76]	; (801164c <timeout_thread+0x5c>)

	chRegSetThreadName("Timeout");

	for(;;) 
	{
		if (timeout_msec != 0 && chVTTimeElapsedSinceX(last_update_time) > MS2ST(timeout_msec)) 
 8011600:	f8df 9050 	ldr.w	r9, [pc, #80]	; 8011654 <timeout_thread+0x64>
 8011604:	619a      	str	r2, [r3, #24]
		{
			has_timeout = true;
		} 
		else
		{
			has_timeout = false;
 8011606:	2600      	movs	r6, #0
		if (timeout_msec != 0 && chVTTimeElapsedSinceX(last_update_time) > MS2ST(timeout_msec)) 
 8011608:	f242 7810 	movw	r8, #10000	; 0x2710
 801160c:	e013      	b.n	8011636 <timeout_thread+0x46>
 801160e:	f8da 1000 	ldr.w	r1, [sl]
  return ch.vtlist.vt_systime;
 8011612:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011614:	6823      	ldr	r3, [r4, #0]
 8011616:	fb08 f303 	mul.w	r3, r8, r3
 801161a:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
  return chVTGetSystemTimeX() - start;
 801161e:	1a52      	subs	r2, r2, r1
 8011620:	fba9 1303 	umull	r1, r3, r9, r3
 8011624:	ebb2 1f93 	cmp.w	r2, r3, lsr #6
			has_timeout = true;
 8011628:	f04f 0301 	mov.w	r3, #1
		if (timeout_msec != 0 && chVTTimeElapsedSinceX(last_update_time) > MS2ST(timeout_msec)) 
 801162c:	d906      	bls.n	801163c <timeout_thread+0x4c>
			has_timeout = true;
 801162e:	702b      	strb	r3, [r5, #0]
		}

		chThdSleepMilliseconds(10);
 8011630:	2064      	movs	r0, #100	; 0x64
 8011632:	f7fb fd95 	bl	800d160 <chThdSleep>
		if (timeout_msec != 0 && chVTTimeElapsedSinceX(last_update_time) > MS2ST(timeout_msec)) 
 8011636:	6823      	ldr	r3, [r4, #0]
 8011638:	2b00      	cmp	r3, #0
 801163a:	d1e8      	bne.n	801160e <timeout_thread+0x1e>
			has_timeout = false;
 801163c:	702e      	strb	r6, [r5, #0]
 801163e:	e7f7      	b.n	8011630 <timeout_thread+0x40>
 8011640:	20000c40 	.word	0x20000c40
 8011644:	08013e60 	.word	0x08013e60
 8011648:	200023ec 	.word	0x200023ec
 801164c:	200023e4 	.word	0x200023e4
 8011650:	200023e8 	.word	0x200023e8
 8011654:	10624dd3 	.word	0x10624dd3
	...

08011660 <timeout_configure>:
	timeout_msec = timeout;
 8011660:	4b01      	ldr	r3, [pc, #4]	; (8011668 <timeout_configure+0x8>)
 8011662:	6018      	str	r0, [r3, #0]
}
 8011664:	4770      	bx	lr
 8011666:	bf00      	nop
 8011668:	200023ec 	.word	0x200023ec
 801166c:	00000000 	.word	0x00000000

08011670 <timeout_init>:
	}

}

void timeout_init(void) {
 8011670:	b530      	push	{r4, r5, lr}
	timeout_msec = 1000;
 8011672:	4a0a      	ldr	r2, [pc, #40]	; (801169c <timeout_init+0x2c>)
	last_update_time = 0;
 8011674:	490a      	ldr	r1, [pc, #40]	; (80116a0 <timeout_init+0x30>)
	has_timeout = false;
 8011676:	4d0b      	ldr	r5, [pc, #44]	; (80116a4 <timeout_init+0x34>)

	chThdCreateStatic(timeout_thread_wa, sizeof(timeout_thread_wa), NORMALPRIO, timeout_thread, NULL);
 8011678:	4b0b      	ldr	r3, [pc, #44]	; (80116a8 <timeout_init+0x38>)
 801167a:	480c      	ldr	r0, [pc, #48]	; (80116ac <timeout_init+0x3c>)
void timeout_init(void) {
 801167c:	b083      	sub	sp, #12
	timeout_msec = 1000;
 801167e:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8011682:	6014      	str	r4, [r2, #0]
	last_update_time = 0;
 8011684:	2400      	movs	r4, #0
	chThdCreateStatic(timeout_thread_wa, sizeof(timeout_thread_wa), NORMALPRIO, timeout_thread, NULL);
 8011686:	9400      	str	r4, [sp, #0]
 8011688:	2240      	movs	r2, #64	; 0x40
	last_update_time = 0;
 801168a:	600c      	str	r4, [r1, #0]
	chThdCreateStatic(timeout_thread_wa, sizeof(timeout_thread_wa), NORMALPRIO, timeout_thread, NULL);
 801168c:	f44f 7166 	mov.w	r1, #920	; 0x398
	has_timeout = false;
 8011690:	702c      	strb	r4, [r5, #0]
	chThdCreateStatic(timeout_thread_wa, sizeof(timeout_thread_wa), NORMALPRIO, timeout_thread, NULL);
 8011692:	f7fb fd2d 	bl	800d0f0 <chThdCreateStatic>
}
 8011696:	b003      	add	sp, #12
 8011698:	bd30      	pop	{r4, r5, pc}
 801169a:	bf00      	nop
 801169c:	200023ec 	.word	0x200023ec
 80116a0:	200023e8 	.word	0x200023e8
 80116a4:	200023e4 	.word	0x200023e4
 80116a8:	080115f1 	.word	0x080115f1
 80116ac:	200023f0 	.word	0x200023f0

080116b0 <chprintf>:
 * @param[in] chp       pointer to a @p BaseSequentialStream implementing object
 * @param[in] fmt       formatting string
 *
 * @api
 */
static inline int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
 80116b0:	b40e      	push	{r1, r2, r3}
 80116b2:	b500      	push	{lr}
 80116b4:	b082      	sub	sp, #8
 80116b6:	aa03      	add	r2, sp, #12
 80116b8:	f852 1b04 	ldr.w	r1, [r2], #4
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
 80116bc:	9201      	str	r2, [sp, #4]
  formatted_bytes = chvprintf(chp, fmt, ap);
 80116be:	f7fd ff1f 	bl	800f500 <chvprintf>
  va_end(ap);

  return formatted_bytes;
}
 80116c2:	b002      	add	sp, #8
 80116c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80116c8:	b003      	add	sp, #12
 80116ca:	4770      	bx	lr
 80116cc:	0000      	movs	r0, r0
	...

080116d0 <Usart1_print_init>:
    USART_CR2_STOP1_BITS | USART_CR2_LINEN,
    0
};

 void Usart1_print_init(void)
{
 80116d0:	b510      	push	{r4, lr}
    * PC10(TX) and PC11(RX) are routed to USART3.
    * PAL_MODE_ALTERNATE is the value that you pass from Table 9. Alternate function mapping
    * in DM00037051 - STM32F405xx/STM32F407xx Datasheet
    */
    sdStart(&SD1, &sdcfg);
    palSetPadMode(GPIOB, 6, PAL_MODE_ALTERNATE(7));
 80116d2:	4c09      	ldr	r4, [pc, #36]	; (80116f8 <Usart1_print_init+0x28>)
    sdStart(&SD1, &sdcfg);
 80116d4:	4909      	ldr	r1, [pc, #36]	; (80116fc <Usart1_print_init+0x2c>)
 80116d6:	480a      	ldr	r0, [pc, #40]	; (8011700 <Usart1_print_init+0x30>)
 80116d8:	f7fc f90a 	bl	800d8f0 <sdStart>
    palSetPadMode(GPIOB, 6, PAL_MODE_ALTERNATE(7));
 80116dc:	4620      	mov	r0, r4
 80116de:	f240 3282 	movw	r2, #898	; 0x382
 80116e2:	2140      	movs	r1, #64	; 0x40
 80116e4:	f7fd f8fc 	bl	800e8e0 <_pal_lld_setgroupmode>
    palSetPadMode(GPIOB, 7, PAL_MODE_ALTERNATE(7));
 80116e8:	4620      	mov	r0, r4
 80116ea:	f240 3282 	movw	r2, #898	; 0x382
 80116ee:	2180      	movs	r1, #128	; 0x80

}
 80116f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    palSetPadMode(GPIOB, 7, PAL_MODE_ALTERNATE(7));
 80116f4:	f7fd b8f4 	b.w	800e8e0 <_pal_lld_setgroupmode>
 80116f8:	40020400 	.word	0x40020400
 80116fc:	20000804 	.word	0x20000804
 8011700:	20001298 	.word	0x20001298
	...

08011710 <Usart1_printf>:
    for (i=0; string[i]!='\0'; i++)
        sdPut(sdp, string[i]);
}

 void Usart1_printf(BaseSequentialStream * chp,const char * fmt,...)
{
 8011710:	b40e      	push	{r1, r2, r3}
 8011712:	b500      	push	{lr}
	//chprintf((BaseSequentialStream *)&SD1, "Example: %d\r\n", 2);
	chprintf(chp,fmt);
 8011714:	9901      	ldr	r1, [sp, #4]
 8011716:	f7ff ffcb 	bl	80116b0 <chprintf>
}
 801171a:	f85d eb04 	ldr.w	lr, [sp], #4
 801171e:	b003      	add	sp, #12
 8011720:	4770      	bx	lr
 8011722:	bf00      	nop
	...

08011730 <timer_thread>:
		//chvprintf(&SD1, (uint8_t *)"%f/r/n",mc_interface_get_angle());

	}
}

static THD_FUNCTION(timer_thread, arg) {
 8011730:	b508      	push	{r3, lr}
 8011732:	4b04      	ldr	r3, [pc, #16]	; (8011744 <timer_thread+0x14>)
 8011734:	4a04      	ldr	r2, [pc, #16]	; (8011748 <timer_thread+0x18>)
 8011736:	699b      	ldr	r3, [r3, #24]
 8011738:	619a      	str	r2, [r3, #24]

	//chvprintf(&SD1, (uint8_t *)"to main -> timer_thread\r\n");

	for(;;) {
		//packet_timerfunc();
		chThdSleepMilliseconds(1);
 801173a:	200a      	movs	r0, #10
 801173c:	f7fb fd10 	bl	800d160 <chThdSleep>
 8011740:	e7fb      	b.n	801173a <timer_thread+0xa>
 8011742:	bf00      	nop
 8011744:	20000c40 	.word	0x20000c40
 8011748:	08013ea0 	.word	0x08013ea0
 801174c:	00000000 	.word	0x00000000

08011750 <periodic_thread>:
{
 8011750:	b508      	push	{r3, lr}
 8011752:	4b0e      	ldr	r3, [pc, #56]	; (801178c <periodic_thread+0x3c>)
 8011754:	4a0e      	ldr	r2, [pc, #56]	; (8011790 <periodic_thread+0x40>)
 8011756:	699b      	ldr	r3, [r3, #24]
		LED_GREEN_ON();		chThdSleepMilliseconds(50);
 8011758:	4c0e      	ldr	r4, [pc, #56]	; (8011794 <periodic_thread+0x44>)
 801175a:	619a      	str	r2, [r3, #24]
 801175c:	2510      	movs	r5, #16
 801175e:	462e      	mov	r6, r5
 8011760:	8326      	strh	r6, [r4, #24]
 8011762:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8011766:	f7fb fcfb 	bl	800d160 <chThdSleep>
		LED_GREEN_OFF();		chThdSleepMilliseconds(50);
 801176a:	8365      	strh	r5, [r4, #26]
 801176c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8011770:	f7fb fcf6 	bl	800d160 <chThdSleep>
		LED_GREEN_ON();		chThdSleepMilliseconds(50);
 8011774:	8325      	strh	r5, [r4, #24]
 8011776:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 801177a:	f7fb fcf1 	bl	800d160 <chThdSleep>
		LED_GREEN_OFF();		chThdSleepMilliseconds(850);
 801177e:	8365      	strh	r5, [r4, #26]
 8011780:	f242 1034 	movw	r0, #8500	; 0x2134
 8011784:	f7fb fcec 	bl	800d160 <chThdSleep>
 8011788:	e7ea      	b.n	8011760 <periodic_thread+0x10>
 801178a:	bf00      	nop
 801178c:	20000c40 	.word	0x20000c40
 8011790:	08013e90 	.word	0x08013e90
 8011794:	40020800 	.word	0x40020800
	...

080117a0 <main>:
     WORK    :
     ARG     : void
     RET     : void
---------------------------------------------------------------------------*/
int main(void)
{
 80117a0:	b500      	push	{lr}
 80117a2:	b0b9      	sub	sp, #228	; 0xe4
	halInit();
 80117a4:	f7fb ffd4 	bl	800d750 <halInit>
	chSysInit();
 80117a8:	f7fb fa6a 	bl	800cc80 <chSysInit>

	chThdSleepMilliseconds(1000);
 80117ac:	f242 7010 	movw	r0, #10000	; 0x2710
 80117b0:	f7fb fcd6 	bl	800d160 <chThdSleep>

	hw_init_gpio();
 80117b4:	f7fe f974 	bl	800faa0 <hw_init_gpio>

	conf_general_init();
 80117b8:	f7fe fa72 	bl	800fca0 <conf_general_init>
	ledpwm_init();
 80117bc:	f7ff fcf8 	bl	80111b0 <ledpwm_init>
#if CAN_ENABLE
		comm_can_init();
#endif


	Usart1_print_init();
 80117c0:	f7ff ff86 	bl	80116d0 <Usart1_print_init>

	chvprintf(&SD1, (uint8_t *)"\x1b[2J\x1b[0;0H");
 80117c4:	4914      	ldr	r1, [pc, #80]	; (8011818 <main+0x78>)
 80117c6:	4815      	ldr	r0, [pc, #84]	; (801181c <main+0x7c>)
 80117c8:	f7fd fe9a 	bl	800f500 <chvprintf>
	chvprintf(&SD1, (uint8_t *)"oroca_bldc\r\n");
 80117cc:	4914      	ldr	r1, [pc, #80]	; (8011820 <main+0x80>)
 80117ce:	4813      	ldr	r0, [pc, #76]	; (801181c <main+0x7c>)
 80117d0:	f7fd fe96 	bl	800f500 <chvprintf>

	mcConfiguration_t mcconf;
	conf_general_read_mc_configuration(&mcconf);
 80117d4:	a803      	add	r0, sp, #12
 80117d6:	f7fe faeb 	bl	800fdb0 <conf_general_read_mc_configuration>
	mc_interface_init(&mcconf);
 80117da:	a803      	add	r0, sp, #12
 80117dc:	f7fe ffa8 	bl	8010730 <mc_interface_init>

	timeout_init();
	timeout_configure(1000);

	// Threads
	chThdCreateStatic(periodic_thread_wa, sizeof(periodic_thread_wa), NORMALPRIO, periodic_thread, NULL);
 80117e0:	2400      	movs	r4, #0
	timeout_init();
 80117e2:	f7ff ff45 	bl	8011670 <timeout_init>
	timeout_configure(1000);
 80117e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80117ea:	f7ff ff39 	bl	8011660 <timeout_configure>
	chThdCreateStatic(periodic_thread_wa, sizeof(periodic_thread_wa), NORMALPRIO, periodic_thread, NULL);
 80117ee:	4b0d      	ldr	r3, [pc, #52]	; (8011824 <main+0x84>)
 80117f0:	9400      	str	r4, [sp, #0]
 80117f2:	2240      	movs	r2, #64	; 0x40
 80117f4:	f44f 7106 	mov.w	r1, #536	; 0x218
 80117f8:	480b      	ldr	r0, [pc, #44]	; (8011828 <main+0x88>)
 80117fa:	f7fb fc79 	bl	800d0f0 <chThdCreateStatic>
	chThdCreateStatic(timer_thread_wa, sizeof(timer_thread_wa), NORMALPRIO, timer_thread, NULL);
 80117fe:	9400      	str	r4, [sp, #0]
 8011800:	4b0a      	ldr	r3, [pc, #40]	; (801182c <main+0x8c>)
 8011802:	480b      	ldr	r0, [pc, #44]	; (8011830 <main+0x90>)
 8011804:	2240      	movs	r2, #64	; 0x40
 8011806:	f44f 7106 	mov.w	r1, #536	; 0x218
 801180a:	f7fb fc71 	bl	800d0f0 <chThdCreateStatic>

//=================================
	for(;;)
	{
		chThdSleepMilliseconds(10);
 801180e:	2064      	movs	r0, #100	; 0x64
 8011810:	f7fb fca6 	bl	800d160 <chThdSleep>
 8011814:	e7fb      	b.n	801180e <main+0x6e>
 8011816:	bf00      	nop
 8011818:	08013e70 	.word	0x08013e70
 801181c:	20001298 	.word	0x20001298
 8011820:	08013e7c 	.word	0x08013e7c
 8011824:	08011751 	.word	0x08011751
 8011828:	20002788 	.word	0x20002788
 801182c:	08011731 	.word	0x08011731
 8011830:	200029a0 	.word	0x200029a0
	...

08011840 <ADC_Init>:
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
  
  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 8011840:	6842      	ldr	r2, [r0, #4]
 8011842:	690b      	ldr	r3, [r1, #16]
{
 8011844:	b470      	push	{r4, r5, r6}
  
  /* Clear RES and SCAN bits */
  tmpreg1 &= CR1_CLEAR_MASK;
 8011846:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 801184a:	790e      	ldrb	r6, [r1, #4]
 801184c:	680d      	ldr	r5, [r1, #0]
 801184e:	688c      	ldr	r4, [r1, #8]
  tmpreg1 &= CR1_CLEAR_MASK;
 8011850:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8011854:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 8011858:	432a      	orrs	r2, r5
                                   ADC_InitStruct->ADC_Resolution);
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 801185a:	6042      	str	r2, [r0, #4]
 801185c:	68ce      	ldr	r6, [r1, #12]
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 801185e:	6885      	ldr	r5, [r0, #8]
  
  /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_MASK;
 8011860:	4a09      	ldr	r2, [pc, #36]	; (8011888 <ADC_Init+0x48>)
 8011862:	4333      	orrs	r3, r6
 8011864:	402a      	ands	r2, r5
 8011866:	4323      	orrs	r3, r4
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
                        ADC_InitStruct->ADC_ExternalTrigConv | 
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 8011868:	794c      	ldrb	r4, [r1, #5]
 801186a:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 801186c:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
                        
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 8011870:	6083      	str	r3, [r0, #8]
  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
  
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 8011872:	7d0a      	ldrb	r2, [r1, #20]
  tmpreg1 = ADCx->SQR1;
 8011874:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 8011876:	3a01      	subs	r2, #1
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 8011878:	b2d2      	uxtb	r2, r2
  tmpreg1 &= SQR1_L_RESET;
 801187a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 801187e:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
  
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 8011882:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 8011884:	bc70      	pop	{r4, r5, r6}
 8011886:	4770      	bx	lr
 8011888:	c0fff7fd 	.word	0xc0fff7fd
 801188c:	00000000 	.word	0x00000000

08011890 <ADC_CommonInit>:
  assert_param(IS_ADC_PRESCALER(ADC_CommonInitStruct->ADC_Prescaler));
  assert_param(IS_ADC_DMA_ACCESS_MODE(ADC_CommonInitStruct->ADC_DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(ADC_CommonInitStruct->ADC_TwoSamplingDelay));
  /*---------------------------- ADC CCR Configuration -----------------*/
  /* Get the ADC CCR value */
  tmpreg1 = ADC->CCR;
 8011890:	4907      	ldr	r1, [pc, #28]	; (80118b0 <ADC_CommonInit+0x20>)
  
  /* Clear MULTI, DELAY, DMA and ADCPRE bits */
  tmpreg1 &= CR_CLEAR_MASK;
 8011892:	4a08      	ldr	r2, [pc, #32]	; (80118b4 <ADC_CommonInit+0x24>)
{
 8011894:	b430      	push	{r4, r5}
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8011896:	e9d0 3500 	ldrd	r3, r5, [r0]
  tmpreg1 = ADC->CCR;
 801189a:	684c      	ldr	r4, [r1, #4]
  tmpreg1 &= CR_CLEAR_MASK;
 801189c:	4022      	ands	r2, r4
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 801189e:	e9d0 4002 	ldrd	r4, r0, [r0, #8]
 80118a2:	432b      	orrs	r3, r5
 80118a4:	4313      	orrs	r3, r2
 80118a6:	4323      	orrs	r3, r4
 80118a8:	4303      	orrs	r3, r0
                        ADC_CommonInitStruct->ADC_Prescaler | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
                        ADC_CommonInitStruct->ADC_TwoSamplingDelay);
                        
  /* Write to ADC CCR */
  ADC->CCR = tmpreg1;
 80118aa:	604b      	str	r3, [r1, #4]
}
 80118ac:	bc30      	pop	{r4, r5}
 80118ae:	4770      	bx	lr
 80118b0:	40012300 	.word	0x40012300
 80118b4:	fffc30e0 	.word	0xfffc30e0
	...

080118c0 <ADC_Cmd>:
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 80118c0:	6883      	ldr	r3, [r0, #8]
  if (NewState != DISABLE)
 80118c2:	b919      	cbnz	r1, 80118cc <ADC_Cmd+0xc>
  }
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 80118c4:	f023 0301 	bic.w	r3, r3, #1
 80118c8:	6083      	str	r3, [r0, #8]
  }
}
 80118ca:	4770      	bx	lr
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 80118cc:	f043 0301 	orr.w	r3, r3, #1
 80118d0:	6083      	str	r3, [r0, #8]
 80118d2:	4770      	bx	lr
	...

080118e0 <ADC_RegularChannelConfig>:
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 80118e0:	2909      	cmp	r1, #9
{
 80118e2:	b470      	push	{r4, r5, r6}
  if (ADC_Channel > ADC_Channel_9)
 80118e4:	d91c      	bls.n	8011920 <ADC_RegularChannelConfig+0x40>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 10));
 80118e6:	f1a1 040a 	sub.w	r4, r1, #10
 80118ea:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    tmpreg1 = ADCx->SMPR1;
 80118ee:	68c5      	ldr	r5, [r0, #12]
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 10));
 80118f0:	2607      	movs	r6, #7
 80118f2:	40a6      	lsls	r6, r4
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 80118f4:	40a3      	lsls	r3, r4
    tmpreg1 &= ~tmpreg2;
 80118f6:	ea25 0406 	bic.w	r4, r5, r6
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 80118fa:	4323      	orrs	r3, r4
    
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 80118fc:	2a06      	cmp	r2, #6
    ADCx->SMPR1 = tmpreg1;
 80118fe:	60c3      	str	r3, [r0, #12]
  if (Rank < 7)
 8011900:	d91a      	bls.n	8011938 <ADC_RegularChannelConfig+0x58>
    
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
  }
  /* For Rank 7 to 12 */
  else if (Rank < 13)
 8011902:	2a0c      	cmp	r2, #12
 8011904:	d925      	bls.n	8011952 <ADC_RegularChannelConfig+0x72>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 13));
 8011906:	3a0d      	subs	r2, #13
 8011908:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    tmpreg1 = ADCx->SQR1;
 801190c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 13));
 801190e:	241f      	movs	r4, #31
 8011910:	4094      	lsls	r4, r2
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 8011912:	4091      	lsls	r1, r2
    tmpreg1 &= ~tmpreg2;
 8011914:	ea23 0204 	bic.w	r2, r3, r4
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8011918:	4311      	orrs	r1, r2
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
 801191a:	62c1      	str	r1, [r0, #44]	; 0x2c
  }
}
 801191c:	bc70      	pop	{r4, r5, r6}
 801191e:	4770      	bx	lr
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 8011920:	eb01 0641 	add.w	r6, r1, r1, lsl #1
    tmpreg1 = ADCx->SMPR2;
 8011924:	6904      	ldr	r4, [r0, #16]
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 8011926:	2507      	movs	r5, #7
 8011928:	40b5      	lsls	r5, r6
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 801192a:	40b3      	lsls	r3, r6
    tmpreg1 &= ~tmpreg2;
 801192c:	ea24 0405 	bic.w	r4, r4, r5
    tmpreg1 |= tmpreg2;
 8011930:	4323      	orrs	r3, r4
  if (Rank < 7)
 8011932:	2a06      	cmp	r2, #6
    ADCx->SMPR2 = tmpreg1;
 8011934:	6103      	str	r3, [r0, #16]
  if (Rank < 7)
 8011936:	d8e4      	bhi.n	8011902 <ADC_RegularChannelConfig+0x22>
    tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 1));
 8011938:	3a01      	subs	r2, #1
 801193a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    tmpreg1 = ADCx->SQR3;
 801193e:	6b43      	ldr	r3, [r0, #52]	; 0x34
    tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 1));
 8011940:	241f      	movs	r4, #31
 8011942:	4094      	lsls	r4, r2
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 8011944:	4091      	lsls	r1, r2
    tmpreg1 &= ~tmpreg2;
 8011946:	ea23 0204 	bic.w	r2, r3, r4
    tmpreg1 |= tmpreg2;
 801194a:	4311      	orrs	r1, r2
    ADCx->SQR3 = tmpreg1;
 801194c:	6341      	str	r1, [r0, #52]	; 0x34
}
 801194e:	bc70      	pop	{r4, r5, r6}
 8011950:	4770      	bx	lr
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
 8011952:	3a07      	subs	r2, #7
 8011954:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    tmpreg1 = ADCx->SQR2;
 8011958:	6b03      	ldr	r3, [r0, #48]	; 0x30
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
 801195a:	241f      	movs	r4, #31
 801195c:	4094      	lsls	r4, r2
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 801195e:	4091      	lsls	r1, r2
    tmpreg1 &= ~tmpreg2;
 8011960:	ea23 0204 	bic.w	r2, r3, r4
    tmpreg1 |= tmpreg2;
 8011964:	4311      	orrs	r1, r2
    ADCx->SQR2 = tmpreg1;
 8011966:	6301      	str	r1, [r0, #48]	; 0x30
}
 8011968:	bc70      	pop	{r4, r5, r6}
 801196a:	4770      	bx	lr
 801196c:	0000      	movs	r0, r0
	...

08011970 <ADC_MultiModeDMARequestAfterLastTransferCmd>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the selected ADC DMA request after last transfer */
    ADC->CCR |= (uint32_t)ADC_CCR_DDS;
 8011970:	4a05      	ldr	r2, [pc, #20]	; (8011988 <ADC_MultiModeDMARequestAfterLastTransferCmd+0x18>)
 8011972:	6853      	ldr	r3, [r2, #4]
  if (NewState != DISABLE)
 8011974:	b918      	cbnz	r0, 801197e <ADC_MultiModeDMARequestAfterLastTransferCmd+0xe>
  }
  else
  {
    /* Disable the selected ADC DMA request after last transfer */
    ADC->CCR &= (uint32_t)(~ADC_CCR_DDS);
 8011976:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801197a:	6053      	str	r3, [r2, #4]
  }
}
 801197c:	4770      	bx	lr
    ADC->CCR |= (uint32_t)ADC_CCR_DDS;
 801197e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8011982:	6053      	str	r3, [r2, #4]
 8011984:	4770      	bx	lr
 8011986:	bf00      	nop
 8011988:	40012300 	.word	0x40012300
 801198c:	00000000 	.word	0x00000000

08011990 <ADC_ClearITPendingBit>:
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_IT(ADC_IT)); 
  /* Get the ADC IT index */
  itmask = (uint8_t)(ADC_IT >> 8);
  /* Clear the selected ADC interrupt pending bits */
  ADCx->SR = ~(uint32_t)itmask;
 8011990:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8011994:	6001      	str	r1, [r0, #0]
}                    
 8011996:	4770      	bx	lr
	...

080119a0 <DMA_Init>:
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 80119a0:	680b      	ldr	r3, [r1, #0]
{
 80119a2:	b470      	push	{r4, r5, r6}
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80119a4:	e9d1 2405 	ldrd	r2, r4, [r1, #20]
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 80119a8:	68cd      	ldr	r5, [r1, #12]
 80119aa:	432b      	orrs	r3, r5
 80119ac:	4313      	orrs	r3, r2
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80119ae:	e9d1 2507 	ldrd	r2, r5, [r1, #28]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80119b2:	4323      	orrs	r3, r4
 80119b4:	4313      	orrs	r3, r2
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 80119b6:	e9d1 4209 	ldrd	r4, r2, [r1, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80119ba:	432b      	orrs	r3, r5
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 80119bc:	e9d1 650d 	ldrd	r6, r5, [r1, #52]	; 0x34
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80119c0:	4323      	orrs	r3, r4
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 80119c2:	4313      	orrs	r3, r2
  tmpreg = DMAy_Streamx->CR;
 80119c4:	6804      	ldr	r4, [r0, #0]
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80119c6:	4a0b      	ldr	r2, [pc, #44]	; (80119f4 <DMA_Init+0x54>)
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 80119c8:	4333      	orrs	r3, r6
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80119ca:	4022      	ands	r2, r4
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 80119cc:	432b      	orrs	r3, r5
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 80119ce:	4313      	orrs	r3, r2

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 80119d0:	6003      	str	r3, [r0, #0]
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 80119d2:	e9d1 340b 	ldrd	r3, r4, [r1, #44]	; 0x2c
  tmpreg = DMAy_Streamx->FCR;
 80119d6:	6942      	ldr	r2, [r0, #20]
  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 80119d8:	690d      	ldr	r5, [r1, #16]
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80119da:	f022 0207 	bic.w	r2, r2, #7
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 80119de:	4323      	orrs	r3, r4
 80119e0:	4313      	orrs	r3, r2
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 80119e2:	e9d1 4201 	ldrd	r4, r2, [r1, #4]
  DMAy_Streamx->FCR = tmpreg;
 80119e6:	6143      	str	r3, [r0, #20]
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 80119e8:	6045      	str	r5, [r0, #4]
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 80119ea:	6084      	str	r4, [r0, #8]
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 80119ec:	60c2      	str	r2, [r0, #12]
}
 80119ee:	bc70      	pop	{r4, r5, r6}
 80119f0:	4770      	bx	lr
 80119f2:	bf00      	nop
 80119f4:	f01c803f 	.word	0xf01c803f
	...

08011a00 <DMA_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8011a00:	6803      	ldr	r3, [r0, #0]
  if (NewState != DISABLE)
 8011a02:	b919      	cbnz	r1, 8011a0c <DMA_Cmd+0xc>
  }
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8011a04:	f023 0301 	bic.w	r3, r3, #1
 8011a08:	6003      	str	r3, [r0, #0]
  }
}
 8011a0a:	4770      	bx	lr
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8011a0c:	f043 0301 	orr.w	r3, r3, #1
 8011a10:	6003      	str	r3, [r0, #0]
 8011a12:	4770      	bx	lr
	...

08011a20 <DMA_ITConfig>:
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Check if the DMA_IT parameter contains a FIFO interrupt */
  if ((DMA_IT & DMA_IT_FE) != 0)
 8011a20:	060b      	lsls	r3, r1, #24
 8011a22:	d50c      	bpl.n	8011a3e <DMA_ITConfig+0x1e>
  {
    if (NewState != DISABLE)
    {
      /* Enable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 8011a24:	6943      	ldr	r3, [r0, #20]
    if (NewState != DISABLE)
 8011a26:	b1aa      	cbz	r2, 8011a54 <DMA_ITConfig+0x34>
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 8011a28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 8011a2c:	2980      	cmp	r1, #128	; 0x80
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 8011a2e:	6143      	str	r3, [r0, #20]
  if (DMA_IT != DMA_IT_FE)
 8011a30:	d00f      	beq.n	8011a52 <DMA_ITConfig+0x32>
  {
    if (NewState != DISABLE)
    {
      /* Enable the selected DMA transfer interrupts */
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
 8011a32:	6803      	ldr	r3, [r0, #0]
 8011a34:	f001 011e 	and.w	r1, r1, #30
 8011a38:	4319      	orrs	r1, r3
 8011a3a:	6001      	str	r1, [r0, #0]
 8011a3c:	4770      	bx	lr
  if (DMA_IT != DMA_IT_FE)
 8011a3e:	2980      	cmp	r1, #128	; 0x80
 8011a40:	d007      	beq.n	8011a52 <DMA_ITConfig+0x32>
    if (NewState != DISABLE)
 8011a42:	2a00      	cmp	r2, #0
 8011a44:	d1f5      	bne.n	8011a32 <DMA_ITConfig+0x12>
    }
    else
    {
      /* Disable the selected DMA transfer interrupts */
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
 8011a46:	6803      	ldr	r3, [r0, #0]
 8011a48:	f001 011e 	and.w	r1, r1, #30
 8011a4c:	ea23 0101 	bic.w	r1, r3, r1
 8011a50:	6001      	str	r1, [r0, #0]
    }    
  }
}
 8011a52:	4770      	bx	lr
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
 8011a54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  if (DMA_IT != DMA_IT_FE)
 8011a58:	2980      	cmp	r1, #128	; 0x80
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
 8011a5a:	6143      	str	r3, [r0, #20]
  if (DMA_IT != DMA_IT_FE)
 8011a5c:	d1f3      	bne.n	8011a46 <DMA_ITConfig+0x26>
 8011a5e:	4770      	bx	lr

08011a60 <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 8011a60:	7903      	ldrb	r3, [r0, #4]
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8011a62:	7982      	ldrb	r2, [r0, #6]
{
 8011a64:	b470      	push	{r4, r5, r6}
 8011a66:	6805      	ldr	r5, [r0, #0]
 8011a68:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8011a6c:	f503 339e 	add.w	r3, r3, #80896	; 0x13c00
 8011a70:	43ec      	mvns	r4, r5
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8011a72:	b1f2      	cbz	r2, 8011ab2 <EXTI_Init+0x52>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8011a74:	4a15      	ldr	r2, [pc, #84]	; (8011acc <EXTI_Init+0x6c>)
    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8011a76:	7941      	ldrb	r1, [r0, #5]
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8011a78:	6816      	ldr	r6, [r2, #0]
 8011a7a:	4026      	ands	r6, r4
 8011a7c:	6016      	str	r6, [r2, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8011a7e:	6856      	ldr	r6, [r2, #4]
 8011a80:	4034      	ands	r4, r6
 8011a82:	6054      	str	r4, [r2, #4]
    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8011a84:	681c      	ldr	r4, [r3, #0]
 8011a86:	4325      	orrs	r5, r4
 8011a88:	601d      	str	r5, [r3, #0]
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 8011a8a:	6800      	ldr	r0, [r0, #0]
 8011a8c:	6894      	ldr	r4, [r2, #8]
 8011a8e:	43c3      	mvns	r3, r0
 8011a90:	401c      	ands	r4, r3
 8011a92:	6094      	str	r4, [r2, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 8011a94:	68d4      	ldr	r4, [r2, #12]
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8011a96:	2910      	cmp	r1, #16
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 8011a98:	ea03 0304 	and.w	r3, r3, r4
 8011a9c:	60d3      	str	r3, [r2, #12]
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8011a9e:	d00d      	beq.n	8011abc <EXTI_Init+0x5c>
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
      tmp += EXTI_InitStruct->EXTI_Trigger;
 8011aa0:	f101 4380 	add.w	r3, r1, #1073741824	; 0x40000000
 8011aa4:	f503 339e 	add.w	r3, r3, #80896	; 0x13c00
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 8011aa8:	bc70      	pop	{r4, r5, r6}
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8011aaa:	681a      	ldr	r2, [r3, #0]
 8011aac:	4310      	orrs	r0, r2
 8011aae:	6018      	str	r0, [r3, #0]
}
 8011ab0:	4770      	bx	lr
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 8011ab2:	681a      	ldr	r2, [r3, #0]
 8011ab4:	4014      	ands	r4, r2
 8011ab6:	601c      	str	r4, [r3, #0]
}
 8011ab8:	bc70      	pop	{r4, r5, r6}
 8011aba:	4770      	bx	lr
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 8011abc:	6893      	ldr	r3, [r2, #8]
 8011abe:	4303      	orrs	r3, r0
 8011ac0:	6093      	str	r3, [r2, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 8011ac2:	68d3      	ldr	r3, [r2, #12]
 8011ac4:	4318      	orrs	r0, r3
 8011ac6:	60d0      	str	r0, [r2, #12]
}
 8011ac8:	bc70      	pop	{r4, r5, r6}
 8011aca:	4770      	bx	lr
 8011acc:	40013c00 	.word	0x40013c00

08011ad0 <EXTI_GetFlagStatus>:
{
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
 8011ad0:	4b03      	ldr	r3, [pc, #12]	; (8011ae0 <EXTI_GetFlagStatus+0x10>)
 8011ad2:	695b      	ldr	r3, [r3, #20]
 8011ad4:	4203      	tst	r3, r0
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8011ad6:	bf14      	ite	ne
 8011ad8:	2001      	movne	r0, #1
 8011ada:	2000      	moveq	r0, #0
 8011adc:	4770      	bx	lr
 8011ade:	bf00      	nop
 8011ae0:	40013c00 	.word	0x40013c00
	...

08011af0 <EXTI_GetITStatus>:
 8011af0:	f7ff bfee 	b.w	8011ad0 <EXTI_GetFlagStatus>
	...

08011b00 <EXTI_ClearITPendingBit>:
 8011b00:	4b01      	ldr	r3, [pc, #4]	; (8011b08 <EXTI_ClearITPendingBit+0x8>)
 8011b02:	6158      	str	r0, [r3, #20]
 8011b04:	4770      	bx	lr
 8011b06:	bf00      	nop
 8011b08:	40013c00 	.word	0x40013c00
 8011b0c:	00000000 	.word	0x00000000

08011b10 <FLASH_Unlock>:
  * @param  None
  * @retval None
  */
void FLASH_Unlock(void)
{
  if((FLASH->CR & FLASH_CR_LOCK) != RESET)
 8011b10:	4b04      	ldr	r3, [pc, #16]	; (8011b24 <FLASH_Unlock+0x14>)
 8011b12:	691a      	ldr	r2, [r3, #16]
 8011b14:	2a00      	cmp	r2, #0
 8011b16:	da03      	bge.n	8011b20 <FLASH_Unlock+0x10>
  {
    /* Authorize the FLASH Registers access */
    FLASH->KEYR = FLASH_KEY1;
 8011b18:	4903      	ldr	r1, [pc, #12]	; (8011b28 <FLASH_Unlock+0x18>)
    FLASH->KEYR = FLASH_KEY2;
 8011b1a:	4a04      	ldr	r2, [pc, #16]	; (8011b2c <FLASH_Unlock+0x1c>)
    FLASH->KEYR = FLASH_KEY1;
 8011b1c:	6059      	str	r1, [r3, #4]
    FLASH->KEYR = FLASH_KEY2;
 8011b1e:	605a      	str	r2, [r3, #4]
  }  
}
 8011b20:	4770      	bx	lr
 8011b22:	bf00      	nop
 8011b24:	40023c00 	.word	0x40023c00
 8011b28:	45670123 	.word	0x45670123
 8011b2c:	cdef89ab 	.word	0xcdef89ab

08011b30 <FLASH_ClearFlag>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_CLEAR_FLAG(FLASH_FLAG));
  
  /* Clear the flags */
  FLASH->SR = FLASH_FLAG;
 8011b30:	4b01      	ldr	r3, [pc, #4]	; (8011b38 <FLASH_ClearFlag+0x8>)
 8011b32:	60d8      	str	r0, [r3, #12]
}
 8011b34:	4770      	bx	lr
 8011b36:	bf00      	nop
 8011b38:	40023c00 	.word	0x40023c00
 8011b3c:	00000000 	.word	0x00000000

08011b40 <FLASH_GetStatus>:
  */
FLASH_Status FLASH_GetStatus(void)
{
  FLASH_Status flashstatus = FLASH_COMPLETE;
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
 8011b40:	4b0e      	ldr	r3, [pc, #56]	; (8011b7c <FLASH_GetStatus+0x3c>)
 8011b42:	68da      	ldr	r2, [r3, #12]
 8011b44:	03d2      	lsls	r2, r2, #15
 8011b46:	d410      	bmi.n	8011b6a <FLASH_GetStatus+0x2a>
  {
    flashstatus = FLASH_BUSY;
  }
  else 
  {  
    if((FLASH->SR & FLASH_FLAG_WRPERR) != (uint32_t)0x00)
 8011b48:	68da      	ldr	r2, [r3, #12]
 8011b4a:	06d1      	lsls	r1, r2, #27
 8011b4c:	d40f      	bmi.n	8011b6e <FLASH_GetStatus+0x2e>
    { 
      flashstatus = FLASH_ERROR_WRP;
    }
    else
    {
      if((FLASH->SR & FLASH_FLAG_RDERR) != (uint32_t)0x00)
 8011b4e:	68da      	ldr	r2, [r3, #12]
 8011b50:	05d2      	lsls	r2, r2, #23
 8011b52:	d410      	bmi.n	8011b76 <FLASH_GetStatus+0x36>
      { 
        flashstatus = FLASH_ERROR_RD;
      } 
      else 
      {
        if((FLASH->SR & (uint32_t)0xE0) != (uint32_t)0x00)
 8011b54:	68da      	ldr	r2, [r3, #12]
 8011b56:	f012 0fe0 	tst.w	r2, #224	; 0xe0
 8011b5a:	d10a      	bne.n	8011b72 <FLASH_GetStatus+0x32>
        {
          flashstatus = FLASH_ERROR_PROGRAM; 
        }
        else
        {
          if((FLASH->SR & FLASH_FLAG_OPERR) != (uint32_t)0x00)
 8011b5c:	68db      	ldr	r3, [r3, #12]
 8011b5e:	f013 0f02 	tst.w	r3, #2
          {
            flashstatus = FLASH_ERROR_OPERATION;
          }
          else
          {
            flashstatus = FLASH_COMPLETE;
 8011b62:	bf14      	ite	ne
 8011b64:	2008      	movne	r0, #8
 8011b66:	2009      	moveq	r0, #9
 8011b68:	4770      	bx	lr
    flashstatus = FLASH_BUSY;
 8011b6a:	2001      	movs	r0, #1
 8011b6c:	4770      	bx	lr
      flashstatus = FLASH_ERROR_WRP;
 8011b6e:	2006      	movs	r0, #6
 8011b70:	4770      	bx	lr
          flashstatus = FLASH_ERROR_PROGRAM; 
 8011b72:	2007      	movs	r0, #7
      }
    }
  }
  /* Return the FLASH Status */
  return flashstatus;
}
 8011b74:	4770      	bx	lr
        flashstatus = FLASH_ERROR_RD;
 8011b76:	2002      	movs	r0, #2
 8011b78:	4770      	bx	lr
 8011b7a:	bf00      	nop
 8011b7c:	40023c00 	.word	0x40023c00

08011b80 <FLASH_WaitForLastOperation>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_WaitForLastOperation(void)
{ 
 8011b80:	b500      	push	{lr}
 8011b82:	b083      	sub	sp, #12
  __IO FLASH_Status status = FLASH_COMPLETE;
 8011b84:	2309      	movs	r3, #9
 8011b86:	f88d 3007 	strb.w	r3, [sp, #7]
   
  /* Check for the FLASH Status */
  status = FLASH_GetStatus();
 8011b8a:	f7ff ffd9 	bl	8011b40 <FLASH_GetStatus>
 8011b8e:	f88d 0007 	strb.w	r0, [sp, #7]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while(status == FLASH_BUSY)
 8011b92:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011b96:	2b01      	cmp	r3, #1
 8011b98:	d0f7      	beq.n	8011b8a <FLASH_WaitForLastOperation+0xa>
  {
    status = FLASH_GetStatus();
  }
  /* Return the operation status */
  return status;
 8011b9a:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8011b9e:	b003      	add	sp, #12
 8011ba0:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08011bb0 <FLASH_EraseSector>:
{
 8011bb0:	b570      	push	{r4, r5, r6, lr}
 8011bb2:	4606      	mov	r6, r0
  if(VoltageRange == VoltageRange_1)
 8011bb4:	b161      	cbz	r1, 8011bd0 <FLASH_EraseSector+0x20>
  else if(VoltageRange == VoltageRange_2)
 8011bb6:	2901      	cmp	r1, #1
 8011bb8:	d02f      	beq.n	8011c1a <FLASH_EraseSector+0x6a>
  else if(VoltageRange == VoltageRange_3)
 8011bba:	2902      	cmp	r1, #2
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8011bbc:	bf0c      	ite	eq
 8011bbe:	f44f 7400 	moveq.w	r4, #512	; 0x200
 8011bc2:	f44f 7440 	movne.w	r4, #768	; 0x300
  status = FLASH_WaitForLastOperation();
 8011bc6:	f7ff ffdb 	bl	8011b80 <FLASH_WaitForLastOperation>
  if(status == FLASH_COMPLETE)
 8011bca:	2809      	cmp	r0, #9
 8011bcc:	d005      	beq.n	8011bda <FLASH_EraseSector+0x2a>
}
 8011bce:	bd70      	pop	{r4, r5, r6, pc}
     tmp_psize = FLASH_PSIZE_BYTE;
 8011bd0:	460c      	mov	r4, r1
  status = FLASH_WaitForLastOperation();
 8011bd2:	f7ff ffd5 	bl	8011b80 <FLASH_WaitForLastOperation>
  if(status == FLASH_COMPLETE)
 8011bd6:	2809      	cmp	r0, #9
 8011bd8:	d1f9      	bne.n	8011bce <FLASH_EraseSector+0x1e>
    FLASH->CR &= CR_PSIZE_MASK;
 8011bda:	4d11      	ldr	r5, [pc, #68]	; (8011c20 <FLASH_EraseSector+0x70>)
 8011bdc:	692b      	ldr	r3, [r5, #16]
 8011bde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011be2:	612b      	str	r3, [r5, #16]
    FLASH->CR |= tmp_psize;
 8011be4:	6929      	ldr	r1, [r5, #16]
 8011be6:	4321      	orrs	r1, r4
 8011be8:	6129      	str	r1, [r5, #16]
    FLASH->CR &= SECTOR_MASK;
 8011bea:	692b      	ldr	r3, [r5, #16]
 8011bec:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8011bf0:	612b      	str	r3, [r5, #16]
    FLASH->CR |= FLASH_CR_SER | FLASH_Sector;
 8011bf2:	6928      	ldr	r0, [r5, #16]
 8011bf4:	f040 0002 	orr.w	r0, r0, #2
 8011bf8:	4330      	orrs	r0, r6
 8011bfa:	6128      	str	r0, [r5, #16]
    FLASH->CR |= FLASH_CR_STRT;
 8011bfc:	692b      	ldr	r3, [r5, #16]
 8011bfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011c02:	612b      	str	r3, [r5, #16]
    status = FLASH_WaitForLastOperation();
 8011c04:	f7ff ffbc 	bl	8011b80 <FLASH_WaitForLastOperation>
    FLASH->CR &= (~FLASH_CR_SER);
 8011c08:	692b      	ldr	r3, [r5, #16]
 8011c0a:	f023 0302 	bic.w	r3, r3, #2
 8011c0e:	612b      	str	r3, [r5, #16]
    FLASH->CR &= SECTOR_MASK; 
 8011c10:	692b      	ldr	r3, [r5, #16]
 8011c12:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8011c16:	612b      	str	r3, [r5, #16]
}
 8011c18:	bd70      	pop	{r4, r5, r6, pc}
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8011c1a:	f44f 7480 	mov.w	r4, #256	; 0x100
 8011c1e:	e7d8      	b.n	8011bd2 <FLASH_EraseSector+0x22>
 8011c20:	40023c00 	.word	0x40023c00
	...

08011c30 <FLASH_ProgramHalfWord>:
{
 8011c30:	b570      	push	{r4, r5, r6, lr}
 8011c32:	4605      	mov	r5, r0
 8011c34:	460e      	mov	r6, r1
  status = FLASH_WaitForLastOperation();
 8011c36:	f7ff ffa3 	bl	8011b80 <FLASH_WaitForLastOperation>
  if(status == FLASH_COMPLETE)
 8011c3a:	2809      	cmp	r0, #9
 8011c3c:	d000      	beq.n	8011c40 <FLASH_ProgramHalfWord+0x10>
}
 8011c3e:	bd70      	pop	{r4, r5, r6, pc}
    FLASH->CR &= CR_PSIZE_MASK;
 8011c40:	4c0a      	ldr	r4, [pc, #40]	; (8011c6c <FLASH_ProgramHalfWord+0x3c>)
 8011c42:	6923      	ldr	r3, [r4, #16]
 8011c44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011c48:	6123      	str	r3, [r4, #16]
    FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8011c4a:	6923      	ldr	r3, [r4, #16]
 8011c4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011c50:	6123      	str	r3, [r4, #16]
    FLASH->CR |= FLASH_CR_PG;
 8011c52:	6923      	ldr	r3, [r4, #16]
 8011c54:	f043 0301 	orr.w	r3, r3, #1
 8011c58:	6123      	str	r3, [r4, #16]
    *(__IO uint16_t*)Address = Data;
 8011c5a:	802e      	strh	r6, [r5, #0]
    status = FLASH_WaitForLastOperation();
 8011c5c:	f7ff ff90 	bl	8011b80 <FLASH_WaitForLastOperation>
    FLASH->CR &= (~FLASH_CR_PG);
 8011c60:	6923      	ldr	r3, [r4, #16]
 8011c62:	f023 0301 	bic.w	r3, r3, #1
 8011c66:	6123      	str	r3, [r4, #16]
}
 8011c68:	bd70      	pop	{r4, r5, r6, pc}
 8011c6a:	bf00      	nop
 8011c6c:	40023c00 	.word	0x40023c00

08011c70 <RCC_AHB1PeriphClockCmd>:
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8011c70:	4a04      	ldr	r2, [pc, #16]	; (8011c84 <RCC_AHB1PeriphClockCmd+0x14>)
 8011c72:	6b13      	ldr	r3, [r2, #48]	; 0x30
  if (NewState != DISABLE)
 8011c74:	b919      	cbnz	r1, 8011c7e <RCC_AHB1PeriphClockCmd+0xe>
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8011c76:	ea23 0000 	bic.w	r0, r3, r0
 8011c7a:	6310      	str	r0, [r2, #48]	; 0x30
  }
}
 8011c7c:	4770      	bx	lr
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8011c7e:	4318      	orrs	r0, r3
 8011c80:	6310      	str	r0, [r2, #48]	; 0x30
 8011c82:	4770      	bx	lr
 8011c84:	40023800 	.word	0x40023800
	...

08011c90 <RCC_APB1PeriphClockCmd>:
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8011c90:	4a04      	ldr	r2, [pc, #16]	; (8011ca4 <RCC_APB1PeriphClockCmd+0x14>)
 8011c92:	6c13      	ldr	r3, [r2, #64]	; 0x40
  if (NewState != DISABLE)
 8011c94:	b919      	cbnz	r1, 8011c9e <RCC_APB1PeriphClockCmd+0xe>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8011c96:	ea23 0000 	bic.w	r0, r3, r0
 8011c9a:	6410      	str	r0, [r2, #64]	; 0x40
  }
}
 8011c9c:	4770      	bx	lr
    RCC->APB1ENR |= RCC_APB1Periph;
 8011c9e:	4318      	orrs	r0, r3
 8011ca0:	6410      	str	r0, [r2, #64]	; 0x40
 8011ca2:	4770      	bx	lr
 8011ca4:	40023800 	.word	0x40023800
	...

08011cb0 <RCC_APB2PeriphClockCmd>:
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8011cb0:	4a04      	ldr	r2, [pc, #16]	; (8011cc4 <RCC_APB2PeriphClockCmd+0x14>)
 8011cb2:	6c53      	ldr	r3, [r2, #68]	; 0x44
  if (NewState != DISABLE)
 8011cb4:	b919      	cbnz	r1, 8011cbe <RCC_APB2PeriphClockCmd+0xe>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8011cb6:	ea23 0000 	bic.w	r0, r3, r0
 8011cba:	6450      	str	r0, [r2, #68]	; 0x44
  }
}
 8011cbc:	4770      	bx	lr
    RCC->APB2ENR |= RCC_APB2Periph;
 8011cbe:	4318      	orrs	r0, r3
 8011cc0:	6450      	str	r0, [r2, #68]	; 0x44
 8011cc2:	4770      	bx	lr
 8011cc4:	40023800 	.word	0x40023800
	...

08011cd0 <RCC_APB1PeriphResetCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8011cd0:	4a04      	ldr	r2, [pc, #16]	; (8011ce4 <RCC_APB1PeriphResetCmd+0x14>)
 8011cd2:	6a13      	ldr	r3, [r2, #32]
  if (NewState != DISABLE)
 8011cd4:	b919      	cbnz	r1, 8011cde <RCC_APB1PeriphResetCmd+0xe>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8011cd6:	ea23 0000 	bic.w	r0, r3, r0
 8011cda:	6210      	str	r0, [r2, #32]
  }
}
 8011cdc:	4770      	bx	lr
    RCC->APB1RSTR |= RCC_APB1Periph;
 8011cde:	4318      	orrs	r0, r3
 8011ce0:	6210      	str	r0, [r2, #32]
 8011ce2:	4770      	bx	lr
 8011ce4:	40023800 	.word	0x40023800
	...

08011cf0 <RCC_APB2PeriphResetCmd>:
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8011cf0:	4a04      	ldr	r2, [pc, #16]	; (8011d04 <RCC_APB2PeriphResetCmd+0x14>)
 8011cf2:	6a53      	ldr	r3, [r2, #36]	; 0x24
  if (NewState != DISABLE)
 8011cf4:	b919      	cbnz	r1, 8011cfe <RCC_APB2PeriphResetCmd+0xe>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8011cf6:	ea23 0000 	bic.w	r0, r3, r0
 8011cfa:	6250      	str	r0, [r2, #36]	; 0x24
  }
}
 8011cfc:	4770      	bx	lr
    RCC->APB2RSTR |= RCC_APB2Periph;
 8011cfe:	4318      	orrs	r0, r3
 8011d00:	6250      	str	r0, [r2, #36]	; 0x24
 8011d02:	4770      	bx	lr
 8011d04:	40023800 	.word	0x40023800
	...

08011d10 <SYSCFG_EXTILineConfig>:
  *           be (0..7) for STM32F42xxx/43xxx devices. 
  *             
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 8011d10:	f001 03fc 	and.w	r3, r1, #252	; 0xfc
 8011d14:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8011d18:	f503 339c 	add.w	r3, r3, #79872	; 0x13800

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 8011d1c:	f001 0103 	and.w	r1, r1, #3
{
 8011d20:	b410      	push	{r4}
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 8011d22:	689a      	ldr	r2, [r3, #8]
  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 8011d24:	0089      	lsls	r1, r1, #2
 8011d26:	240f      	movs	r4, #15
 8011d28:	408c      	lsls	r4, r1
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 8011d2a:	ea22 0204 	bic.w	r2, r2, r4
 8011d2e:	609a      	str	r2, [r3, #8]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 8011d30:	689a      	ldr	r2, [r3, #8]
}
 8011d32:	f85d 4b04 	ldr.w	r4, [sp], #4
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 8011d36:	fa00 f101 	lsl.w	r1, r0, r1
 8011d3a:	4311      	orrs	r1, r2
 8011d3c:	6099      	str	r1, [r3, #8]
}
 8011d3e:	4770      	bx	lr

08011d40 <TIM_DeInit>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval None

  */
void TIM_DeInit(TIM_TypeDef* TIMx)
{
 8011d40:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
 8011d42:	4b60      	ldr	r3, [pc, #384]	; (8011ec4 <TIM_DeInit+0x184>)
 8011d44:	4298      	cmp	r0, r3
 8011d46:	d032      	beq.n	8011dae <TIM_DeInit+0x6e>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
  } 
  else if (TIMx == TIM2) 
 8011d48:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8011d4c:	d039      	beq.n	8011dc2 <TIM_DeInit+0x82>
  {     
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
  }  
  else if (TIMx == TIM3)
 8011d4e:	4b5e      	ldr	r3, [pc, #376]	; (8011ec8 <TIM_DeInit+0x188>)
 8011d50:	4298      	cmp	r0, r3
 8011d52:	d040      	beq.n	8011dd6 <TIM_DeInit+0x96>
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
  }  
  else if (TIMx == TIM4)
 8011d54:	4b5d      	ldr	r3, [pc, #372]	; (8011ecc <TIM_DeInit+0x18c>)
 8011d56:	4298      	cmp	r0, r3
 8011d58:	d047      	beq.n	8011dea <TIM_DeInit+0xaa>
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
  }  
  else if (TIMx == TIM5)
 8011d5a:	4b5d      	ldr	r3, [pc, #372]	; (8011ed0 <TIM_DeInit+0x190>)
 8011d5c:	4298      	cmp	r0, r3
 8011d5e:	d01c      	beq.n	8011d9a <TIM_DeInit+0x5a>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
  }  
  else if (TIMx == TIM6)  
 8011d60:	4b5c      	ldr	r3, [pc, #368]	; (8011ed4 <TIM_DeInit+0x194>)
 8011d62:	4298      	cmp	r0, r3
 8011d64:	d04b      	beq.n	8011dfe <TIM_DeInit+0xbe>
  {    
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
  }  
  else if (TIMx == TIM7)
 8011d66:	4b5c      	ldr	r3, [pc, #368]	; (8011ed8 <TIM_DeInit+0x198>)
 8011d68:	4298      	cmp	r0, r3
 8011d6a:	d052      	beq.n	8011e12 <TIM_DeInit+0xd2>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
  }  
  else if (TIMx == TIM8)
 8011d6c:	4b5b      	ldr	r3, [pc, #364]	; (8011edc <TIM_DeInit+0x19c>)
 8011d6e:	4298      	cmp	r0, r3
 8011d70:	d065      	beq.n	8011e3e <TIM_DeInit+0xfe>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
  }  
  else if (TIMx == TIM9)
 8011d72:	4b5b      	ldr	r3, [pc, #364]	; (8011ee0 <TIM_DeInit+0x1a0>)
 8011d74:	4298      	cmp	r0, r3
 8011d76:	d06c      	beq.n	8011e52 <TIM_DeInit+0x112>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
   }  
  else if (TIMx == TIM10)
 8011d78:	4b5a      	ldr	r3, [pc, #360]	; (8011ee4 <TIM_DeInit+0x1a4>)
 8011d7a:	4298      	cmp	r0, r3
 8011d7c:	d053      	beq.n	8011e26 <TIM_DeInit+0xe6>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
  }  
  else if (TIMx == TIM11) 
 8011d7e:	4b5a      	ldr	r3, [pc, #360]	; (8011ee8 <TIM_DeInit+0x1a8>)
 8011d80:	4298      	cmp	r0, r3
 8011d82:	d072      	beq.n	8011e6a <TIM_DeInit+0x12a>
  {     
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
  }  
  else if (TIMx == TIM12)
 8011d84:	4b59      	ldr	r3, [pc, #356]	; (8011eec <TIM_DeInit+0x1ac>)
 8011d86:	4298      	cmp	r0, r3
 8011d88:	d07b      	beq.n	8011e82 <TIM_DeInit+0x142>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
  }  
  else if (TIMx == TIM13) 
 8011d8a:	4b59      	ldr	r3, [pc, #356]	; (8011ef0 <TIM_DeInit+0x1b0>)
 8011d8c:	4298      	cmp	r0, r3
 8011d8e:	f000 808e 	beq.w	8011eae <TIM_DeInit+0x16e>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
  }  
  else
  { 
    if (TIMx == TIM14) 
 8011d92:	4b58      	ldr	r3, [pc, #352]	; (8011ef4 <TIM_DeInit+0x1b4>)
 8011d94:	4298      	cmp	r0, r3
 8011d96:	d07e      	beq.n	8011e96 <TIM_DeInit+0x156>
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
    }   
  }
}
 8011d98:	bd08      	pop	{r3, pc}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
 8011d9a:	2101      	movs	r1, #1
 8011d9c:	2008      	movs	r0, #8
 8011d9e:	f7ff ff97 	bl	8011cd0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
 8011da2:	2100      	movs	r1, #0
 8011da4:	2008      	movs	r0, #8
}
 8011da6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
 8011daa:	f7ff bf91 	b.w	8011cd0 <RCC_APB1PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
 8011dae:	2101      	movs	r1, #1
 8011db0:	4608      	mov	r0, r1
 8011db2:	f7ff ff9d 	bl	8011cf0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
 8011db6:	2100      	movs	r1, #0
 8011db8:	2001      	movs	r0, #1
}
 8011dba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
 8011dbe:	f7ff bf97 	b.w	8011cf0 <RCC_APB2PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
 8011dc2:	2101      	movs	r1, #1
 8011dc4:	4608      	mov	r0, r1
 8011dc6:	f7ff ff83 	bl	8011cd0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 8011dca:	2100      	movs	r1, #0
 8011dcc:	2001      	movs	r0, #1
}
 8011dce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 8011dd2:	f7ff bf7d 	b.w	8011cd0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
 8011dd6:	2101      	movs	r1, #1
 8011dd8:	2002      	movs	r0, #2
 8011dda:	f7ff ff79 	bl	8011cd0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 8011dde:	2100      	movs	r1, #0
 8011de0:	2002      	movs	r0, #2
}
 8011de2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 8011de6:	f7ff bf73 	b.w	8011cd0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
 8011dea:	2101      	movs	r1, #1
 8011dec:	2004      	movs	r0, #4
 8011dee:	f7ff ff6f 	bl	8011cd0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
 8011df2:	2100      	movs	r1, #0
 8011df4:	2004      	movs	r0, #4
}
 8011df6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
 8011dfa:	f7ff bf69 	b.w	8011cd0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
 8011dfe:	2101      	movs	r1, #1
 8011e00:	2010      	movs	r0, #16
 8011e02:	f7ff ff65 	bl	8011cd0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 8011e06:	2100      	movs	r1, #0
 8011e08:	2010      	movs	r0, #16
}
 8011e0a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 8011e0e:	f7ff bf5f 	b.w	8011cd0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
 8011e12:	2101      	movs	r1, #1
 8011e14:	2020      	movs	r0, #32
 8011e16:	f7ff ff5b 	bl	8011cd0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 8011e1a:	2100      	movs	r1, #0
 8011e1c:	2020      	movs	r0, #32
}
 8011e1e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 8011e22:	f7ff bf55 	b.w	8011cd0 <RCC_APB1PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
 8011e26:	2101      	movs	r1, #1
 8011e28:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8011e2c:	f7ff ff60 	bl	8011cf0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
 8011e30:	2100      	movs	r1, #0
 8011e32:	f44f 3000 	mov.w	r0, #131072	; 0x20000
}
 8011e36:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
 8011e3a:	f7ff bf59 	b.w	8011cf0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
 8011e3e:	2101      	movs	r1, #1
 8011e40:	2002      	movs	r0, #2
 8011e42:	f7ff ff55 	bl	8011cf0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
 8011e46:	2100      	movs	r1, #0
 8011e48:	2002      	movs	r0, #2
}
 8011e4a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
 8011e4e:	f7ff bf4f 	b.w	8011cf0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
 8011e52:	2101      	movs	r1, #1
 8011e54:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8011e58:	f7ff ff4a 	bl	8011cf0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
 8011e5c:	2100      	movs	r1, #0
 8011e5e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
}
 8011e62:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
 8011e66:	f7ff bf43 	b.w	8011cf0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
 8011e6a:	2101      	movs	r1, #1
 8011e6c:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8011e70:	f7ff ff3e 	bl	8011cf0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
 8011e74:	2100      	movs	r1, #0
 8011e76:	f44f 2080 	mov.w	r0, #262144	; 0x40000
}
 8011e7a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
 8011e7e:	f7ff bf37 	b.w	8011cf0 <RCC_APB2PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
 8011e82:	2101      	movs	r1, #1
 8011e84:	2040      	movs	r0, #64	; 0x40
 8011e86:	f7ff ff23 	bl	8011cd0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
 8011e8a:	2100      	movs	r1, #0
 8011e8c:	2040      	movs	r0, #64	; 0x40
}
 8011e8e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
 8011e92:	f7ff bf1d 	b.w	8011cd0 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
 8011e96:	2101      	movs	r1, #1
 8011e98:	f44f 7080 	mov.w	r0, #256	; 0x100
 8011e9c:	f7ff ff18 	bl	8011cd0 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
 8011ea0:	2100      	movs	r1, #0
 8011ea2:	f44f 7080 	mov.w	r0, #256	; 0x100
}
 8011ea6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
 8011eaa:	f7ff bf11 	b.w	8011cd0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
 8011eae:	2101      	movs	r1, #1
 8011eb0:	2080      	movs	r0, #128	; 0x80
 8011eb2:	f7ff ff0d 	bl	8011cd0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
 8011eb6:	2100      	movs	r1, #0
 8011eb8:	2080      	movs	r0, #128	; 0x80
}
 8011eba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
 8011ebe:	f7ff bf07 	b.w	8011cd0 <RCC_APB1PeriphResetCmd>
 8011ec2:	bf00      	nop
 8011ec4:	40010000 	.word	0x40010000
 8011ec8:	40000400 	.word	0x40000400
 8011ecc:	40000800 	.word	0x40000800
 8011ed0:	40000c00 	.word	0x40000c00
 8011ed4:	40001000 	.word	0x40001000
 8011ed8:	40001400 	.word	0x40001400
 8011edc:	40010400 	.word	0x40010400
 8011ee0:	40014000 	.word	0x40014000
 8011ee4:	40014400 	.word	0x40014400
 8011ee8:	40014800 	.word	0x40014800
 8011eec:	40001800 	.word	0x40001800
 8011ef0:	40001c00 	.word	0x40001c00
 8011ef4:	40002000 	.word	0x40002000
	...

08011f00 <TIM_TimeBaseInit>:
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8011f00:	4a21      	ldr	r2, [pc, #132]	; (8011f88 <TIM_TimeBaseInit+0x88>)
  tmpcr1 = TIMx->CR1;  
 8011f02:	6803      	ldr	r3, [r0, #0]
  if((TIMx == TIM1) || (TIMx == TIM8)||
 8011f04:	4290      	cmp	r0, r2
{
 8011f06:	b470      	push	{r4, r5, r6}
  tmpcr1 = TIMx->CR1;  
 8011f08:	b29b      	uxth	r3, r3
  if((TIMx == TIM1) || (TIMx == TIM8)||
 8011f0a:	d012      	beq.n	8011f32 <TIM_TimeBaseInit+0x32>
 8011f0c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011f10:	4290      	cmp	r0, r2
 8011f12:	d00e      	beq.n	8011f32 <TIM_TimeBaseInit+0x32>
 8011f14:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8011f18:	d00b      	beq.n	8011f32 <TIM_TimeBaseInit+0x32>
     (TIMx == TIM2) || (TIMx == TIM3)||
 8011f1a:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
 8011f1e:	4290      	cmp	r0, r2
 8011f20:	d007      	beq.n	8011f32 <TIM_TimeBaseInit+0x32>
 8011f22:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011f26:	4290      	cmp	r0, r2
 8011f28:	d003      	beq.n	8011f32 <TIM_TimeBaseInit+0x32>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8011f2a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8011f2e:	4290      	cmp	r0, r2
 8011f30:	d103      	bne.n	8011f3a <TIM_TimeBaseInit+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8011f32:	884a      	ldrh	r2, [r1, #2]
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8011f34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8011f38:	4313      	orrs	r3, r2
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8011f3a:	4d14      	ldr	r5, [pc, #80]	; (8011f8c <TIM_TimeBaseInit+0x8c>)
 8011f3c:	684c      	ldr	r4, [r1, #4]
 8011f3e:	880a      	ldrh	r2, [r1, #0]
 8011f40:	42a8      	cmp	r0, r5
 8011f42:	d015      	beq.n	8011f70 <TIM_TimeBaseInit+0x70>
 8011f44:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8011f48:	42a8      	cmp	r0, r5
 8011f4a:	d011      	beq.n	8011f70 <TIM_TimeBaseInit+0x70>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8011f4c:	890e      	ldrh	r6, [r1, #8]
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8011f4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 8011f52:	f505 456c 	add.w	r5, r5, #60416	; 0xec00
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8011f56:	b29b      	uxth	r3, r3
  TIMx->CR1 = tmpcr1;
 8011f58:	4333      	orrs	r3, r6
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 8011f5a:	42a8      	cmp	r0, r5
  TIMx->CR1 = tmpcr1;
 8011f5c:	6003      	str	r3, [r0, #0]
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8011f5e:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8011f60:	6282      	str	r2, [r0, #40]	; 0x28
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 8011f62:	d10c      	bne.n	8011f7e <TIM_TimeBaseInit+0x7e>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8011f64:	7a8b      	ldrb	r3, [r1, #10]
 8011f66:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8011f68:	2301      	movs	r3, #1
 8011f6a:	6143      	str	r3, [r0, #20]
}
 8011f6c:	bc70      	pop	{r4, r5, r6}
 8011f6e:	4770      	bx	lr
  TIMx->CR1 = tmpcr1;
 8011f70:	6003      	str	r3, [r0, #0]
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8011f72:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8011f74:	6282      	str	r2, [r0, #40]	; 0x28
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8011f76:	2301      	movs	r3, #1
 8011f78:	6143      	str	r3, [r0, #20]
}
 8011f7a:	bc70      	pop	{r4, r5, r6}
 8011f7c:	4770      	bx	lr
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 8011f7e:	4b04      	ldr	r3, [pc, #16]	; (8011f90 <TIM_TimeBaseInit+0x90>)
 8011f80:	4298      	cmp	r0, r3
 8011f82:	d0ef      	beq.n	8011f64 <TIM_TimeBaseInit+0x64>
 8011f84:	e7f7      	b.n	8011f76 <TIM_TimeBaseInit+0x76>
 8011f86:	bf00      	nop
 8011f88:	40010000 	.word	0x40010000
 8011f8c:	40001000 	.word	0x40001000
 8011f90:	40010400 	.word	0x40010400
	...

08011fa0 <TIM_SetAutoreload>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  
  /* Set the Autoreload Register value */
  TIMx->ARR = Autoreload;
 8011fa0:	62c1      	str	r1, [r0, #44]	; 0x2c
}
 8011fa2:	4770      	bx	lr
	...

08011fb0 <TIM_ARRPreloadConfig>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 8011fb0:	6803      	ldr	r3, [r0, #0]
  if (NewState != DISABLE)
 8011fb2:	b921      	cbnz	r1, 8011fbe <TIM_ARRPreloadConfig+0xe>
  }
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
 8011fb4:	f64f 727f 	movw	r2, #65407	; 0xff7f
 8011fb8:	4013      	ands	r3, r2
 8011fba:	6003      	str	r3, [r0, #0]
  }
}
 8011fbc:	4770      	bx	lr
    TIMx->CR1 |= TIM_CR1_ARPE;
 8011fbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011fc2:	6003      	str	r3, [r0, #0]
 8011fc4:	4770      	bx	lr
 8011fc6:	bf00      	nop
	...

08011fd0 <TIM_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8011fd0:	6803      	ldr	r3, [r0, #0]
  if (NewState != DISABLE)
 8011fd2:	b921      	cbnz	r1, 8011fde <TIM_Cmd+0xe>
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 8011fd4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8011fd8:	4013      	ands	r3, r2
 8011fda:	6003      	str	r3, [r0, #0]
  }
}
 8011fdc:	4770      	bx	lr
    TIMx->CR1 |= TIM_CR1_CEN;
 8011fde:	f043 0301 	orr.w	r3, r3, #1
 8011fe2:	6003      	str	r3, [r0, #0]
 8011fe4:	4770      	bx	lr
 8011fe6:	bf00      	nop
	...

08011ff0 <TIM_OC1Init>:
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 8011ff0:	6a03      	ldr	r3, [r0, #32]
 8011ff2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8011ff6:	4013      	ands	r3, r2
 8011ff8:	6203      	str	r3, [r0, #32]
{
 8011ffa:	b4f0      	push	{r4, r5, r6, r7}
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011ffc:	f8d0 c020 	ldr.w	ip, [r0, #32]
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8012000:	898a      	ldrh	r2, [r1, #12]
 8012002:	884f      	ldrh	r7, [r1, #2]
  tmpcr2 =  TIMx->CR2;
 8012004:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8012006:	6985      	ldr	r5, [r0, #24]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8012008:	4e14      	ldr	r6, [pc, #80]	; (801205c <TIM_OC1Init+0x6c>)
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
 801200a:	f64f 74fd 	movw	r4, #65533	; 0xfffd
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 801200e:	433a      	orrs	r2, r7
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
 8012010:	ea0c 0404 	and.w	r4, ip, r4
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8012014:	4314      	orrs	r4, r2
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
 8012016:	f64f 728c 	movw	r2, #65420	; 0xff8c
 801201a:	402a      	ands	r2, r5
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 801201c:	880d      	ldrh	r5, [r1, #0]
  if((TIMx == TIM1) || (TIMx == TIM8))
 801201e:	42b0      	cmp	r0, r6
  tmpcr2 =  TIMx->CR2;
 8012020:	b29b      	uxth	r3, r3
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8012022:	ea42 0205 	orr.w	r2, r2, r5
  if((TIMx == TIM1) || (TIMx == TIM8))
 8012026:	d00a      	beq.n	801203e <TIM_OC1Init+0x4e>
 8012028:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 801202c:	42b0      	cmp	r0, r6
 801202e:	d006      	beq.n	801203e <TIM_OC1Init+0x4e>
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 8012030:	6889      	ldr	r1, [r1, #8]
  TIMx->CR2 = tmpcr2;
 8012032:	6043      	str	r3, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8012034:	6182      	str	r2, [r0, #24]
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 8012036:	6341      	str	r1, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012038:	6204      	str	r4, [r0, #32]
}
 801203a:	bcf0      	pop	{r4, r5, r6, r7}
 801203c:	4770      	bx	lr
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 801203e:	89ce      	ldrh	r6, [r1, #14]
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 8012040:	8a0d      	ldrh	r5, [r1, #16]
 8012042:	8a4f      	ldrh	r7, [r1, #18]
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 8012044:	f024 0408 	bic.w	r4, r4, #8
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 8012048:	4334      	orrs	r4, r6
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 801204a:	888e      	ldrh	r6, [r1, #4]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
 801204c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
 8012050:	f024 0404 	bic.w	r4, r4, #4
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 8012054:	433d      	orrs	r5, r7
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 8012056:	4334      	orrs	r4, r6
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 8012058:	432b      	orrs	r3, r5
 801205a:	e7e9      	b.n	8012030 <TIM_OC1Init+0x40>
 801205c:	40010000 	.word	0x40010000

08012060 <TIM_OC2Init>:
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8012060:	6a03      	ldr	r3, [r0, #32]
 8012062:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8012066:	4013      	ands	r3, r2
 8012068:	6203      	str	r3, [r0, #32]
{
 801206a:	b4f0      	push	{r4, r5, r6, r7}
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 801206c:	f8d0 c020 	ldr.w	ip, [r0, #32]
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 8012070:	898a      	ldrh	r2, [r1, #12]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 8012072:	884f      	ldrh	r7, [r1, #2]
  tmpcr2 =  TIMx->CR2;
 8012074:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8012076:	6986      	ldr	r6, [r0, #24]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8012078:	4d19      	ldr	r5, [pc, #100]	; (80120e0 <TIM_OC2Init+0x80>)
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
 801207a:	f64f 73df 	movw	r3, #65503	; 0xffdf
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 801207e:	433a      	orrs	r2, r7
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
 8012080:	ea0c 0303 	and.w	r3, ip, r3
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 8012084:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
 8012088:	f648 42ff 	movw	r2, #36095	; 0x8cff
 801208c:	4032      	ands	r2, r6
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 801208e:	880e      	ldrh	r6, [r1, #0]
  if((TIMx == TIM1) || (TIMx == TIM8))
 8012090:	42a8      	cmp	r0, r5
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8012092:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 8012096:	b29b      	uxth	r3, r3
  tmpcr2 =  TIMx->CR2;
 8012098:	b2a4      	uxth	r4, r4
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 801209a:	b292      	uxth	r2, r2
  if((TIMx == TIM1) || (TIMx == TIM8))
 801209c:	d00a      	beq.n	80120b4 <TIM_OC2Init+0x54>
 801209e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80120a2:	42a8      	cmp	r0, r5
 80120a4:	d006      	beq.n	80120b4 <TIM_OC2Init+0x54>
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 80120a6:	6889      	ldr	r1, [r1, #8]
  TIMx->CR2 = tmpcr2;
 80120a8:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80120aa:	6182      	str	r2, [r0, #24]
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 80120ac:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 80120ae:	6381      	str	r1, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80120b0:	6203      	str	r3, [r0, #32]
}
 80120b2:	4770      	bx	lr
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 80120b4:	89cd      	ldrh	r5, [r1, #14]
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 80120b6:	8a0e      	ldrh	r6, [r1, #16]
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 80120b8:	8a4f      	ldrh	r7, [r1, #18]
    tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 80120ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 80120be:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
 80120c2:	f64f 75bf 	movw	r5, #65471	; 0xffbf
 80120c6:	401d      	ands	r5, r3
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 80120c8:	888b      	ldrh	r3, [r1, #4]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
 80120ca:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 80120ce:	433e      	orrs	r6, r7
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 80120d0:	ea45 1303 	orr.w	r3, r5, r3, lsl #4
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 80120d4:	ea44 0486 	orr.w	r4, r4, r6, lsl #2
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 80120d8:	b29b      	uxth	r3, r3
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 80120da:	b2a4      	uxth	r4, r4
 80120dc:	e7e3      	b.n	80120a6 <TIM_OC2Init+0x46>
 80120de:	bf00      	nop
 80120e0:	40010000 	.word	0x40010000
	...

080120f0 <TIM_OC3Init>:
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 80120f0:	6a03      	ldr	r3, [r0, #32]
 80120f2:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 80120f6:	4013      	ands	r3, r2
 80120f8:	6203      	str	r3, [r0, #32]
{
 80120fa:	b4f0      	push	{r4, r5, r6, r7}
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 80120fc:	884a      	ldrh	r2, [r1, #2]
  tmpccer = TIMx->CCER;
 80120fe:	6a07      	ldr	r7, [r0, #32]
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 8012100:	898c      	ldrh	r4, [r1, #12]
  tmpcr2 =  TIMx->CR2;
 8012102:	6845      	ldr	r5, [r0, #4]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8012104:	4e19      	ldr	r6, [pc, #100]	; (801216c <TIM_OC3Init+0x7c>)
  tmpccmrx = TIMx->CCMR2;
 8012106:	f8d0 c01c 	ldr.w	ip, [r0, #28]
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 801210a:	f64f 53ff 	movw	r3, #65023	; 0xfdff
 801210e:	403b      	ands	r3, r7
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 8012110:	4314      	orrs	r4, r2
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8012112:	880f      	ldrh	r7, [r1, #0]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
 8012114:	f64f 728c 	movw	r2, #65420	; 0xff8c
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 8012118:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
 801211c:	ea0c 0202 	and.w	r2, ip, r2
  if((TIMx == TIM1) || (TIMx == TIM8))
 8012120:	42b0      	cmp	r0, r6
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 8012122:	b29b      	uxth	r3, r3
  tmpcr2 =  TIMx->CR2;
 8012124:	b2ad      	uxth	r5, r5
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8012126:	ea42 0207 	orr.w	r2, r2, r7
  if((TIMx == TIM1) || (TIMx == TIM8))
 801212a:	d009      	beq.n	8012140 <TIM_OC3Init+0x50>
 801212c:	4c10      	ldr	r4, [pc, #64]	; (8012170 <TIM_OC3Init+0x80>)
 801212e:	42a0      	cmp	r0, r4
 8012130:	d006      	beq.n	8012140 <TIM_OC3Init+0x50>
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 8012132:	6889      	ldr	r1, [r1, #8]
  TIMx->CR2 = tmpcr2;
 8012134:	6045      	str	r5, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8012136:	61c2      	str	r2, [r0, #28]
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8012138:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 801213a:	63c1      	str	r1, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 801213c:	6203      	str	r3, [r0, #32]
}
 801213e:	4770      	bx	lr
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 8012140:	89cc      	ldrh	r4, [r1, #14]
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 8012142:	8a0e      	ldrh	r6, [r1, #16]
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 8012144:	8a4f      	ldrh	r7, [r1, #18]
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 8012146:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 801214a:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
 801214e:	f64f 34ff 	movw	r4, #64511	; 0xfbff
 8012152:	401c      	ands	r4, r3
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8012154:	888b      	ldrh	r3, [r1, #4]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
 8012156:	f425 5540 	bic.w	r5, r5, #12288	; 0x3000
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 801215a:	433e      	orrs	r6, r7
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 801215c:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 8012160:	ea45 1406 	orr.w	r4, r5, r6, lsl #4
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8012164:	b29b      	uxth	r3, r3
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 8012166:	b2a5      	uxth	r5, r4
 8012168:	e7e3      	b.n	8012132 <TIM_OC3Init+0x42>
 801216a:	bf00      	nop
 801216c:	40010000 	.word	0x40010000
 8012170:	40010400 	.word	0x40010400
	...

08012180 <TIM_OC4Init>:
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 8012180:	6a03      	ldr	r3, [r0, #32]
 8012182:	f64e 72ff 	movw	r2, #61439	; 0xefff
 8012186:	4013      	ands	r3, r2
 8012188:	6203      	str	r3, [r0, #32]
{
 801218a:	b4f0      	push	{r4, r5, r6, r7}
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801218c:	f8d0 c020 	ldr.w	ip, [r0, #32]
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 8012190:	898a      	ldrh	r2, [r1, #12]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8012192:	884f      	ldrh	r7, [r1, #2]
  tmpcr2 =  TIMx->CR2;
 8012194:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8012196:	69c6      	ldr	r6, [r0, #28]
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 8012198:	4d12      	ldr	r5, [pc, #72]	; (80121e4 <TIM_OC4Init+0x64>)
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 801219a:	f64d 73ff 	movw	r3, #57343	; 0xdfff
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 801219e:	433a      	orrs	r2, r7
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 80121a0:	ea0c 0303 	and.w	r3, ip, r3
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 80121a4:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
 80121a8:	f648 42ff 	movw	r2, #36095	; 0x8cff
 80121ac:	4032      	ands	r2, r6
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 80121ae:	880e      	ldrh	r6, [r1, #0]
  if((TIMx == TIM1) || (TIMx == TIM8))
 80121b0:	42a8      	cmp	r0, r5
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 80121b2:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 80121b6:	b29b      	uxth	r3, r3
  tmpcr2 =  TIMx->CR2;
 80121b8:	b2a4      	uxth	r4, r4
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 80121ba:	b292      	uxth	r2, r2
  if((TIMx == TIM1) || (TIMx == TIM8))
 80121bc:	d00a      	beq.n	80121d4 <TIM_OC4Init+0x54>
 80121be:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80121c2:	42a8      	cmp	r0, r5
 80121c4:	d006      	beq.n	80121d4 <TIM_OC4Init+0x54>
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 80121c6:	6889      	ldr	r1, [r1, #8]
  TIMx->CR2 = tmpcr2;
 80121c8:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 80121ca:	61c2      	str	r2, [r0, #28]
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 80121cc:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 80121ce:	6401      	str	r1, [r0, #64]	; 0x40
  TIMx->CCER = tmpccer;
 80121d0:	6203      	str	r3, [r0, #32]
}
 80121d2:	4770      	bx	lr
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 80121d4:	8a0d      	ldrh	r5, [r1, #16]
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
 80121d6:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 80121da:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 80121de:	b2a4      	uxth	r4, r4
 80121e0:	e7f1      	b.n	80121c6 <TIM_OC4Init+0x46>
 80121e2:	bf00      	nop
 80121e4:	40010000 	.word	0x40010000
	...

080121f0 <TIM_OC1PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 80121f0:	6982      	ldr	r2, [r0, #24]

  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC1PE);
 80121f2:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 80121f6:	4013      	ands	r3, r2

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 80121f8:	4319      	orrs	r1, r3
 80121fa:	6181      	str	r1, [r0, #24]
}
 80121fc:	4770      	bx	lr
 80121fe:	bf00      	nop

08012200 <TIM_OC2PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 8012200:	6982      	ldr	r2, [r0, #24]

  /* Reset the OC2PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2PE);
 8012202:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
 8012206:	4013      	ands	r3, r2

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
 8012208:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 801220c:	b289      	uxth	r1, r1
 801220e:	6181      	str	r1, [r0, #24]
}
 8012210:	4770      	bx	lr
 8012212:	bf00      	nop
	...

08012220 <TIM_OC3PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 8012220:	69c2      	ldr	r2, [r0, #28]

  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC3PE);
 8012222:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 8012226:	4013      	ands	r3, r2

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8012228:	4319      	orrs	r1, r3
 801222a:	61c1      	str	r1, [r0, #28]
}
 801222c:	4770      	bx	lr
 801222e:	bf00      	nop

08012230 <TIM_OC4PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 8012230:	69c2      	ldr	r2, [r0, #28]

  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4PE);
 8012232:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
 8012236:	4013      	ands	r3, r2

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
 8012238:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 801223c:	b289      	uxth	r1, r1
 801223e:	61c1      	str	r1, [r0, #28]
}
 8012240:	4770      	bx	lr
 8012242:	bf00      	nop
	...

08012250 <TIM_BDTRConfig>:
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure that
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval None
  */
void TIM_BDTRConfig(TIM_TypeDef* TIMx, TIM_BDTRInitTypeDef *TIM_BDTRInitStruct)
{
 8012250:	b470      	push	{r4, r5, r6}

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
 8012252:	880b      	ldrh	r3, [r1, #0]
 8012254:	884c      	ldrh	r4, [r1, #2]
 8012256:	888a      	ldrh	r2, [r1, #4]
 8012258:	88ce      	ldrh	r6, [r1, #6]
 801225a:	890d      	ldrh	r5, [r1, #8]
 801225c:	4323      	orrs	r3, r4
 801225e:	4313      	orrs	r3, r2
 8012260:	894c      	ldrh	r4, [r1, #10]
 8012262:	898a      	ldrh	r2, [r1, #12]
 8012264:	4333      	orrs	r3, r6
 8012266:	432b      	orrs	r3, r5
 8012268:	4323      	orrs	r3, r4
 801226a:	4313      	orrs	r3, r2
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 801226c:	6443      	str	r3, [r0, #68]	; 0x44
             TIM_BDTRInitStruct->TIM_AutomaticOutput;
}
 801226e:	bc70      	pop	{r4, r5, r6}
 8012270:	4770      	bx	lr
 8012272:	bf00      	nop
	...

08012280 <TIM_CtrlPWMOutputs>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 8012280:	6c43      	ldr	r3, [r0, #68]	; 0x44
  if (NewState != DISABLE)
 8012282:	b919      	cbnz	r1, 801228c <TIM_CtrlPWMOutputs+0xc>
  }
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)~TIM_BDTR_MOE;
 8012284:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8012288:	6443      	str	r3, [r0, #68]	; 0x44
  }  
}
 801228a:	4770      	bx	lr
    TIMx->BDTR |= TIM_BDTR_MOE;
 801228c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012290:	6443      	str	r3, [r0, #68]	; 0x44
 8012292:	4770      	bx	lr
	...

080122a0 <TIM_CCPreloadControl>:
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= TIM_CR2_CCPC;
 80122a0:	6843      	ldr	r3, [r0, #4]
  if (NewState != DISABLE)
 80122a2:	b921      	cbnz	r1, 80122ae <TIM_CCPreloadControl+0xe>
  }
  else
  {
    /* Reset the CCPC Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCPC;
 80122a4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80122a8:	4013      	ands	r3, r2
 80122aa:	6043      	str	r3, [r0, #4]
  }
}
 80122ac:	4770      	bx	lr
    TIMx->CR2 |= TIM_CR2_CCPC;
 80122ae:	f043 0301 	orr.w	r3, r3, #1
 80122b2:	6043      	str	r3, [r0, #4]
 80122b4:	4770      	bx	lr
 80122b6:	bf00      	nop
	...

080122c0 <TIM_ITConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80122c0:	b92a      	cbnz	r2, 80122ce <TIM_ITConfig+0xe>
    TIMx->DIER |= TIM_IT;
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 80122c2:	68c3      	ldr	r3, [r0, #12]
 80122c4:	43c9      	mvns	r1, r1
 80122c6:	b289      	uxth	r1, r1
 80122c8:	4019      	ands	r1, r3
 80122ca:	60c1      	str	r1, [r0, #12]
  }
}
 80122cc:	4770      	bx	lr
    TIMx->DIER |= TIM_IT;
 80122ce:	68c3      	ldr	r3, [r0, #12]
 80122d0:	4319      	orrs	r1, r3
 80122d2:	60c1      	str	r1, [r0, #12]
 80122d4:	4770      	bx	lr
 80122d6:	bf00      	nop
	...

080122e0 <TIM_GetITStatus>:
  uint16_t itstatus = 0x0, itenable = 0x0;
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 80122e0:	6903      	ldr	r3, [r0, #16]
  
  itenable = TIMx->DIER & TIM_IT;
 80122e2:	68c2      	ldr	r2, [r0, #12]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 80122e4:	ea11 0003 	ands.w	r0, r1, r3
 80122e8:	d003      	beq.n	80122f2 <TIM_GetITStatus+0x12>
 80122ea:	4211      	tst	r1, r2
  {
    bitstatus = SET;
 80122ec:	bf14      	ite	ne
 80122ee:	2001      	movne	r0, #1
 80122f0:	2000      	moveq	r0, #0
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 80122f2:	4770      	bx	lr
	...

08012300 <TIM_ClearITPendingBit>:
 8012300:	43c9      	mvns	r1, r1
 8012302:	b289      	uxth	r1, r1
 8012304:	6101      	str	r1, [r0, #16]
 8012306:	4770      	bx	lr
	...

08012310 <TIM_SelectInputTrigger>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8012310:	6882      	ldr	r2, [r0, #8]

  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 8012312:	f64f 738f 	movw	r3, #65423	; 0xff8f
 8012316:	4013      	ands	r3, r2

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8012318:	4319      	orrs	r1, r3
 801231a:	6081      	str	r1, [r0, #8]
}
 801231c:	4770      	bx	lr
 801231e:	bf00      	nop

08012320 <TIM_SelectOutputTrigger>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));

  /* Reset the MMS Bits */
  TIMx->CR2 &= (uint16_t)~TIM_CR2_MMS;
 8012320:	6843      	ldr	r3, [r0, #4]
 8012322:	f64f 728f 	movw	r2, #65423	; 0xff8f
 8012326:	4013      	ands	r3, r2
 8012328:	6043      	str	r3, [r0, #4]
  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGOSource;
 801232a:	6843      	ldr	r3, [r0, #4]
 801232c:	4319      	orrs	r1, r3
 801232e:	6041      	str	r1, [r0, #4]
}
 8012330:	4770      	bx	lr
 8012332:	bf00      	nop
	...

08012340 <TIM_SelectSlaveMode>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_SLAVE_MODE(TIM_SlaveMode));

  /* Reset the SMS Bits */
  TIMx->SMCR &= (uint16_t)~TIM_SMCR_SMS;
 8012340:	6883      	ldr	r3, [r0, #8]
 8012342:	f64f 72f8 	movw	r2, #65528	; 0xfff8
 8012346:	4013      	ands	r3, r2
 8012348:	6083      	str	r3, [r0, #8]

  /* Select the Slave Mode */
  TIMx->SMCR |= TIM_SlaveMode;
 801234a:	6883      	ldr	r3, [r0, #8]
 801234c:	4319      	orrs	r1, r3
 801234e:	6081      	str	r1, [r0, #8]
}
 8012350:	4770      	bx	lr
 8012352:	bf00      	nop
	...

08012360 <TIM_SelectMasterSlaveMode>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_MSM_STATE(TIM_MasterSlaveMode));

  /* Reset the MSM Bit */
  TIMx->SMCR &= (uint16_t)~TIM_SMCR_MSM;
 8012360:	6883      	ldr	r3, [r0, #8]
 8012362:	f64f 727f 	movw	r2, #65407	; 0xff7f
 8012366:	4013      	ands	r3, r2
 8012368:	6083      	str	r3, [r0, #8]
  
  /* Set or Reset the MSM Bit */
  TIMx->SMCR |= TIM_MasterSlaveMode;
 801236a:	6883      	ldr	r3, [r0, #8]
 801236c:	4319      	orrs	r1, r3
 801236e:	6081      	str	r1, [r0, #8]
}
 8012370:	4770      	bx	lr
 8012372:	bf00      	nop
	...

08012380 <TIM_EncoderInterfaceConfig>:
  *            @arg TIM_ICPolarity_Rising: IC Rising edge.
  * @retval None
  */
void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, uint16_t TIM_EncoderMode,
                                uint16_t TIM_IC1Polarity, uint16_t TIM_IC2Polarity)
{
 8012380:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8012382:	6887      	ldr	r7, [r0, #8]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 8012384:	6986      	ldr	r6, [r0, #24]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012386:	f8d0 c020 	ldr.w	ip, [r0, #32]
  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
 801238a:	f64f 74dd 	movw	r4, #65501	; 0xffdd
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 801238e:	f64f 45fc 	movw	r5, #64764	; 0xfcfc
 8012392:	4035      	ands	r5, r6
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 8012394:	ea42 1303 	orr.w	r3, r2, r3, lsl #4
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
 8012398:	ea0c 0404 	and.w	r4, ip, r4
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 801239c:	f64f 76f8 	movw	r6, #65528	; 0xfff8
 80123a0:	403e      	ands	r6, r7
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 80123a2:	431c      	orrs	r4, r3

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 80123a4:	f445 7580 	orr.w	r5, r5, #256	; 0x100

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80123a8:	b2a4      	uxth	r4, r4
  TIMx->CCMR1 = tmpccmr1;
 80123aa:	f045 0501 	orr.w	r5, r5, #1
  TIMx->SMCR = tmpsmcr;
 80123ae:	4331      	orrs	r1, r6
 80123b0:	6081      	str	r1, [r0, #8]
  TIMx->CCMR1 = tmpccmr1;
 80123b2:	6185      	str	r5, [r0, #24]
  TIMx->CCER = tmpccer;
 80123b4:	6204      	str	r4, [r0, #32]
}
 80123b6:	bcf0      	pop	{r4, r5, r6, r7}
 80123b8:	4770      	bx	lr
 80123ba:	bf00      	nop
 80123bc:	0000      	movs	r0, r0
	...

080123c0 <WWDG_SetPrescaler>:
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_WWDG_PRESCALER(WWDG_Prescaler));
  /* Clear WDGTB[1:0] bits */
  tmpreg = WWDG->CFR & CFR_WDGTB_MASK;
 80123c0:	4a03      	ldr	r2, [pc, #12]	; (80123d0 <WWDG_SetPrescaler+0x10>)
 80123c2:	6853      	ldr	r3, [r2, #4]
 80123c4:	f423 73c0 	bic.w	r3, r3, #384	; 0x180
  /* Set WDGTB[1:0] bits according to WWDG_Prescaler value */
  tmpreg |= WWDG_Prescaler;
 80123c8:	4318      	orrs	r0, r3
  /* Store the new value */
  WWDG->CFR = tmpreg;
 80123ca:	6050      	str	r0, [r2, #4]
}
 80123cc:	4770      	bx	lr
 80123ce:	bf00      	nop
 80123d0:	40002c00 	.word	0x40002c00
	...

080123e0 <WWDG_SetWindowValue>:
  * @param  WindowValue: specifies the window value to be compared to the downcounter.
  *   This parameter value must be lower than 0x80.
  * @retval None
  */
void WWDG_SetWindowValue(uint8_t WindowValue)
{
 80123e0:	b082      	sub	sp, #8

  /* Check the parameters */
  assert_param(IS_WWDG_WINDOW_VALUE(WindowValue));
  /* Clear W[6:0] bits */

  tmpreg = WWDG->CFR & CFR_W_MASK;
 80123e2:	4a08      	ldr	r2, [pc, #32]	; (8012404 <WWDG_SetWindowValue+0x24>)
  __IO uint32_t tmpreg = 0;
 80123e4:	2300      	movs	r3, #0
 80123e6:	9301      	str	r3, [sp, #4]
  tmpreg = WWDG->CFR & CFR_W_MASK;
 80123e8:	6853      	ldr	r3, [r2, #4]
 80123ea:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80123ee:	9301      	str	r3, [sp, #4]

  /* Set W[6:0] bits according to WindowValue value */
  tmpreg |= WindowValue & (uint32_t) BIT_MASK;
 80123f0:	9b01      	ldr	r3, [sp, #4]
 80123f2:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80123f6:	4318      	orrs	r0, r3
 80123f8:	9001      	str	r0, [sp, #4]

  /* Store the new value */
  WWDG->CFR = tmpreg;
 80123fa:	9b01      	ldr	r3, [sp, #4]
 80123fc:	6053      	str	r3, [r2, #4]
}
 80123fe:	b002      	add	sp, #8
 8012400:	4770      	bx	lr
 8012402:	bf00      	nop
 8012404:	40002c00 	.word	0x40002c00
	...

08012410 <WWDG_SetCounter>:
{
  /* Check the parameters */
  assert_param(IS_WWDG_COUNTER(Counter));
  /* Write to T[6:0] bits to configure the counter value, no need to do
     a read-modify-write; writing a 0 to WDGA bit does nothing */
  WWDG->CR = Counter & BIT_MASK;
 8012410:	4b02      	ldr	r3, [pc, #8]	; (801241c <WWDG_SetCounter+0xc>)
 8012412:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8012416:	6018      	str	r0, [r3, #0]
}
 8012418:	4770      	bx	lr
 801241a:	bf00      	nop
 801241c:	40002c00 	.word	0x40002c00

08012420 <WWDG_Enable>:
  */
void WWDG_Enable(uint8_t Counter)
{
  /* Check the parameters */
  assert_param(IS_WWDG_COUNTER(Counter));
  WWDG->CR = WWDG_CR_WDGA | Counter;
 8012420:	4b02      	ldr	r3, [pc, #8]	; (801242c <WWDG_Enable+0xc>)
 8012422:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 8012426:	6018      	str	r0, [r3, #0]
}
 8012428:	4770      	bx	lr
 801242a:	bf00      	nop
 801242c:	40002c00 	.word	0x40002c00

08012430 <cosf>:
 8012430:	b500      	push	{lr}
 8012432:	ee10 3a10 	vmov	r3, s0
 8012436:	4a20      	ldr	r2, [pc, #128]	; (80124b8 <cosf+0x88>)
 8012438:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801243c:	4293      	cmp	r3, r2
 801243e:	b083      	sub	sp, #12
 8012440:	dd19      	ble.n	8012476 <cosf+0x46>
 8012442:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8012446:	db04      	blt.n	8012452 <cosf+0x22>
 8012448:	ee30 0a40 	vsub.f32	s0, s0, s0
 801244c:	b003      	add	sp, #12
 801244e:	f85d fb04 	ldr.w	pc, [sp], #4
 8012452:	4668      	mov	r0, sp
 8012454:	f000 fc74 	bl	8012d40 <__ieee754_rem_pio2f>
 8012458:	f000 0003 	and.w	r0, r0, #3
 801245c:	2801      	cmp	r0, #1
 801245e:	d011      	beq.n	8012484 <cosf+0x54>
 8012460:	2802      	cmp	r0, #2
 8012462:	d01f      	beq.n	80124a4 <cosf+0x74>
 8012464:	b1b8      	cbz	r0, 8012496 <cosf+0x66>
 8012466:	2001      	movs	r0, #1
 8012468:	eddd 0a01 	vldr	s1, [sp, #4]
 801246c:	ed9d 0a00 	vldr	s0, [sp]
 8012470:	f001 f96e 	bl	8013750 <__kernel_sinf>
 8012474:	e7ea      	b.n	801244c <cosf+0x1c>
 8012476:	eddf 0a11 	vldr	s1, [pc, #68]	; 80124bc <cosf+0x8c>
 801247a:	f000 fdb9 	bl	8012ff0 <__kernel_cosf>
 801247e:	b003      	add	sp, #12
 8012480:	f85d fb04 	ldr.w	pc, [sp], #4
 8012484:	eddd 0a01 	vldr	s1, [sp, #4]
 8012488:	ed9d 0a00 	vldr	s0, [sp]
 801248c:	f001 f960 	bl	8013750 <__kernel_sinf>
 8012490:	eeb1 0a40 	vneg.f32	s0, s0
 8012494:	e7da      	b.n	801244c <cosf+0x1c>
 8012496:	eddd 0a01 	vldr	s1, [sp, #4]
 801249a:	ed9d 0a00 	vldr	s0, [sp]
 801249e:	f000 fda7 	bl	8012ff0 <__kernel_cosf>
 80124a2:	e7d3      	b.n	801244c <cosf+0x1c>
 80124a4:	eddd 0a01 	vldr	s1, [sp, #4]
 80124a8:	ed9d 0a00 	vldr	s0, [sp]
 80124ac:	f000 fda0 	bl	8012ff0 <__kernel_cosf>
 80124b0:	eeb1 0a40 	vneg.f32	s0, s0
 80124b4:	e7ca      	b.n	801244c <cosf+0x1c>
 80124b6:	bf00      	nop
 80124b8:	3f490fd8 	.word	0x3f490fd8
 80124bc:	00000000 	.word	0x00000000

080124c0 <logf>:
 80124c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80124c4:	b082      	sub	sp, #8
 80124c6:	ed8d 0a00 	vstr	s0, [sp]
 80124ca:	9b00      	ldr	r3, [sp, #0]
 80124cc:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 80124d0:	d058      	beq.n	8012584 <logf+0xc4>
 80124d2:	f5a3 0200 	sub.w	r2, r3, #8388608	; 0x800000
 80124d6:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80124da:	d258      	bcs.n	801258e <logf+0xce>
 80124dc:	f103 4540 	add.w	r5, r3, #3221225472	; 0xc0000000
 80124e0:	f505 054d 	add.w	r5, r5, #13434880	; 0xcd0000
 80124e4:	4c3c      	ldr	r4, [pc, #240]	; (80125d8 <logf+0x118>)
 80124e6:	0de8      	lsrs	r0, r5, #23
 80124e8:	05c0      	lsls	r0, r0, #23
 80124ea:	f3c5 4ac3 	ubfx	sl, r5, #19, #4
 80124ee:	1a18      	subs	r0, r3, r0
 80124f0:	eb04 1a0a 	add.w	sl, r4, sl, lsl #4
 80124f4:	f7f9 ff88 	bl	800c408 <__aeabi_f2d>
 80124f8:	e9da 2300 	ldrd	r2, r3, [sl]
 80124fc:	f7f9 ffe0 	bl	800c4c0 <__aeabi_dmul>
 8012500:	2200      	movs	r2, #0
 8012502:	4b36      	ldr	r3, [pc, #216]	; (80125dc <logf+0x11c>)
 8012504:	f7f9 fe20 	bl	800c148 <__aeabi_dsub>
 8012508:	4602      	mov	r2, r0
 801250a:	460b      	mov	r3, r1
 801250c:	4606      	mov	r6, r0
 801250e:	460f      	mov	r7, r1
 8012510:	f7f9 ffd6 	bl	800c4c0 <__aeabi_dmul>
 8012514:	e9d4 2344 	ldrd	r2, r3, [r4, #272]	; 0x110
 8012518:	4680      	mov	r8, r0
 801251a:	4689      	mov	r9, r1
 801251c:	4630      	mov	r0, r6
 801251e:	4639      	mov	r1, r7
 8012520:	f7f9 ffce 	bl	800c4c0 <__aeabi_dmul>
 8012524:	e9d4 2346 	ldrd	r2, r3, [r4, #280]	; 0x118
 8012528:	f7f9 fe10 	bl	800c14c <__adddf3>
 801252c:	e9d4 2342 	ldrd	r2, r3, [r4, #264]	; 0x108
 8012530:	e9cd 0100 	strd	r0, r1, [sp]
 8012534:	4640      	mov	r0, r8
 8012536:	4649      	mov	r1, r9
 8012538:	f7f9 ffc2 	bl	800c4c0 <__aeabi_dmul>
 801253c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012540:	f7f9 fe04 	bl	800c14c <__adddf3>
 8012544:	4642      	mov	r2, r8
 8012546:	464b      	mov	r3, r9
 8012548:	f7f9 ffba 	bl	800c4c0 <__aeabi_dmul>
 801254c:	4680      	mov	r8, r0
 801254e:	15e8      	asrs	r0, r5, #23
 8012550:	4689      	mov	r9, r1
 8012552:	f7f9 ff47 	bl	800c3e4 <__aeabi_i2d>
 8012556:	e9d4 2340 	ldrd	r2, r3, [r4, #256]	; 0x100
 801255a:	f7f9 ffb1 	bl	800c4c0 <__aeabi_dmul>
 801255e:	e9da 2302 	ldrd	r2, r3, [sl, #8]
 8012562:	f7f9 fdf3 	bl	800c14c <__adddf3>
 8012566:	4632      	mov	r2, r6
 8012568:	463b      	mov	r3, r7
 801256a:	f7f9 fdef 	bl	800c14c <__adddf3>
 801256e:	4642      	mov	r2, r8
 8012570:	464b      	mov	r3, r9
 8012572:	f7f9 fdeb 	bl	800c14c <__adddf3>
 8012576:	f7fa fa6b 	bl	800ca50 <__aeabi_d2f>
 801257a:	ee00 0a10 	vmov	s0, r0
 801257e:	b002      	add	sp, #8
 8012580:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012584:	ed9f 0a16 	vldr	s0, [pc, #88]	; 80125e0 <logf+0x120>
 8012588:	b002      	add	sp, #8
 801258a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801258e:	005a      	lsls	r2, r3, #1
 8012590:	d015      	beq.n	80125be <logf+0xfe>
 8012592:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8012596:	d00f      	beq.n	80125b8 <logf+0xf8>
 8012598:	2b00      	cmp	r3, #0
 801259a:	db16      	blt.n	80125ca <logf+0x10a>
 801259c:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 80125a0:	d213      	bcs.n	80125ca <logf+0x10a>
 80125a2:	eddf 7a10 	vldr	s15, [pc, #64]	; 80125e4 <logf+0x124>
 80125a6:	ed9d 7a00 	vldr	s14, [sp]
 80125aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80125ae:	ee17 3a90 	vmov	r3, s15
 80125b2:	f1a3 6338 	sub.w	r3, r3, #192937984	; 0xb800000
 80125b6:	e791      	b.n	80124dc <logf+0x1c>
 80125b8:	ed9d 0a00 	vldr	s0, [sp]
 80125bc:	e7df      	b.n	801257e <logf+0xbe>
 80125be:	2001      	movs	r0, #1
 80125c0:	b002      	add	sp, #8
 80125c2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80125c6:	f001 b943 	b.w	8013850 <__math_divzerof>
 80125ca:	ed9d 0a00 	vldr	s0, [sp]
 80125ce:	b002      	add	sp, #8
 80125d0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80125d4:	f001 b954 	b.w	8013880 <__math_invalidf>
 80125d8:	08013eb0 	.word	0x08013eb0
 80125dc:	3ff00000 	.word	0x3ff00000
 80125e0:	00000000 	.word	0x00000000
 80125e4:	4b000000 	.word	0x4b000000
	...

080125f0 <powf>:
 80125f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80125f4:	b087      	sub	sp, #28
 80125f6:	ed8d 0a00 	vstr	s0, [sp]
 80125fa:	9800      	ldr	r0, [sp, #0]
 80125fc:	ee10 5a90 	vmov	r5, s1
 8012600:	f5a0 0100 	sub.w	r1, r0, #8388608	; 0x800000
 8012604:	006b      	lsls	r3, r5, #1
 8012606:	f1b1 4ffe 	cmp.w	r1, #2130706432	; 0x7f000000
 801260a:	ee10 ba90 	vmov	fp, s1
 801260e:	f103 32ff 	add.w	r2, r3, #4294967295
 8012612:	49c9      	ldr	r1, [pc, #804]	; (8012938 <powf+0x348>)
 8012614:	f080 80dc 	bcs.w	80127d0 <powf+0x1e0>
 8012618:	428a      	cmp	r2, r1
 801261a:	f200 813e 	bhi.w	801289a <powf+0x2aa>
 801261e:	2300      	movs	r3, #0
 8012620:	9303      	str	r3, [sp, #12]
 8012622:	f100 4640 	add.w	r6, r0, #3221225472	; 0xc0000000
 8012626:	f506 064d 	add.w	r6, r6, #13434880	; 0xcd0000
 801262a:	4cc4      	ldr	r4, [pc, #784]	; (801293c <powf+0x34c>)
 801262c:	0df7      	lsrs	r7, r6, #23
 801262e:	05ff      	lsls	r7, r7, #23
 8012630:	f3c6 46c3 	ubfx	r6, r6, #19, #4
 8012634:	eb04 1606 	add.w	r6, r4, r6, lsl #4
 8012638:	1bc0      	subs	r0, r0, r7
 801263a:	f7f9 fee5 	bl	800c408 <__aeabi_f2d>
 801263e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8012642:	f7f9 ff3d 	bl	800c4c0 <__aeabi_dmul>
 8012646:	2200      	movs	r2, #0
 8012648:	4bbd      	ldr	r3, [pc, #756]	; (8012940 <powf+0x350>)
 801264a:	f7f9 fd7d 	bl	800c148 <__aeabi_dsub>
 801264e:	4602      	mov	r2, r0
 8012650:	460b      	mov	r3, r1
 8012652:	4680      	mov	r8, r0
 8012654:	4689      	mov	r9, r1
 8012656:	f7f9 ff33 	bl	800c4c0 <__aeabi_dmul>
 801265a:	4682      	mov	sl, r0
 801265c:	15f8      	asrs	r0, r7, #23
 801265e:	468b      	mov	fp, r1
 8012660:	f7f9 fec0 	bl	800c3e4 <__aeabi_i2d>
 8012664:	e9d6 2302 	ldrd	r2, r3, [r6, #8]
 8012668:	f7f9 fd70 	bl	800c14c <__adddf3>
 801266c:	e9d4 2348 	ldrd	r2, r3, [r4, #288]	; 0x120
 8012670:	4606      	mov	r6, r0
 8012672:	460f      	mov	r7, r1
 8012674:	4640      	mov	r0, r8
 8012676:	4649      	mov	r1, r9
 8012678:	f7f9 ff22 	bl	800c4c0 <__aeabi_dmul>
 801267c:	4602      	mov	r2, r0
 801267e:	460b      	mov	r3, r1
 8012680:	4630      	mov	r0, r6
 8012682:	4639      	mov	r1, r7
 8012684:	f7f9 fd62 	bl	800c14c <__adddf3>
 8012688:	e9d4 2340 	ldrd	r2, r3, [r4, #256]	; 0x100
 801268c:	e9cd 0100 	strd	r0, r1, [sp]
 8012690:	4640      	mov	r0, r8
 8012692:	4649      	mov	r1, r9
 8012694:	f7f9 ff14 	bl	800c4c0 <__aeabi_dmul>
 8012698:	e9d4 2342 	ldrd	r2, r3, [r4, #264]	; 0x108
 801269c:	f7f9 fd56 	bl	800c14c <__adddf3>
 80126a0:	4652      	mov	r2, sl
 80126a2:	4606      	mov	r6, r0
 80126a4:	460f      	mov	r7, r1
 80126a6:	465b      	mov	r3, fp
 80126a8:	4650      	mov	r0, sl
 80126aa:	4659      	mov	r1, fp
 80126ac:	f7f9 ff08 	bl	800c4c0 <__aeabi_dmul>
 80126b0:	4602      	mov	r2, r0
 80126b2:	460b      	mov	r3, r1
 80126b4:	4630      	mov	r0, r6
 80126b6:	4639      	mov	r1, r7
 80126b8:	f7f9 ff02 	bl	800c4c0 <__aeabi_dmul>
 80126bc:	e9d4 2344 	ldrd	r2, r3, [r4, #272]	; 0x110
 80126c0:	4606      	mov	r6, r0
 80126c2:	460f      	mov	r7, r1
 80126c4:	4640      	mov	r0, r8
 80126c6:	4649      	mov	r1, r9
 80126c8:	f7f9 fefa 	bl	800c4c0 <__aeabi_dmul>
 80126cc:	e9d4 2346 	ldrd	r2, r3, [r4, #280]	; 0x118
 80126d0:	f7f9 fd3c 	bl	800c14c <__adddf3>
 80126d4:	4652      	mov	r2, sl
 80126d6:	465b      	mov	r3, fp
 80126d8:	f7f9 fef2 	bl	800c4c0 <__aeabi_dmul>
 80126dc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80126e0:	f7f9 fd34 	bl	800c14c <__adddf3>
 80126e4:	4632      	mov	r2, r6
 80126e6:	463b      	mov	r3, r7
 80126e8:	f7f9 fd30 	bl	800c14c <__adddf3>
 80126ec:	4606      	mov	r6, r0
 80126ee:	4628      	mov	r0, r5
 80126f0:	460f      	mov	r7, r1
 80126f2:	f7f9 fe89 	bl	800c408 <__aeabi_f2d>
 80126f6:	4602      	mov	r2, r0
 80126f8:	460b      	mov	r3, r1
 80126fa:	4630      	mov	r0, r6
 80126fc:	4639      	mov	r1, r7
 80126fe:	f7f9 fedf 	bl	800c4c0 <__aeabi_dmul>
 8012702:	2500      	movs	r5, #0
 8012704:	0bca      	lsrs	r2, r1, #15
 8012706:	2300      	movs	r3, #0
 8012708:	b292      	uxth	r2, r2
 801270a:	f248 04be 	movw	r4, #32958	; 0x80be
 801270e:	429d      	cmp	r5, r3
 8012710:	bf08      	it	eq
 8012712:	4294      	cmpeq	r4, r2
 8012714:	4606      	mov	r6, r0
 8012716:	460f      	mov	r7, r1
 8012718:	d375      	bcc.n	8012806 <powf+0x216>
 801271a:	f8df a234 	ldr.w	sl, [pc, #564]	; 8012950 <powf+0x360>
 801271e:	e9da 8940 	ldrd	r8, r9, [sl, #256]	; 0x100
 8012722:	4630      	mov	r0, r6
 8012724:	4642      	mov	r2, r8
 8012726:	464b      	mov	r3, r9
 8012728:	4639      	mov	r1, r7
 801272a:	f7f9 fd0f 	bl	800c14c <__adddf3>
 801272e:	4642      	mov	r2, r8
 8012730:	464b      	mov	r3, r9
 8012732:	4604      	mov	r4, r0
 8012734:	f7f9 fd08 	bl	800c148 <__aeabi_dsub>
 8012738:	4602      	mov	r2, r0
 801273a:	460b      	mov	r3, r1
 801273c:	4630      	mov	r0, r6
 801273e:	4639      	mov	r1, r7
 8012740:	f7f9 fd02 	bl	800c148 <__aeabi_dsub>
 8012744:	f004 021f 	and.w	r2, r4, #31
 8012748:	eb0a 0cc2 	add.w	ip, sl, r2, lsl #3
 801274c:	e9dc 8900 	ldrd	r8, r9, [ip]
 8012750:	e9da 2346 	ldrd	r2, r3, [sl, #280]	; 0x118
 8012754:	4606      	mov	r6, r0
 8012756:	460f      	mov	r7, r1
 8012758:	e9cd 8900 	strd	r8, r9, [sp]
 801275c:	f7f9 feb0 	bl	800c4c0 <__aeabi_dmul>
 8012760:	2200      	movs	r2, #0
 8012762:	4b77      	ldr	r3, [pc, #476]	; (8012940 <powf+0x350>)
 8012764:	f7f9 fcf2 	bl	800c14c <__adddf3>
 8012768:	e9da 2342 	ldrd	r2, r3, [sl, #264]	; 0x108
 801276c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012770:	4630      	mov	r0, r6
 8012772:	4639      	mov	r1, r7
 8012774:	f7f9 fea4 	bl	800c4c0 <__aeabi_dmul>
 8012778:	e9da 2344 	ldrd	r2, r3, [sl, #272]	; 0x110
 801277c:	f7f9 fce6 	bl	800c14c <__adddf3>
 8012780:	4632      	mov	r2, r6
 8012782:	4680      	mov	r8, r0
 8012784:	4689      	mov	r9, r1
 8012786:	463b      	mov	r3, r7
 8012788:	4630      	mov	r0, r6
 801278a:	4639      	mov	r1, r7
 801278c:	f7f9 fe98 	bl	800c4c0 <__aeabi_dmul>
 8012790:	4602      	mov	r2, r0
 8012792:	460b      	mov	r3, r1
 8012794:	4640      	mov	r0, r8
 8012796:	4649      	mov	r1, r9
 8012798:	f7f9 fe92 	bl	800c4c0 <__aeabi_dmul>
 801279c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80127a0:	f7f9 fcd4 	bl	800c14c <__adddf3>
 80127a4:	9b03      	ldr	r3, [sp, #12]
 80127a6:	e9dd 8900 	ldrd	r8, r9, [sp]
 80127aa:	18e4      	adds	r4, r4, r3
 80127ac:	2200      	movs	r2, #0
 80127ae:	eb18 0802 	adds.w	r8, r8, r2
 80127b2:	ea4f 33c4 	mov.w	r3, r4, lsl #15
 80127b6:	eb49 0903 	adc.w	r9, r9, r3
 80127ba:	4642      	mov	r2, r8
 80127bc:	464b      	mov	r3, r9
 80127be:	f7f9 fe7f 	bl	800c4c0 <__aeabi_dmul>
 80127c2:	f7fa f945 	bl	800ca50 <__aeabi_d2f>
 80127c6:	ee00 0a10 	vmov	s0, r0
 80127ca:	b007      	add	sp, #28
 80127cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80127d0:	428a      	cmp	r2, r1
 80127d2:	d862      	bhi.n	801289a <powf+0x2aa>
 80127d4:	0043      	lsls	r3, r0, #1
 80127d6:	1e5a      	subs	r2, r3, #1
 80127d8:	428a      	cmp	r2, r1
 80127da:	d868      	bhi.n	80128ae <powf+0x2be>
 80127dc:	2800      	cmp	r0, #0
 80127de:	db30      	blt.n	8012842 <powf+0x252>
 80127e0:	2300      	movs	r3, #0
 80127e2:	9303      	str	r3, [sp, #12]
 80127e4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80127e8:	f4bf af1b 	bcs.w	8012622 <powf+0x32>
 80127ec:	eddf 7a55 	vldr	s15, [pc, #340]	; 8012944 <powf+0x354>
 80127f0:	ed9d 7a00 	vldr	s14, [sp]
 80127f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80127f8:	ee17 0a90 	vmov	r0, s15
 80127fc:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8012800:	f1a0 6038 	sub.w	r0, r0, #192937984	; 0xb800000
 8012804:	e70d      	b.n	8012622 <powf+0x32>
 8012806:	a348      	add	r3, pc, #288	; (adr r3, 8012928 <powf+0x338>)
 8012808:	e9d3 2300 	ldrd	r2, r3, [r3]
 801280c:	f7fa f8ee 	bl	800c9ec <__aeabi_dcmpgt>
 8012810:	2800      	cmp	r0, #0
 8012812:	d139      	bne.n	8012888 <powf+0x298>
 8012814:	2200      	movs	r2, #0
 8012816:	4b4c      	ldr	r3, [pc, #304]	; (8012948 <powf+0x358>)
 8012818:	4630      	mov	r0, r6
 801281a:	4639      	mov	r1, r7
 801281c:	f7fa f8d2 	bl	800c9c4 <__aeabi_dcmple>
 8012820:	bb28      	cbnz	r0, 801286e <powf+0x27e>
 8012822:	a343      	add	r3, pc, #268	; (adr r3, 8012930 <powf+0x340>)
 8012824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012828:	4630      	mov	r0, r6
 801282a:	4639      	mov	r1, r7
 801282c:	f7fa f8c0 	bl	800c9b0 <__aeabi_dcmplt>
 8012830:	2800      	cmp	r0, #0
 8012832:	f43f af72 	beq.w	801271a <powf+0x12a>
 8012836:	9803      	ldr	r0, [sp, #12]
 8012838:	b007      	add	sp, #28
 801283a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801283e:	f000 bff7 	b.w	8013830 <__math_may_uflowf>
 8012842:	f3c5 53c7 	ubfx	r3, r5, #23, #8
 8012846:	2b7e      	cmp	r3, #126	; 0x7e
 8012848:	dd17      	ble.n	801287a <powf+0x28a>
 801284a:	2b96      	cmp	r3, #150	; 0x96
 801284c:	dc22      	bgt.n	8012894 <powf+0x2a4>
 801284e:	2201      	movs	r2, #1
 8012850:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8012854:	fa02 f303 	lsl.w	r3, r2, r3
 8012858:	1e5a      	subs	r2, r3, #1
 801285a:	422a      	tst	r2, r5
 801285c:	d10d      	bne.n	801287a <powf+0x28a>
 801285e:	402b      	ands	r3, r5
 8012860:	bf18      	it	ne
 8012862:	f44f 3380 	movne.w	r3, #65536	; 0x10000
 8012866:	9303      	str	r3, [sp, #12]
 8012868:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801286c:	e7ba      	b.n	80127e4 <powf+0x1f4>
 801286e:	9803      	ldr	r0, [sp, #12]
 8012870:	b007      	add	sp, #28
 8012872:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012876:	f000 bfd3 	b.w	8013820 <__math_uflowf>
 801287a:	ed9d 0a00 	vldr	s0, [sp]
 801287e:	b007      	add	sp, #28
 8012880:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012884:	f000 bffc 	b.w	8013880 <__math_invalidf>
 8012888:	9803      	ldr	r0, [sp, #12]
 801288a:	b007      	add	sp, #28
 801288c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012890:	f000 bfd6 	b.w	8013840 <__math_oflowf>
 8012894:	2300      	movs	r3, #0
 8012896:	9303      	str	r3, [sp, #12]
 8012898:	e7e6      	b.n	8012868 <powf+0x278>
 801289a:	bb3b      	cbnz	r3, 80128ec <powf+0x2fc>
 801289c:	f480 0380 	eor.w	r3, r0, #4194304	; 0x400000
 80128a0:	005b      	lsls	r3, r3, #1
 80128a2:	f513 0f00 	cmn.w	r3, #8388608	; 0x800000
 80128a6:	d81a      	bhi.n	80128de <powf+0x2ee>
 80128a8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80128ac:	e78d      	b.n	80127ca <powf+0x1da>
 80128ae:	eddd 7a00 	vldr	s15, [sp]
 80128b2:	2800      	cmp	r0, #0
 80128b4:	ee27 0aa7 	vmul.f32	s0, s15, s15
 80128b8:	db55      	blt.n	8012966 <powf+0x376>
 80128ba:	2000      	movs	r0, #0
 80128bc:	2b00      	cmp	r3, #0
 80128be:	d149      	bne.n	8012954 <powf+0x364>
 80128c0:	f1bb 0f00 	cmp.w	fp, #0
 80128c4:	da81      	bge.n	80127ca <powf+0x1da>
 80128c6:	b007      	add	sp, #28
 80128c8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80128cc:	f000 bfc0 	b.w	8013850 <__math_divzerof>
 80128d0:	f48b 0b80 	eor.w	fp, fp, #4194304	; 0x400000
 80128d4:	ea4f 034b 	mov.w	r3, fp, lsl #1
 80128d8:	f513 0f00 	cmn.w	r3, #8388608	; 0x800000
 80128dc:	d9e4      	bls.n	80128a8 <powf+0x2b8>
 80128de:	eddd 7a00 	vldr	s15, [sp]
 80128e2:	ee07 5a10 	vmov	s14, r5
 80128e6:	ee37 0a87 	vadd.f32	s0, s15, s14
 80128ea:	e76e      	b.n	80127ca <powf+0x1da>
 80128ec:	f1b0 5f7e 	cmp.w	r0, #1065353216	; 0x3f800000
 80128f0:	d0ee      	beq.n	80128d0 <powf+0x2e0>
 80128f2:	0040      	lsls	r0, r0, #1
 80128f4:	f1b0 4f7f 	cmp.w	r0, #4278190080	; 0xff000000
 80128f8:	d8f1      	bhi.n	80128de <powf+0x2ee>
 80128fa:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 80128fe:	d1ee      	bne.n	80128de <powf+0x2ee>
 8012900:	f1b0 4ffe 	cmp.w	r0, #2130706432	; 0x7f000000
 8012904:	d0d0      	beq.n	80128a8 <powf+0x2b8>
 8012906:	f1b0 4ffe 	cmp.w	r0, #2130706432	; 0x7f000000
 801290a:	ea6f 0b0b 	mvn.w	fp, fp
 801290e:	bf34      	ite	cc
 8012910:	2000      	movcc	r0, #0
 8012912:	2001      	movcs	r0, #1
 8012914:	ea4f 7bdb 	mov.w	fp, fp, lsr #31
 8012918:	4558      	cmp	r0, fp
 801291a:	d038      	beq.n	801298e <powf+0x39e>
 801291c:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 801294c <powf+0x35c>
 8012920:	e753      	b.n	80127ca <powf+0x1da>
 8012922:	bf00      	nop
 8012924:	f3af 8000 	nop.w
 8012928:	ffd1d571 	.word	0xffd1d571
 801292c:	405fffff 	.word	0x405fffff
 8012930:	00000000 	.word	0x00000000
 8012934:	c062a000 	.word	0xc062a000
 8012938:	fefffffe 	.word	0xfefffffe
 801293c:	08013fd0 	.word	0x08013fd0
 8012940:	3ff00000 	.word	0x3ff00000
 8012944:	4b000000 	.word	0x4b000000
 8012948:	c062c000 	.word	0xc062c000
 801294c:	00000000 	.word	0x00000000
 8012950:	08014510 	.word	0x08014510
 8012954:	f1bb 0f00 	cmp.w	fp, #0
 8012958:	f6bf af37 	bge.w	80127ca <powf+0x1da>
 801295c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8012960:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8012964:	e731      	b.n	80127ca <powf+0x1da>
 8012966:	f3c5 52c7 	ubfx	r2, r5, #23, #8
 801296a:	f1a2 017f 	sub.w	r1, r2, #127	; 0x7f
 801296e:	2917      	cmp	r1, #23
 8012970:	d8a3      	bhi.n	80128ba <powf+0x2ca>
 8012972:	f1c2 0096 	rsb	r0, r2, #150	; 0x96
 8012976:	2201      	movs	r2, #1
 8012978:	fa02 f000 	lsl.w	r0, r2, r0
 801297c:	1e41      	subs	r1, r0, #1
 801297e:	4229      	tst	r1, r5
 8012980:	d19b      	bne.n	80128ba <powf+0x2ca>
 8012982:	4028      	ands	r0, r5
 8012984:	d09a      	beq.n	80128bc <powf+0x2cc>
 8012986:	eeb1 0a40 	vneg.f32	s0, s0
 801298a:	4610      	mov	r0, r2
 801298c:	e796      	b.n	80128bc <powf+0x2cc>
 801298e:	ee07 5a90 	vmov	s15, r5
 8012992:	ee27 0aa7 	vmul.f32	s0, s15, s15
 8012996:	e718      	b.n	80127ca <powf+0x1da>
	...

080129a0 <roundf>:
 80129a0:	b082      	sub	sp, #8
 80129a2:	ed8d 0a01 	vstr	s0, [sp, #4]
 80129a6:	9901      	ldr	r1, [sp, #4]
 80129a8:	f3c1 53c7 	ubfx	r3, r1, #23, #8
 80129ac:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 80129b0:	2a16      	cmp	r2, #22
 80129b2:	dc0c      	bgt.n	80129ce <roundf+0x2e>
 80129b4:	2a00      	cmp	r2, #0
 80129b6:	db10      	blt.n	80129da <roundf+0x3a>
 80129b8:	4810      	ldr	r0, [pc, #64]	; (80129fc <roundf+0x5c>)
 80129ba:	4110      	asrs	r0, r2
 80129bc:	4201      	tst	r1, r0
 80129be:	d008      	beq.n	80129d2 <roundf+0x32>
 80129c0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80129c4:	4113      	asrs	r3, r2
 80129c6:	440b      	add	r3, r1
 80129c8:	ea23 0300 	bic.w	r3, r3, r0
 80129cc:	e00b      	b.n	80129e6 <roundf+0x46>
 80129ce:	2a80      	cmp	r2, #128	; 0x80
 80129d0:	d00d      	beq.n	80129ee <roundf+0x4e>
 80129d2:	ed9d 0a01 	vldr	s0, [sp, #4]
 80129d6:	b002      	add	sp, #8
 80129d8:	4770      	bx	lr
 80129da:	3201      	adds	r2, #1
 80129dc:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 80129e0:	d101      	bne.n	80129e6 <roundf+0x46>
 80129e2:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 80129e6:	ee00 3a10 	vmov	s0, r3
 80129ea:	b002      	add	sp, #8
 80129ec:	4770      	bx	lr
 80129ee:	eddd 7a01 	vldr	s15, [sp, #4]
 80129f2:	ee37 0aa7 	vadd.f32	s0, s15, s15
 80129f6:	b002      	add	sp, #8
 80129f8:	4770      	bx	lr
 80129fa:	bf00      	nop
 80129fc:	007fffff 	.word	0x007fffff

08012a00 <sinf>:
 8012a00:	b500      	push	{lr}
 8012a02:	ee10 3a10 	vmov	r3, s0
 8012a06:	4a21      	ldr	r2, [pc, #132]	; (8012a8c <sinf+0x8c>)
 8012a08:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012a0c:	4293      	cmp	r3, r2
 8012a0e:	b083      	sub	sp, #12
 8012a10:	dd1a      	ble.n	8012a48 <sinf+0x48>
 8012a12:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8012a16:	db04      	blt.n	8012a22 <sinf+0x22>
 8012a18:	ee30 0a40 	vsub.f32	s0, s0, s0
 8012a1c:	b003      	add	sp, #12
 8012a1e:	f85d fb04 	ldr.w	pc, [sp], #4
 8012a22:	4668      	mov	r0, sp
 8012a24:	f000 f98c 	bl	8012d40 <__ieee754_rem_pio2f>
 8012a28:	f000 0003 	and.w	r0, r0, #3
 8012a2c:	2801      	cmp	r0, #1
 8012a2e:	d013      	beq.n	8012a58 <sinf+0x58>
 8012a30:	2802      	cmp	r0, #2
 8012a32:	d020      	beq.n	8012a76 <sinf+0x76>
 8012a34:	b1b8      	cbz	r0, 8012a66 <sinf+0x66>
 8012a36:	eddd 0a01 	vldr	s1, [sp, #4]
 8012a3a:	ed9d 0a00 	vldr	s0, [sp]
 8012a3e:	f000 fad7 	bl	8012ff0 <__kernel_cosf>
 8012a42:	eeb1 0a40 	vneg.f32	s0, s0
 8012a46:	e7e9      	b.n	8012a1c <sinf+0x1c>
 8012a48:	2000      	movs	r0, #0
 8012a4a:	eddf 0a11 	vldr	s1, [pc, #68]	; 8012a90 <sinf+0x90>
 8012a4e:	f000 fe7f 	bl	8013750 <__kernel_sinf>
 8012a52:	b003      	add	sp, #12
 8012a54:	f85d fb04 	ldr.w	pc, [sp], #4
 8012a58:	eddd 0a01 	vldr	s1, [sp, #4]
 8012a5c:	ed9d 0a00 	vldr	s0, [sp]
 8012a60:	f000 fac6 	bl	8012ff0 <__kernel_cosf>
 8012a64:	e7da      	b.n	8012a1c <sinf+0x1c>
 8012a66:	2001      	movs	r0, #1
 8012a68:	eddd 0a01 	vldr	s1, [sp, #4]
 8012a6c:	ed9d 0a00 	vldr	s0, [sp]
 8012a70:	f000 fe6e 	bl	8013750 <__kernel_sinf>
 8012a74:	e7d2      	b.n	8012a1c <sinf+0x1c>
 8012a76:	2001      	movs	r0, #1
 8012a78:	eddd 0a01 	vldr	s1, [sp, #4]
 8012a7c:	ed9d 0a00 	vldr	s0, [sp]
 8012a80:	f000 fe66 	bl	8013750 <__kernel_sinf>
 8012a84:	eeb1 0a40 	vneg.f32	s0, s0
 8012a88:	e7c8      	b.n	8012a1c <sinf+0x1c>
 8012a8a:	bf00      	nop
 8012a8c:	3f490fd8 	.word	0x3f490fd8
	...

08012aa0 <fmodf>:
 8012aa0:	b5d0      	push	{r4, r6, r7, lr}
 8012aa2:	ed2d 8b02 	vpush	{d8}
 8012aa6:	b08a      	sub	sp, #40	; 0x28
 8012aa8:	eef0 8a40 	vmov.f32	s17, s0
 8012aac:	eeb0 8a60 	vmov.f32	s16, s1
 8012ab0:	f000 f8ae 	bl	8012c10 <__ieee754_fmodf>
 8012ab4:	4b28      	ldr	r3, [pc, #160]	; (8012b58 <fmodf+0xb8>)
 8012ab6:	f993 4000 	ldrsb.w	r4, [r3]
 8012aba:	1c63      	adds	r3, r4, #1
 8012abc:	d039      	beq.n	8012b32 <fmodf+0x92>
 8012abe:	eeb4 8a48 	vcmp.f32	s16, s16
 8012ac2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ac6:	d634      	bvs.n	8012b32 <fmodf+0x92>
 8012ac8:	eef4 8a68 	vcmp.f32	s17, s17
 8012acc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ad0:	d62f      	bvs.n	8012b32 <fmodf+0x92>
 8012ad2:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8012ad6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ada:	d12a      	bne.n	8012b32 <fmodf+0x92>
 8012adc:	2301      	movs	r3, #1
 8012ade:	4a1f      	ldr	r2, [pc, #124]	; (8012b5c <fmodf+0xbc>)
 8012ae0:	9300      	str	r3, [sp, #0]
 8012ae2:	ee18 0a90 	vmov	r0, s17
 8012ae6:	2300      	movs	r3, #0
 8012ae8:	9201      	str	r2, [sp, #4]
 8012aea:	9308      	str	r3, [sp, #32]
 8012aec:	f7f9 fc8c 	bl	800c408 <__aeabi_f2d>
 8012af0:	4606      	mov	r6, r0
 8012af2:	460f      	mov	r7, r1
 8012af4:	ee18 0a10 	vmov	r0, s16
 8012af8:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8012afc:	f7f9 fc84 	bl	800c408 <__aeabi_f2d>
 8012b00:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012b04:	b1cc      	cbz	r4, 8012b3a <fmodf+0x9a>
 8012b06:	2200      	movs	r2, #0
 8012b08:	2300      	movs	r3, #0
 8012b0a:	4610      	mov	r0, r2
 8012b0c:	4619      	mov	r1, r3
 8012b0e:	f7f9 fe01 	bl	800c714 <__aeabi_ddiv>
 8012b12:	2c02      	cmp	r4, #2
 8012b14:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8012b18:	d111      	bne.n	8012b3e <fmodf+0x9e>
 8012b1a:	f000 ff91 	bl	8013a40 <__errno>
 8012b1e:	2321      	movs	r3, #33	; 0x21
 8012b20:	6003      	str	r3, [r0, #0]
 8012b22:	9b08      	ldr	r3, [sp, #32]
 8012b24:	b99b      	cbnz	r3, 8012b4e <fmodf+0xae>
 8012b26:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012b2a:	f7f9 ff91 	bl	800ca50 <__aeabi_d2f>
 8012b2e:	ee00 0a10 	vmov	s0, r0
 8012b32:	b00a      	add	sp, #40	; 0x28
 8012b34:	ecbd 8b02 	vpop	{d8}
 8012b38:	bdd0      	pop	{r4, r6, r7, pc}
 8012b3a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8012b3e:	4668      	mov	r0, sp
 8012b40:	f000 feae 	bl	80138a0 <matherr>
 8012b44:	2800      	cmp	r0, #0
 8012b46:	d0e8      	beq.n	8012b1a <fmodf+0x7a>
 8012b48:	9b08      	ldr	r3, [sp, #32]
 8012b4a:	2b00      	cmp	r3, #0
 8012b4c:	d0eb      	beq.n	8012b26 <fmodf+0x86>
 8012b4e:	f000 ff77 	bl	8013a40 <__errno>
 8012b52:	9b08      	ldr	r3, [sp, #32]
 8012b54:	6003      	str	r3, [r0, #0]
 8012b56:	e7e6      	b.n	8012b26 <fmodf+0x86>
 8012b58:	20000810 	.word	0x20000810
 8012b5c:	08014100 	.word	0x08014100

08012b60 <sqrtf>:
 8012b60:	b510      	push	{r4, lr}
 8012b62:	ed2d 8b02 	vpush	{d8}
 8012b66:	b08a      	sub	sp, #40	; 0x28
 8012b68:	eeb0 8a40 	vmov.f32	s16, s0
 8012b6c:	f000 fa38 	bl	8012fe0 <__ieee754_sqrtf>
 8012b70:	4b24      	ldr	r3, [pc, #144]	; (8012c04 <sqrtf+0xa4>)
 8012b72:	f993 4000 	ldrsb.w	r4, [r3]
 8012b76:	1c63      	adds	r3, r4, #1
 8012b78:	d009      	beq.n	8012b8e <sqrtf+0x2e>
 8012b7a:	eeb4 8a48 	vcmp.f32	s16, s16
 8012b7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b82:	d604      	bvs.n	8012b8e <sqrtf+0x2e>
 8012b84:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8012b88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b8c:	d403      	bmi.n	8012b96 <sqrtf+0x36>
 8012b8e:	b00a      	add	sp, #40	; 0x28
 8012b90:	ecbd 8b02 	vpop	{d8}
 8012b94:	bd10      	pop	{r4, pc}
 8012b96:	2301      	movs	r3, #1
 8012b98:	4a1b      	ldr	r2, [pc, #108]	; (8012c08 <sqrtf+0xa8>)
 8012b9a:	9300      	str	r3, [sp, #0]
 8012b9c:	ee18 0a10 	vmov	r0, s16
 8012ba0:	2300      	movs	r3, #0
 8012ba2:	9201      	str	r2, [sp, #4]
 8012ba4:	9308      	str	r3, [sp, #32]
 8012ba6:	f7f9 fc2f 	bl	800c408 <__aeabi_f2d>
 8012baa:	2200      	movs	r2, #0
 8012bac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012bb0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012bb4:	2300      	movs	r3, #0
 8012bb6:	b1bc      	cbz	r4, 8012be8 <sqrtf+0x88>
 8012bb8:	4610      	mov	r0, r2
 8012bba:	4619      	mov	r1, r3
 8012bbc:	f7f9 fdaa 	bl	800c714 <__aeabi_ddiv>
 8012bc0:	2c02      	cmp	r4, #2
 8012bc2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8012bc6:	d111      	bne.n	8012bec <sqrtf+0x8c>
 8012bc8:	f000 ff3a 	bl	8013a40 <__errno>
 8012bcc:	2321      	movs	r3, #33	; 0x21
 8012bce:	6003      	str	r3, [r0, #0]
 8012bd0:	9b08      	ldr	r3, [sp, #32]
 8012bd2:	b98b      	cbnz	r3, 8012bf8 <sqrtf+0x98>
 8012bd4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012bd8:	f7f9 ff3a 	bl	800ca50 <__aeabi_d2f>
 8012bdc:	ee00 0a10 	vmov	s0, r0
 8012be0:	b00a      	add	sp, #40	; 0x28
 8012be2:	ecbd 8b02 	vpop	{d8}
 8012be6:	bd10      	pop	{r4, pc}
 8012be8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8012bec:	4668      	mov	r0, sp
 8012bee:	f000 fe57 	bl	80138a0 <matherr>
 8012bf2:	2800      	cmp	r0, #0
 8012bf4:	d1ec      	bne.n	8012bd0 <sqrtf+0x70>
 8012bf6:	e7e7      	b.n	8012bc8 <sqrtf+0x68>
 8012bf8:	f000 ff22 	bl	8013a40 <__errno>
 8012bfc:	9b08      	ldr	r3, [sp, #32]
 8012bfe:	6003      	str	r3, [r0, #0]
 8012c00:	e7e8      	b.n	8012bd4 <sqrtf+0x74>
 8012c02:	bf00      	nop
 8012c04:	20000810 	.word	0x20000810
 8012c08:	08014110 	.word	0x08014110
 8012c0c:	00000000 	.word	0x00000000

08012c10 <__ieee754_fmodf>:
 8012c10:	ee10 3a90 	vmov	r3, s1
 8012c14:	f033 4100 	bics.w	r1, r3, #2147483648	; 0x80000000
 8012c18:	d03d      	beq.n	8012c96 <__ieee754_fmodf+0x86>
 8012c1a:	b4f0      	push	{r4, r5, r6, r7}
 8012c1c:	ee10 4a10 	vmov	r4, s0
 8012c20:	f024 4200 	bic.w	r2, r4, #2147483648	; 0x80000000
 8012c24:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8012c28:	da2f      	bge.n	8012c8a <__ieee754_fmodf+0x7a>
 8012c2a:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8012c2e:	dc2c      	bgt.n	8012c8a <__ieee754_fmodf+0x7a>
 8012c30:	428a      	cmp	r2, r1
 8012c32:	db2e      	blt.n	8012c92 <__ieee754_fmodf+0x82>
 8012c34:	f004 4600 	and.w	r6, r4, #2147483648	; 0x80000000
 8012c38:	d032      	beq.n	8012ca0 <__ieee754_fmodf+0x90>
 8012c3a:	483e      	ldr	r0, [pc, #248]	; (8012d34 <__ieee754_fmodf+0x124>)
 8012c3c:	4282      	cmp	r2, r0
 8012c3e:	dd36      	ble.n	8012cae <__ieee754_fmodf+0x9e>
 8012c40:	15d0      	asrs	r0, r2, #23
 8012c42:	387f      	subs	r0, #127	; 0x7f
 8012c44:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8012c48:	da5e      	bge.n	8012d08 <__ieee754_fmodf+0xf8>
 8012c4a:	020f      	lsls	r7, r1, #8
 8012c4c:	f06f 057d 	mvn.w	r5, #125	; 0x7d
 8012c50:	007f      	lsls	r7, r7, #1
 8012c52:	f105 35ff 	add.w	r5, r5, #4294967295
 8012c56:	d5fb      	bpl.n	8012c50 <__ieee754_fmodf+0x40>
 8012c58:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 8012c5c:	db4f      	blt.n	8012cfe <__ieee754_fmodf+0xee>
 8012c5e:	f3c4 0216 	ubfx	r2, r4, #0, #23
 8012c62:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8012c66:	f115 0f7e 	cmn.w	r5, #126	; 0x7e
 8012c6a:	db43      	blt.n	8012cf4 <__ieee754_fmodf+0xe4>
 8012c6c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8012c70:	f443 0100 	orr.w	r1, r3, #8388608	; 0x800000
 8012c74:	1b40      	subs	r0, r0, r5
 8012c76:	e002      	b.n	8012c7e <__ieee754_fmodf+0x6e>
 8012c78:	d012      	beq.n	8012ca0 <__ieee754_fmodf+0x90>
 8012c7a:	005a      	lsls	r2, r3, #1
 8012c7c:	3801      	subs	r0, #1
 8012c7e:	1a53      	subs	r3, r2, r1
 8012c80:	b1f8      	cbz	r0, 8012cc2 <__ieee754_fmodf+0xb2>
 8012c82:	2b00      	cmp	r3, #0
 8012c84:	daf8      	bge.n	8012c78 <__ieee754_fmodf+0x68>
 8012c86:	0052      	lsls	r2, r2, #1
 8012c88:	e7f8      	b.n	8012c7c <__ieee754_fmodf+0x6c>
 8012c8a:	ee60 0a20 	vmul.f32	s1, s0, s1
 8012c8e:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 8012c92:	bcf0      	pop	{r4, r5, r6, r7}
 8012c94:	4770      	bx	lr
 8012c96:	ee60 0a20 	vmul.f32	s1, s0, s1
 8012c9a:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 8012c9e:	4770      	bx	lr
 8012ca0:	4a25      	ldr	r2, [pc, #148]	; (8012d38 <__ieee754_fmodf+0x128>)
 8012ca2:	0ff3      	lsrs	r3, r6, #31
 8012ca4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012ca8:	ed93 0a00 	vldr	s0, [r3]
 8012cac:	e7f1      	b.n	8012c92 <__ieee754_fmodf+0x82>
 8012cae:	0215      	lsls	r5, r2, #8
 8012cb0:	d036      	beq.n	8012d20 <__ieee754_fmodf+0x110>
 8012cb2:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 8012cb6:	006d      	lsls	r5, r5, #1
 8012cb8:	2d00      	cmp	r5, #0
 8012cba:	f100 30ff 	add.w	r0, r0, #4294967295
 8012cbe:	dcfa      	bgt.n	8012cb6 <__ieee754_fmodf+0xa6>
 8012cc0:	e7c0      	b.n	8012c44 <__ieee754_fmodf+0x34>
 8012cc2:	ea33 0323 	bics.w	r3, r3, r3, asr #32
 8012cc6:	bf28      	it	cs
 8012cc8:	4613      	movcs	r3, r2
 8012cca:	2b00      	cmp	r3, #0
 8012ccc:	d0e8      	beq.n	8012ca0 <__ieee754_fmodf+0x90>
 8012cce:	4a19      	ldr	r2, [pc, #100]	; (8012d34 <__ieee754_fmodf+0x124>)
 8012cd0:	4293      	cmp	r3, r2
 8012cd2:	dc04      	bgt.n	8012cde <__ieee754_fmodf+0xce>
 8012cd4:	005b      	lsls	r3, r3, #1
 8012cd6:	4293      	cmp	r3, r2
 8012cd8:	f105 35ff 	add.w	r5, r5, #4294967295
 8012cdc:	ddfa      	ble.n	8012cd4 <__ieee754_fmodf+0xc4>
 8012cde:	f115 0f7e 	cmn.w	r5, #126	; 0x7e
 8012ce2:	da14      	bge.n	8012d0e <__ieee754_fmodf+0xfe>
 8012ce4:	f06f 027d 	mvn.w	r2, #125	; 0x7d
 8012ce8:	1b55      	subs	r5, r2, r5
 8012cea:	412b      	asrs	r3, r5
 8012cec:	4333      	orrs	r3, r6
 8012cee:	ee00 3a10 	vmov	s0, r3
 8012cf2:	e7ce      	b.n	8012c92 <__ieee754_fmodf+0x82>
 8012cf4:	f06f 037d 	mvn.w	r3, #125	; 0x7d
 8012cf8:	1b5b      	subs	r3, r3, r5
 8012cfa:	4099      	lsls	r1, r3
 8012cfc:	e7ba      	b.n	8012c74 <__ieee754_fmodf+0x64>
 8012cfe:	f06f 047d 	mvn.w	r4, #125	; 0x7d
 8012d02:	1a24      	subs	r4, r4, r0
 8012d04:	40a2      	lsls	r2, r4
 8012d06:	e7ae      	b.n	8012c66 <__ieee754_fmodf+0x56>
 8012d08:	15cd      	asrs	r5, r1, #23
 8012d0a:	3d7f      	subs	r5, #127	; 0x7f
 8012d0c:	e7a4      	b.n	8012c58 <__ieee754_fmodf+0x48>
 8012d0e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8012d12:	4333      	orrs	r3, r6
 8012d14:	357f      	adds	r5, #127	; 0x7f
 8012d16:	ea43 53c5 	orr.w	r3, r3, r5, lsl #23
 8012d1a:	ee00 3a10 	vmov	s0, r3
 8012d1e:	e7b8      	b.n	8012c92 <__ieee754_fmodf+0x82>
 8012d20:	4281      	cmp	r1, r0
 8012d22:	dd04      	ble.n	8012d2e <__ieee754_fmodf+0x11e>
 8012d24:	15cd      	asrs	r5, r1, #23
 8012d26:	3d7f      	subs	r5, #127	; 0x7f
 8012d28:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 8012d2c:	e797      	b.n	8012c5e <__ieee754_fmodf+0x4e>
 8012d2e:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 8012d32:	e78a      	b.n	8012c4a <__ieee754_fmodf+0x3a>
 8012d34:	007fffff 	.word	0x007fffff
 8012d38:	08014120 	.word	0x08014120
 8012d3c:	00000000 	.word	0x00000000

08012d40 <__ieee754_rem_pio2f>:
 8012d40:	b570      	push	{r4, r5, r6, lr}
 8012d42:	ee10 3a10 	vmov	r3, s0
 8012d46:	4a96      	ldr	r2, [pc, #600]	; (8012fa0 <__ieee754_rem_pio2f+0x260>)
 8012d48:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8012d4c:	4294      	cmp	r4, r2
 8012d4e:	b086      	sub	sp, #24
 8012d50:	4605      	mov	r5, r0
 8012d52:	dd69      	ble.n	8012e28 <__ieee754_rem_pio2f+0xe8>
 8012d54:	4a93      	ldr	r2, [pc, #588]	; (8012fa4 <__ieee754_rem_pio2f+0x264>)
 8012d56:	4294      	cmp	r4, r2
 8012d58:	ee10 6a10 	vmov	r6, s0
 8012d5c:	dc1a      	bgt.n	8012d94 <__ieee754_rem_pio2f+0x54>
 8012d5e:	2b00      	cmp	r3, #0
 8012d60:	f024 040f 	bic.w	r4, r4, #15
 8012d64:	eddf 7a90 	vldr	s15, [pc, #576]	; 8012fa8 <__ieee754_rem_pio2f+0x268>
 8012d68:	4a90      	ldr	r2, [pc, #576]	; (8012fac <__ieee754_rem_pio2f+0x26c>)
 8012d6a:	dd64      	ble.n	8012e36 <__ieee754_rem_pio2f+0xf6>
 8012d6c:	4294      	cmp	r4, r2
 8012d6e:	ee70 7a67 	vsub.f32	s15, s0, s15
 8012d72:	f000 80cf 	beq.w	8012f14 <__ieee754_rem_pio2f+0x1d4>
 8012d76:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 8012fb0 <__ieee754_rem_pio2f+0x270>
 8012d7a:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8012d7e:	2001      	movs	r0, #1
 8012d80:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8012d84:	edc5 6a00 	vstr	s13, [r5]
 8012d88:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012d8c:	edc5 7a01 	vstr	s15, [r5, #4]
 8012d90:	b006      	add	sp, #24
 8012d92:	bd70      	pop	{r4, r5, r6, pc}
 8012d94:	4a87      	ldr	r2, [pc, #540]	; (8012fb4 <__ieee754_rem_pio2f+0x274>)
 8012d96:	4294      	cmp	r4, r2
 8012d98:	dd61      	ble.n	8012e5e <__ieee754_rem_pio2f+0x11e>
 8012d9a:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8012d9e:	f280 80b1 	bge.w	8012f04 <__ieee754_rem_pio2f+0x1c4>
 8012da2:	15e2      	asrs	r2, r4, #23
 8012da4:	3a86      	subs	r2, #134	; 0x86
 8012da6:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 8012daa:	ee07 3a90 	vmov	s15, r3
 8012dae:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8012db2:	eddf 6a81 	vldr	s13, [pc, #516]	; 8012fb8 <__ieee754_rem_pio2f+0x278>
 8012db6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012dba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012dbe:	ed8d 7a03 	vstr	s14, [sp, #12]
 8012dc2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012dc6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8012dca:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012dce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012dd2:	ed8d 7a04 	vstr	s14, [sp, #16]
 8012dd6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012dda:	eef5 7a40 	vcmp.f32	s15, #0.0
 8012dde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012de2:	edcd 7a05 	vstr	s15, [sp, #20]
 8012de6:	f040 80c7 	bne.w	8012f78 <__ieee754_rem_pio2f+0x238>
 8012dea:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8012dee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012df2:	bf0c      	ite	eq
 8012df4:	2301      	moveq	r3, #1
 8012df6:	2302      	movne	r3, #2
 8012df8:	4970      	ldr	r1, [pc, #448]	; (8012fbc <__ieee754_rem_pio2f+0x27c>)
 8012dfa:	9101      	str	r1, [sp, #4]
 8012dfc:	2102      	movs	r1, #2
 8012dfe:	9100      	str	r1, [sp, #0]
 8012e00:	a803      	add	r0, sp, #12
 8012e02:	4629      	mov	r1, r5
 8012e04:	f000 f97c 	bl	8013100 <__kernel_rem_pio2f>
 8012e08:	2e00      	cmp	r6, #0
 8012e0a:	da12      	bge.n	8012e32 <__ieee754_rem_pio2f+0xf2>
 8012e0c:	ed95 7a00 	vldr	s14, [r5]
 8012e10:	edd5 7a01 	vldr	s15, [r5, #4]
 8012e14:	eeb1 7a47 	vneg.f32	s14, s14
 8012e18:	eef1 7a67 	vneg.f32	s15, s15
 8012e1c:	4240      	negs	r0, r0
 8012e1e:	ed85 7a00 	vstr	s14, [r5]
 8012e22:	edc5 7a01 	vstr	s15, [r5, #4]
 8012e26:	e004      	b.n	8012e32 <__ieee754_rem_pio2f+0xf2>
 8012e28:	2200      	movs	r2, #0
 8012e2a:	ed85 0a00 	vstr	s0, [r5]
 8012e2e:	6042      	str	r2, [r0, #4]
 8012e30:	2000      	movs	r0, #0
 8012e32:	b006      	add	sp, #24
 8012e34:	bd70      	pop	{r4, r5, r6, pc}
 8012e36:	4294      	cmp	r4, r2
 8012e38:	ee70 7a27 	vadd.f32	s15, s0, s15
 8012e3c:	f000 8089 	beq.w	8012f52 <__ieee754_rem_pio2f+0x212>
 8012e40:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 8012fb0 <__ieee754_rem_pio2f+0x270>
 8012e44:	ee77 6a87 	vadd.f32	s13, s15, s14
 8012e48:	f04f 30ff 	mov.w	r0, #4294967295
 8012e4c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8012e50:	edc5 6a00 	vstr	s13, [r5]
 8012e54:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012e58:	edc5 7a01 	vstr	s15, [r5, #4]
 8012e5c:	e7e9      	b.n	8012e32 <__ieee754_rem_pio2f+0xf2>
 8012e5e:	f000 fd27 	bl	80138b0 <fabsf>
 8012e62:	eddf 6a57 	vldr	s13, [pc, #348]	; 8012fc0 <__ieee754_rem_pio2f+0x280>
 8012e66:	eddf 5a50 	vldr	s11, [pc, #320]	; 8012fa8 <__ieee754_rem_pio2f+0x268>
 8012e6a:	ed9f 7a51 	vldr	s14, [pc, #324]	; 8012fb0 <__ieee754_rem_pio2f+0x270>
 8012e6e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8012e72:	eee0 7a26 	vfma.f32	s15, s0, s13
 8012e76:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012e7a:	ee17 0a90 	vmov	r0, s15
 8012e7e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8012e82:	281f      	cmp	r0, #31
 8012e84:	eeb1 6a66 	vneg.f32	s12, s13
 8012e88:	eea6 0a25 	vfma.f32	s0, s12, s11
 8012e8c:	ee66 7a87 	vmul.f32	s15, s13, s14
 8012e90:	dd52      	ble.n	8012f38 <__ieee754_rem_pio2f+0x1f8>
 8012e92:	ee30 7a67 	vsub.f32	s14, s0, s15
 8012e96:	ee17 3a10 	vmov	r3, s14
 8012e9a:	15e4      	asrs	r4, r4, #23
 8012e9c:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 8012ea0:	1ae3      	subs	r3, r4, r3
 8012ea2:	2b08      	cmp	r3, #8
 8012ea4:	dd52      	ble.n	8012f4c <__ieee754_rem_pio2f+0x20c>
 8012ea6:	eddf 7a47 	vldr	s15, [pc, #284]	; 8012fc4 <__ieee754_rem_pio2f+0x284>
 8012eaa:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8012fc8 <__ieee754_rem_pio2f+0x288>
 8012eae:	eef0 5a40 	vmov.f32	s11, s0
 8012eb2:	eee6 5a27 	vfma.f32	s11, s12, s15
 8012eb6:	ee30 0a65 	vsub.f32	s0, s0, s11
 8012eba:	eea6 0a27 	vfma.f32	s0, s12, s15
 8012ebe:	eef0 7a40 	vmov.f32	s15, s0
 8012ec2:	eed6 7a87 	vfnms.f32	s15, s13, s14
 8012ec6:	ee35 7ae7 	vsub.f32	s14, s11, s15
 8012eca:	ee17 3a10 	vmov	r3, s14
 8012ece:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 8012ed2:	1ae4      	subs	r4, r4, r3
 8012ed4:	2c19      	cmp	r4, #25
 8012ed6:	dc51      	bgt.n	8012f7c <__ieee754_rem_pio2f+0x23c>
 8012ed8:	ed85 7a00 	vstr	s14, [r5]
 8012edc:	eeb0 0a65 	vmov.f32	s0, s11
 8012ee0:	ee30 0a47 	vsub.f32	s0, s0, s14
 8012ee4:	2e00      	cmp	r6, #0
 8012ee6:	ee30 0a67 	vsub.f32	s0, s0, s15
 8012eea:	ed85 0a01 	vstr	s0, [r5, #4]
 8012eee:	daa0      	bge.n	8012e32 <__ieee754_rem_pio2f+0xf2>
 8012ef0:	eeb1 7a47 	vneg.f32	s14, s14
 8012ef4:	eeb1 0a40 	vneg.f32	s0, s0
 8012ef8:	ed85 7a00 	vstr	s14, [r5]
 8012efc:	ed85 0a01 	vstr	s0, [r5, #4]
 8012f00:	4240      	negs	r0, r0
 8012f02:	e796      	b.n	8012e32 <__ieee754_rem_pio2f+0xf2>
 8012f04:	ee70 7a40 	vsub.f32	s15, s0, s0
 8012f08:	2000      	movs	r0, #0
 8012f0a:	edc5 7a01 	vstr	s15, [r5, #4]
 8012f0e:	edc5 7a00 	vstr	s15, [r5]
 8012f12:	e78e      	b.n	8012e32 <__ieee754_rem_pio2f+0xf2>
 8012f14:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8012fc4 <__ieee754_rem_pio2f+0x284>
 8012f18:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8012fc8 <__ieee754_rem_pio2f+0x288>
 8012f1c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8012f20:	2001      	movs	r0, #1
 8012f22:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8012f26:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8012f2a:	edc5 6a00 	vstr	s13, [r5]
 8012f2e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012f32:	edc5 7a01 	vstr	s15, [r5, #4]
 8012f36:	e77c      	b.n	8012e32 <__ieee754_rem_pio2f+0xf2>
 8012f38:	1e42      	subs	r2, r0, #1
 8012f3a:	4b24      	ldr	r3, [pc, #144]	; (8012fcc <__ieee754_rem_pio2f+0x28c>)
 8012f3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012f40:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 8012f44:	429a      	cmp	r2, r3
 8012f46:	ee30 7a67 	vsub.f32	s14, s0, s15
 8012f4a:	d0a4      	beq.n	8012e96 <__ieee754_rem_pio2f+0x156>
 8012f4c:	ed85 7a00 	vstr	s14, [r5]
 8012f50:	e7c6      	b.n	8012ee0 <__ieee754_rem_pio2f+0x1a0>
 8012f52:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8012fc4 <__ieee754_rem_pio2f+0x284>
 8012f56:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8012fc8 <__ieee754_rem_pio2f+0x288>
 8012f5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012f5e:	f04f 30ff 	mov.w	r0, #4294967295
 8012f62:	ee77 6a87 	vadd.f32	s13, s15, s14
 8012f66:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8012f6a:	edc5 6a00 	vstr	s13, [r5]
 8012f6e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012f72:	edc5 7a01 	vstr	s15, [r5, #4]
 8012f76:	e75c      	b.n	8012e32 <__ieee754_rem_pio2f+0xf2>
 8012f78:	2303      	movs	r3, #3
 8012f7a:	e73d      	b.n	8012df8 <__ieee754_rem_pio2f+0xb8>
 8012f7c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8012fd0 <__ieee754_rem_pio2f+0x290>
 8012f80:	ed9f 5a14 	vldr	s10, [pc, #80]	; 8012fd4 <__ieee754_rem_pio2f+0x294>
 8012f84:	eeb0 0a65 	vmov.f32	s0, s11
 8012f88:	eea6 0a07 	vfma.f32	s0, s12, s14
 8012f8c:	ee75 7ac0 	vsub.f32	s15, s11, s0
 8012f90:	eee6 7a07 	vfma.f32	s15, s12, s14
 8012f94:	eed6 7a85 	vfnms.f32	s15, s13, s10
 8012f98:	ee30 7a67 	vsub.f32	s14, s0, s15
 8012f9c:	e7d6      	b.n	8012f4c <__ieee754_rem_pio2f+0x20c>
 8012f9e:	bf00      	nop
 8012fa0:	3f490fd8 	.word	0x3f490fd8
 8012fa4:	4016cbe3 	.word	0x4016cbe3
 8012fa8:	3fc90f80 	.word	0x3fc90f80
 8012fac:	3fc90fd0 	.word	0x3fc90fd0
 8012fb0:	37354443 	.word	0x37354443
 8012fb4:	43490f80 	.word	0x43490f80
 8012fb8:	43800000 	.word	0x43800000
 8012fbc:	080141b0 	.word	0x080141b0
 8012fc0:	3f22f984 	.word	0x3f22f984
 8012fc4:	37354400 	.word	0x37354400
 8012fc8:	2e85a308 	.word	0x2e85a308
 8012fcc:	08014130 	.word	0x08014130
 8012fd0:	2e85a300 	.word	0x2e85a300
 8012fd4:	248d3132 	.word	0x248d3132
	...

08012fe0 <__ieee754_sqrtf>:
 8012fe0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8012fe4:	4770      	bx	lr
 8012fe6:	bf00      	nop
	...

08012ff0 <__kernel_cosf>:
 8012ff0:	ee10 3a10 	vmov	r3, s0
 8012ff4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012ff8:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8012ffc:	da2c      	bge.n	8013058 <__kernel_cosf+0x68>
 8012ffe:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8013002:	ee17 3a90 	vmov	r3, s15
 8013006:	2b00      	cmp	r3, #0
 8013008:	d05b      	beq.n	80130c2 <__kernel_cosf+0xd2>
 801300a:	ee20 7a00 	vmul.f32	s14, s0, s0
 801300e:	eddf 4a31 	vldr	s9, [pc, #196]	; 80130d4 <__kernel_cosf+0xe4>
 8013012:	ed9f 5a31 	vldr	s10, [pc, #196]	; 80130d8 <__kernel_cosf+0xe8>
 8013016:	eddf 5a31 	vldr	s11, [pc, #196]	; 80130dc <__kernel_cosf+0xec>
 801301a:	ed9f 6a31 	vldr	s12, [pc, #196]	; 80130e0 <__kernel_cosf+0xf0>
 801301e:	eddf 7a31 	vldr	s15, [pc, #196]	; 80130e4 <__kernel_cosf+0xf4>
 8013022:	eddf 6a31 	vldr	s13, [pc, #196]	; 80130e8 <__kernel_cosf+0xf8>
 8013026:	eea7 5a24 	vfma.f32	s10, s14, s9
 801302a:	eee7 5a05 	vfma.f32	s11, s14, s10
 801302e:	eea7 6a25 	vfma.f32	s12, s14, s11
 8013032:	eee7 7a06 	vfma.f32	s15, s14, s12
 8013036:	eee7 6a27 	vfma.f32	s13, s14, s15
 801303a:	ee66 6a87 	vmul.f32	s13, s13, s14
 801303e:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 8013042:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8013046:	eee7 0a26 	vfma.f32	s1, s14, s13
 801304a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801304e:	eed7 0a06 	vfnms.f32	s1, s14, s12
 8013052:	ee37 0ae0 	vsub.f32	s0, s15, s1
 8013056:	4770      	bx	lr
 8013058:	ee20 7a00 	vmul.f32	s14, s0, s0
 801305c:	eddf 4a1d 	vldr	s9, [pc, #116]	; 80130d4 <__kernel_cosf+0xe4>
 8013060:	ed9f 5a1d 	vldr	s10, [pc, #116]	; 80130d8 <__kernel_cosf+0xe8>
 8013064:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80130dc <__kernel_cosf+0xec>
 8013068:	ed9f 6a1d 	vldr	s12, [pc, #116]	; 80130e0 <__kernel_cosf+0xf0>
 801306c:	eddf 7a1d 	vldr	s15, [pc, #116]	; 80130e4 <__kernel_cosf+0xf4>
 8013070:	eddf 6a1d 	vldr	s13, [pc, #116]	; 80130e8 <__kernel_cosf+0xf8>
 8013074:	4a1d      	ldr	r2, [pc, #116]	; (80130ec <__kernel_cosf+0xfc>)
 8013076:	eea7 5a24 	vfma.f32	s10, s14, s9
 801307a:	4293      	cmp	r3, r2
 801307c:	eee5 5a07 	vfma.f32	s11, s10, s14
 8013080:	eea5 6a87 	vfma.f32	s12, s11, s14
 8013084:	eee6 7a07 	vfma.f32	s15, s12, s14
 8013088:	eee7 6a87 	vfma.f32	s13, s15, s14
 801308c:	ee66 6a87 	vmul.f32	s13, s13, s14
 8013090:	ddd5      	ble.n	801303e <__kernel_cosf+0x4e>
 8013092:	4a17      	ldr	r2, [pc, #92]	; (80130f0 <__kernel_cosf+0x100>)
 8013094:	4293      	cmp	r3, r2
 8013096:	dc17      	bgt.n	80130c8 <__kernel_cosf+0xd8>
 8013098:	f103 437f 	add.w	r3, r3, #4278190080	; 0xff000000
 801309c:	ee07 3a90 	vmov	s15, r3
 80130a0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80130a4:	ee36 6a67 	vsub.f32	s12, s12, s15
 80130a8:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 80130ac:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 80130b0:	eee7 0a26 	vfma.f32	s1, s14, s13
 80130b4:	eed7 7a25 	vfnms.f32	s15, s14, s11
 80130b8:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80130bc:	ee36 0a67 	vsub.f32	s0, s12, s15
 80130c0:	4770      	bx	lr
 80130c2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80130c6:	4770      	bx	lr
 80130c8:	eeb6 6a07 	vmov.f32	s12, #103	; 0x3f380000  0.7187500
 80130cc:	eef5 7a02 	vmov.f32	s15, #82	; 0x3e900000  0.2812500
 80130d0:	e7ea      	b.n	80130a8 <__kernel_cosf+0xb8>
 80130d2:	bf00      	nop
 80130d4:	ad47d74e 	.word	0xad47d74e
 80130d8:	310f74f6 	.word	0x310f74f6
 80130dc:	b493f27c 	.word	0xb493f27c
 80130e0:	37d00d01 	.word	0x37d00d01
 80130e4:	bab60b61 	.word	0xbab60b61
 80130e8:	3d2aaaab 	.word	0x3d2aaaab
 80130ec:	3e999999 	.word	0x3e999999
 80130f0:	3f480000 	.word	0x3f480000
	...

08013100 <__kernel_rem_pio2f>:
 8013100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013104:	ed2d 8b04 	vpush	{d8-d9}
 8013108:	b0d7      	sub	sp, #348	; 0x15c
 801310a:	f103 39ff 	add.w	r9, r3, #4294967295
 801310e:	9302      	str	r3, [sp, #8]
 8013110:	1ed3      	subs	r3, r2, #3
 8013112:	bf48      	it	mi
 8013114:	1d13      	addmi	r3, r2, #4
 8013116:	4cb2      	ldr	r4, [pc, #712]	; (80133e0 <__kernel_rem_pio2f+0x2e0>)
 8013118:	9d64      	ldr	r5, [sp, #400]	; 0x190
 801311a:	9105      	str	r1, [sp, #20]
 801311c:	10db      	asrs	r3, r3, #3
 801311e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8013122:	f854 6025 	ldr.w	r6, [r4, r5, lsl #2]
 8013126:	9303      	str	r3, [sp, #12]
 8013128:	f103 0801 	add.w	r8, r3, #1
 801312c:	eba2 08c8 	sub.w	r8, r2, r8, lsl #3
 8013130:	eb16 0209 	adds.w	r2, r6, r9
 8013134:	4686      	mov	lr, r0
 8013136:	eba3 0309 	sub.w	r3, r3, r9
 801313a:	d416      	bmi.n	801316a <__kernel_rem_pio2f+0x6a>
 801313c:	441a      	add	r2, r3
 801313e:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 80133e4 <__kernel_rem_pio2f+0x2e4>
 8013142:	9865      	ldr	r0, [sp, #404]	; 0x194
 8013144:	1c51      	adds	r1, r2, #1
 8013146:	aa1a      	add	r2, sp, #104	; 0x68
 8013148:	2b00      	cmp	r3, #0
 801314a:	bfa4      	itt	ge
 801314c:	f850 4023 	ldrge.w	r4, [r0, r3, lsl #2]
 8013150:	ee07 4a90 	vmovge	s15, r4
 8013154:	f103 0301 	add.w	r3, r3, #1
 8013158:	bfac      	ite	ge
 801315a:	eef8 7ae7 	vcvtge.f32.s32	s15, s15
 801315e:	eef0 7a47 	vmovlt.f32	s15, s14
 8013162:	428b      	cmp	r3, r1
 8013164:	ece2 7a01 	vstmia	r2!, {s15}
 8013168:	d1ee      	bne.n	8013148 <__kernel_rem_pio2f+0x48>
 801316a:	9b02      	ldr	r3, [sp, #8]
 801316c:	2e00      	cmp	r6, #0
 801316e:	ea4f 0483 	mov.w	r4, r3, lsl #2
 8013172:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 8013176:	db1d      	blt.n	80131b4 <__kernel_rem_pio2f+0xb4>
 8013178:	ab1a      	add	r3, sp, #104	; 0x68
 801317a:	1918      	adds	r0, r3, r4
 801317c:	aa43      	add	r2, sp, #268	; 0x10c
 801317e:	4673      	mov	r3, lr
 8013180:	1919      	adds	r1, r3, r4
 8013182:	eb02 070a 	add.w	r7, r2, sl
 8013186:	ad42      	add	r5, sp, #264	; 0x108
 8013188:	46f4      	mov	ip, lr
 801318a:	f1b9 0f00 	cmp.w	r9, #0
 801318e:	eddf 7a95 	vldr	s15, [pc, #596]	; 80133e4 <__kernel_rem_pio2f+0x2e4>
 8013192:	db09      	blt.n	80131a8 <__kernel_rem_pio2f+0xa8>
 8013194:	4602      	mov	r2, r0
 8013196:	4663      	mov	r3, ip
 8013198:	ecf3 6a01 	vldmia	r3!, {s13}
 801319c:	ed32 7a01 	vldmdb	r2!, {s14}
 80131a0:	428b      	cmp	r3, r1
 80131a2:	eee6 7a87 	vfma.f32	s15, s13, s14
 80131a6:	d1f7      	bne.n	8013198 <__kernel_rem_pio2f+0x98>
 80131a8:	ece5 7a01 	vstmia	r5!, {s15}
 80131ac:	42bd      	cmp	r5, r7
 80131ae:	f100 0004 	add.w	r0, r0, #4
 80131b2:	d1ea      	bne.n	801318a <__kernel_rem_pio2f+0x8a>
 80131b4:	f1aa 0308 	sub.w	r3, sl, #8
 80131b8:	ad06      	add	r5, sp, #24
 80131ba:	18eb      	adds	r3, r5, r3
 80131bc:	9304      	str	r3, [sp, #16]
 80131be:	ed9f 9a8b 	vldr	s18, [pc, #556]	; 80133ec <__kernel_rem_pio2f+0x2ec>
 80131c2:	eddf 8a89 	vldr	s17, [pc, #548]	; 80133e8 <__kernel_rem_pio2f+0x2e8>
 80131c6:	9600      	str	r6, [sp, #0]
 80131c8:	ab05      	add	r3, sp, #20
 80131ca:	46b3      	mov	fp, r6
 80131cc:	4474      	add	r4, lr
 80131ce:	449a      	add	sl, r3
 80131d0:	af42      	add	r7, sp, #264	; 0x108
 80131d2:	4676      	mov	r6, lr
 80131d4:	ea4f 018b 	mov.w	r1, fp, lsl #2
 80131d8:	ab56      	add	r3, sp, #344	; 0x158
 80131da:	440b      	add	r3, r1
 80131dc:	f1bb 0f00 	cmp.w	fp, #0
 80131e0:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 80131e4:	dd16      	ble.n	8013214 <__kernel_rem_pio2f+0x114>
 80131e6:	eb07 038b 	add.w	r3, r7, fp, lsl #2
 80131ea:	462a      	mov	r2, r5
 80131ec:	ee60 7a09 	vmul.f32	s15, s0, s18
 80131f0:	eeb0 7a40 	vmov.f32	s14, s0
 80131f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80131f8:	ed73 6a01 	vldmdb	r3!, {s13}
 80131fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013200:	42bb      	cmp	r3, r7
 8013202:	eea7 7ae8 	vfms.f32	s14, s15, s17
 8013206:	ee37 0aa6 	vadd.f32	s0, s15, s13
 801320a:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 801320e:	eca2 7a01 	vstmia	r2!, {s14}
 8013212:	d1eb      	bne.n	80131ec <__kernel_rem_pio2f+0xec>
 8013214:	4640      	mov	r0, r8
 8013216:	9101      	str	r1, [sp, #4]
 8013218:	f000 fb9a 	bl	8013950 <scalbnf>
 801321c:	eeb0 8a40 	vmov.f32	s16, s0
 8013220:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8013224:	ee28 0a00 	vmul.f32	s0, s16, s0
 8013228:	f000 fb4a 	bl	80138c0 <floorf>
 801322c:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8013230:	eea0 8a67 	vfms.f32	s16, s0, s15
 8013234:	f1b8 0f00 	cmp.w	r8, #0
 8013238:	9901      	ldr	r1, [sp, #4]
 801323a:	eefd 9ac8 	vcvt.s32.f32	s19, s16
 801323e:	eef8 7ae9 	vcvt.f32.s32	s15, s19
 8013242:	ee38 8a67 	vsub.f32	s16, s16, s15
 8013246:	f340 80c4 	ble.w	80133d2 <__kernel_rem_pio2f+0x2d2>
 801324a:	f10b 3cff 	add.w	ip, fp, #4294967295
 801324e:	f1c8 0308 	rsb	r3, r8, #8
 8013252:	f855 202c 	ldr.w	r2, [r5, ip, lsl #2]
 8013256:	fa42 f003 	asr.w	r0, r2, r3
 801325a:	fa00 f303 	lsl.w	r3, r0, r3
 801325e:	1ad3      	subs	r3, r2, r3
 8013260:	f845 302c 	str.w	r3, [r5, ip, lsl #2]
 8013264:	ee19 ca90 	vmov	ip, s19
 8013268:	4484      	add	ip, r0
 801326a:	f1c8 0207 	rsb	r2, r8, #7
 801326e:	ee09 ca90 	vmov	s19, ip
 8013272:	fa43 f202 	asr.w	r2, r3, r2
 8013276:	2a00      	cmp	r2, #0
 8013278:	dd31      	ble.n	80132de <__kernel_rem_pio2f+0x1de>
 801327a:	ee19 3a90 	vmov	r3, s19
 801327e:	f1bb 0f00 	cmp.w	fp, #0
 8013282:	f103 0301 	add.w	r3, r3, #1
 8013286:	ee09 3a90 	vmov	s19, r3
 801328a:	f340 8229 	ble.w	80136e0 <__kernel_rem_pio2f+0x5e0>
 801328e:	6828      	ldr	r0, [r5, #0]
 8013290:	2800      	cmp	r0, #0
 8013292:	f040 8086 	bne.w	80133a2 <__kernel_rem_pio2f+0x2a2>
 8013296:	f1bb 0f01 	cmp.w	fp, #1
 801329a:	d00b      	beq.n	80132b4 <__kernel_rem_pio2f+0x1b4>
 801329c:	46ae      	mov	lr, r5
 801329e:	f04f 0c01 	mov.w	ip, #1
 80132a2:	f85e 0f04 	ldr.w	r0, [lr, #4]!
 80132a6:	f10c 0301 	add.w	r3, ip, #1
 80132aa:	2800      	cmp	r0, #0
 80132ac:	d17c      	bne.n	80133a8 <__kernel_rem_pio2f+0x2a8>
 80132ae:	459b      	cmp	fp, r3
 80132b0:	469c      	mov	ip, r3
 80132b2:	d1f6      	bne.n	80132a2 <__kernel_rem_pio2f+0x1a2>
 80132b4:	f1b8 0f00 	cmp.w	r8, #0
 80132b8:	dd0e      	ble.n	80132d8 <__kernel_rem_pio2f+0x1d8>
 80132ba:	f1b8 0f01 	cmp.w	r8, #1
 80132be:	f000 8132 	beq.w	8013526 <__kernel_rem_pio2f+0x426>
 80132c2:	f1b8 0f02 	cmp.w	r8, #2
 80132c6:	d107      	bne.n	80132d8 <__kernel_rem_pio2f+0x1d8>
 80132c8:	f10b 31ff 	add.w	r1, fp, #4294967295
 80132cc:	f855 3021 	ldr.w	r3, [r5, r1, lsl #2]
 80132d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80132d4:	f845 3021 	str.w	r3, [r5, r1, lsl #2]
 80132d8:	2a02      	cmp	r2, #2
 80132da:	f000 8112 	beq.w	8013502 <__kernel_rem_pio2f+0x402>
 80132de:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80132e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132e6:	f040 8095 	bne.w	8013414 <__kernel_rem_pio2f+0x314>
 80132ea:	9b00      	ldr	r3, [sp, #0]
 80132ec:	f10b 3cff 	add.w	ip, fp, #4294967295
 80132f0:	4563      	cmp	r3, ip
 80132f2:	dc0e      	bgt.n	8013312 <__kernel_rem_pio2f+0x212>
 80132f4:	f10b 4180 	add.w	r1, fp, #1073741824	; 0x40000000
 80132f8:	3901      	subs	r1, #1
 80132fa:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 80132fe:	2000      	movs	r0, #0
 8013300:	f851 3904 	ldr.w	r3, [r1], #-4
 8013304:	4551      	cmp	r1, sl
 8013306:	ea40 0003 	orr.w	r0, r0, r3
 801330a:	d1f9      	bne.n	8013300 <__kernel_rem_pio2f+0x200>
 801330c:	2800      	cmp	r0, #0
 801330e:	f040 8113 	bne.w	8013538 <__kernel_rem_pio2f+0x438>
 8013312:	9b00      	ldr	r3, [sp, #0]
 8013314:	3b01      	subs	r3, #1
 8013316:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801331a:	2b00      	cmp	r3, #0
 801331c:	f040 8100 	bne.w	8013520 <__kernel_rem_pio2f+0x420>
 8013320:	9b04      	ldr	r3, [sp, #16]
 8013322:	f04f 0c01 	mov.w	ip, #1
 8013326:	f853 2904 	ldr.w	r2, [r3], #-4
 801332a:	f10c 0c01 	add.w	ip, ip, #1
 801332e:	2a00      	cmp	r2, #0
 8013330:	d0f9      	beq.n	8013326 <__kernel_rem_pio2f+0x226>
 8013332:	44dc      	add	ip, fp
 8013334:	f10b 0e01 	add.w	lr, fp, #1
 8013338:	45e6      	cmp	lr, ip
 801333a:	dc30      	bgt.n	801339e <__kernel_rem_pio2f+0x29e>
 801333c:	9b03      	ldr	r3, [sp, #12]
 801333e:	9a02      	ldr	r2, [sp, #8]
 8013340:	eb0e 0103 	add.w	r1, lr, r3
 8013344:	445a      	add	r2, fp
 8013346:	eb03 0b0c 	add.w	fp, r3, ip
 801334a:	ab1a      	add	r3, sp, #104	; 0x68
 801334c:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8013350:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8013354:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8013356:	3901      	subs	r1, #1
 8013358:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 801335c:	eb07 0e8e 	add.w	lr, r7, lr, lsl #2
 8013360:	eb03 0b8b 	add.w	fp, r3, fp, lsl #2
 8013364:	f851 3f04 	ldr.w	r3, [r1, #4]!
 8013368:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80133e4 <__kernel_rem_pio2f+0x2e4>
 801336c:	ee07 3a90 	vmov	s15, r3
 8013370:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013374:	4610      	mov	r0, r2
 8013376:	f1b9 0f00 	cmp.w	r9, #0
 801337a:	ece0 7a01 	vstmia	r0!, {s15}
 801337e:	db09      	blt.n	8013394 <__kernel_rem_pio2f+0x294>
 8013380:	4633      	mov	r3, r6
 8013382:	e001      	b.n	8013388 <__kernel_rem_pio2f+0x288>
 8013384:	ed72 7a01 	vldmdb	r2!, {s15}
 8013388:	ecf3 6a01 	vldmia	r3!, {s13}
 801338c:	42a3      	cmp	r3, r4
 801338e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8013392:	d1f7      	bne.n	8013384 <__kernel_rem_pio2f+0x284>
 8013394:	4559      	cmp	r1, fp
 8013396:	ecae 7a01 	vstmia	lr!, {s14}
 801339a:	4602      	mov	r2, r0
 801339c:	d1e2      	bne.n	8013364 <__kernel_rem_pio2f+0x264>
 801339e:	46e3      	mov	fp, ip
 80133a0:	e718      	b.n	80131d4 <__kernel_rem_pio2f+0xd4>
 80133a2:	2301      	movs	r3, #1
 80133a4:	f04f 0c00 	mov.w	ip, #0
 80133a8:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 80133ac:	459b      	cmp	fp, r3
 80133ae:	f845 002c 	str.w	r0, [r5, ip, lsl #2]
 80133b2:	dd0c      	ble.n	80133ce <__kernel_rem_pio2f+0x2ce>
 80133b4:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 80133b8:	4429      	add	r1, r5
 80133ba:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80133be:	e000      	b.n	80133c2 <__kernel_rem_pio2f+0x2c2>
 80133c0:	6818      	ldr	r0, [r3, #0]
 80133c2:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 80133c6:	f843 0b04 	str.w	r0, [r3], #4
 80133ca:	428b      	cmp	r3, r1
 80133cc:	d1f8      	bne.n	80133c0 <__kernel_rem_pio2f+0x2c0>
 80133ce:	2001      	movs	r0, #1
 80133d0:	e770      	b.n	80132b4 <__kernel_rem_pio2f+0x1b4>
 80133d2:	d10f      	bne.n	80133f4 <__kernel_rem_pio2f+0x2f4>
 80133d4:	f10b 33ff 	add.w	r3, fp, #4294967295
 80133d8:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
 80133dc:	1212      	asrs	r2, r2, #8
 80133de:	e74a      	b.n	8013276 <__kernel_rem_pio2f+0x176>
 80133e0:	08014500 	.word	0x08014500
 80133e4:	00000000 	.word	0x00000000
 80133e8:	43800000 	.word	0x43800000
 80133ec:	3b800000 	.word	0x3b800000
 80133f0:	3fc90000 	.word	0x3fc90000
 80133f4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80133f8:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80133fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013400:	f280 8158 	bge.w	80136b4 <__kernel_rem_pio2f+0x5b4>
 8013404:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8013408:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801340c:	f04f 0200 	mov.w	r2, #0
 8013410:	f43f af6b 	beq.w	80132ea <__kernel_rem_pio2f+0x1ea>
 8013414:	eeb0 0a48 	vmov.f32	s0, s16
 8013418:	f1c8 0000 	rsb	r0, r8, #0
 801341c:	4691      	mov	r9, r2
 801341e:	9e00      	ldr	r6, [sp, #0]
 8013420:	f000 fa96 	bl	8013950 <scalbnf>
 8013424:	ed1f 7a10 	vldr	s14, [pc, #-64]	; 80133e8 <__kernel_rem_pio2f+0x2e8>
 8013428:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801342c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013430:	f2c0 8158 	blt.w	80136e4 <__kernel_rem_pio2f+0x5e4>
 8013434:	ed5f 7a13 	vldr	s15, [pc, #-76]	; 80133ec <__kernel_rem_pio2f+0x2ec>
 8013438:	ee60 7a27 	vmul.f32	s15, s0, s15
 801343c:	f10b 0301 	add.w	r3, fp, #1
 8013440:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013444:	f108 0808 	add.w	r8, r8, #8
 8013448:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801344c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8013450:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013454:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8013458:	ee10 2a10 	vmov	r2, s0
 801345c:	f845 202b 	str.w	r2, [r5, fp, lsl #2]
 8013460:	ee17 2a90 	vmov	r2, s15
 8013464:	f845 2023 	str.w	r2, [r5, r3, lsl #2]
 8013468:	4640      	mov	r0, r8
 801346a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801346e:	9300      	str	r3, [sp, #0]
 8013470:	f000 fa6e 	bl	8013950 <scalbnf>
 8013474:	9b00      	ldr	r3, [sp, #0]
 8013476:	2b00      	cmp	r3, #0
 8013478:	f2c0 814b 	blt.w	8013712 <__kernel_rem_pio2f+0x612>
 801347c:	0098      	lsls	r0, r3, #2
 801347e:	aa42      	add	r2, sp, #264	; 0x108
 8013480:	f100 0c04 	add.w	ip, r0, #4
 8013484:	ed1f 7a27 	vldr	s14, [pc, #-156]	; 80133ec <__kernel_rem_pio2f+0x2ec>
 8013488:	4410      	add	r0, r2
 801348a:	1d01      	adds	r1, r0, #4
 801348c:	eb05 020c 	add.w	r2, r5, ip
 8013490:	ed72 7a01 	vldmdb	r2!, {s15}
 8013494:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013498:	42aa      	cmp	r2, r5
 801349a:	ee67 7a80 	vmul.f32	s15, s15, s0
 801349e:	ee20 0a07 	vmul.f32	s0, s0, s14
 80134a2:	ed61 7a01 	vstmdb	r1!, {s15}
 80134a6:	d1f3      	bne.n	8013490 <__kernel_rem_pio2f+0x390>
 80134a8:	f10d 0eb8 	add.w	lr, sp, #184	; 0xb8
 80134ac:	ed1f 6a30 	vldr	s12, [pc, #-192]	; 80133f0 <__kernel_rem_pio2f+0x2f0>
 80134b0:	4605      	mov	r5, r0
 80134b2:	4677      	mov	r7, lr
 80134b4:	f103 0801 	add.w	r8, r3, #1
 80134b8:	2400      	movs	r4, #0
 80134ba:	2e00      	cmp	r6, #0
 80134bc:	f2c0 8105 	blt.w	80136ca <__kernel_rem_pio2f+0x5ca>
 80134c0:	48a1      	ldr	r0, [pc, #644]	; (8013748 <__kernel_rem_pio2f+0x648>)
 80134c2:	eddf 7aa2 	vldr	s15, [pc, #648]	; 801374c <__kernel_rem_pio2f+0x64c>
 80134c6:	4629      	mov	r1, r5
 80134c8:	eeb0 7a46 	vmov.f32	s14, s12
 80134cc:	2200      	movs	r2, #0
 80134ce:	e003      	b.n	80134d8 <__kernel_rem_pio2f+0x3d8>
 80134d0:	42a2      	cmp	r2, r4
 80134d2:	dc08      	bgt.n	80134e6 <__kernel_rem_pio2f+0x3e6>
 80134d4:	ecb0 7a01 	vldmia	r0!, {s14}
 80134d8:	ecf1 6a01 	vldmia	r1!, {s13}
 80134dc:	3201      	adds	r2, #1
 80134de:	4296      	cmp	r6, r2
 80134e0:	eee6 7a87 	vfma.f32	s15, s13, s14
 80134e4:	daf4      	bge.n	80134d0 <__kernel_rem_pio2f+0x3d0>
 80134e6:	3401      	adds	r4, #1
 80134e8:	4544      	cmp	r4, r8
 80134ea:	ece7 7a01 	vstmia	r7!, {s15}
 80134ee:	f1a5 0504 	sub.w	r5, r5, #4
 80134f2:	d1e2      	bne.n	80134ba <__kernel_rem_pio2f+0x3ba>
 80134f4:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80134f6:	2a03      	cmp	r2, #3
 80134f8:	d853      	bhi.n	80135a2 <__kernel_rem_pio2f+0x4a2>
 80134fa:	e8df f002 	tbb	[pc, r2]
 80134fe:	b6ca      	.short	0xb6ca
 8013500:	5bb6      	.short	0x5bb6
 8013502:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8013506:	ee30 8a48 	vsub.f32	s16, s0, s16
 801350a:	2800      	cmp	r0, #0
 801350c:	f43f aee7 	beq.w	80132de <__kernel_rem_pio2f+0x1de>
 8013510:	4640      	mov	r0, r8
 8013512:	9201      	str	r2, [sp, #4]
 8013514:	f000 fa1c 	bl	8013950 <scalbnf>
 8013518:	9a01      	ldr	r2, [sp, #4]
 801351a:	ee38 8a40 	vsub.f32	s16, s16, s0
 801351e:	e6de      	b.n	80132de <__kernel_rem_pio2f+0x1de>
 8013520:	f04f 0c01 	mov.w	ip, #1
 8013524:	e705      	b.n	8013332 <__kernel_rem_pio2f+0x232>
 8013526:	f10b 31ff 	add.w	r1, fp, #4294967295
 801352a:	f855 3021 	ldr.w	r3, [r5, r1, lsl #2]
 801352e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013532:	f845 3021 	str.w	r3, [r5, r1, lsl #2]
 8013536:	e6cf      	b.n	80132d8 <__kernel_rem_pio2f+0x1d8>
 8013538:	4691      	mov	r9, r2
 801353a:	f855 202c 	ldr.w	r2, [r5, ip, lsl #2]
 801353e:	9e00      	ldr	r6, [sp, #0]
 8013540:	4663      	mov	r3, ip
 8013542:	f1a8 0808 	sub.w	r8, r8, #8
 8013546:	2a00      	cmp	r2, #0
 8013548:	d18e      	bne.n	8013468 <__kernel_rem_pio2f+0x368>
 801354a:	f10c 4280 	add.w	r2, ip, #1073741824	; 0x40000000
 801354e:	3a01      	subs	r2, #1
 8013550:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 8013554:	f852 1904 	ldr.w	r1, [r2], #-4
 8013558:	3b01      	subs	r3, #1
 801355a:	f1a8 0808 	sub.w	r8, r8, #8
 801355e:	2900      	cmp	r1, #0
 8013560:	d0f8      	beq.n	8013554 <__kernel_rem_pio2f+0x454>
 8013562:	e781      	b.n	8013468 <__kernel_rem_pio2f+0x368>
 8013564:	464a      	mov	r2, r9
 8013566:	eddf 7a79 	vldr	s15, [pc, #484]	; 801374c <__kernel_rem_pio2f+0x64c>
 801356a:	2a00      	cmp	r2, #0
 801356c:	f040 80c2 	bne.w	80136f4 <__kernel_rem_pio2f+0x5f4>
 8013570:	ed9d 7a2e 	vldr	s14, [sp, #184]	; 0xb8
 8013574:	9a05      	ldr	r2, [sp, #20]
 8013576:	2b00      	cmp	r3, #0
 8013578:	edc2 7a00 	vstr	s15, [r2]
 801357c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013580:	dd0c      	ble.n	801359c <__kernel_rem_pio2f+0x49c>
 8013582:	a92f      	add	r1, sp, #188	; 0xbc
 8013584:	2201      	movs	r2, #1
 8013586:	ecb1 7a01 	vldmia	r1!, {s14}
 801358a:	3201      	adds	r2, #1
 801358c:	4293      	cmp	r3, r2
 801358e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013592:	daf8      	bge.n	8013586 <__kernel_rem_pio2f+0x486>
 8013594:	464b      	mov	r3, r9
 8013596:	2b00      	cmp	r3, #0
 8013598:	f040 80b8 	bne.w	801370c <__kernel_rem_pio2f+0x60c>
 801359c:	9b05      	ldr	r3, [sp, #20]
 801359e:	edc3 7a01 	vstr	s15, [r3, #4]
 80135a2:	ee19 3a90 	vmov	r3, s19
 80135a6:	f003 0007 	and.w	r0, r3, #7
 80135aa:	b057      	add	sp, #348	; 0x15c
 80135ac:	ecbd 8b04 	vpop	{d8-d9}
 80135b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80135b4:	2b00      	cmp	r3, #0
 80135b6:	f340 80c4 	ble.w	8013742 <__kernel_rem_pio2f+0x642>
 80135ba:	0098      	lsls	r0, r3, #2
 80135bc:	aa56      	add	r2, sp, #344	; 0x158
 80135be:	4402      	add	r2, r0
 80135c0:	f10d 0eb8 	add.w	lr, sp, #184	; 0xb8
 80135c4:	f103 4180 	add.w	r1, r3, #1073741824	; 0x40000000
 80135c8:	ed52 6a28 	vldr	s13, [r2, #-160]	; 0xffffff60
 80135cc:	3901      	subs	r1, #1
 80135ce:	eb0e 0283 	add.w	r2, lr, r3, lsl #2
 80135d2:	ed72 7a01 	vldmdb	r2!, {s15}
 80135d6:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80135da:	4596      	cmp	lr, r2
 80135dc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80135e0:	ed82 7a00 	vstr	s14, [r2]
 80135e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80135e8:	eef0 6a47 	vmov.f32	s13, s14
 80135ec:	edc2 7a01 	vstr	s15, [r2, #4]
 80135f0:	d1ef      	bne.n	80135d2 <__kernel_rem_pio2f+0x4d2>
 80135f2:	2b01      	cmp	r3, #1
 80135f4:	f340 80a5 	ble.w	8013742 <__kernel_rem_pio2f+0x642>
 80135f8:	ab56      	add	r3, sp, #344	; 0x158
 80135fa:	4418      	add	r0, r3
 80135fc:	0089      	lsls	r1, r1, #2
 80135fe:	1d0b      	adds	r3, r1, #4
 8013600:	ed50 6a28 	vldr	s13, [r0, #-160]	; 0xffffff60
 8013604:	4473      	add	r3, lr
 8013606:	aa2f      	add	r2, sp, #188	; 0xbc
 8013608:	ed73 7a01 	vldmdb	r3!, {s15}
 801360c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8013610:	429a      	cmp	r2, r3
 8013612:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013616:	ed83 7a00 	vstr	s14, [r3]
 801361a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801361e:	eef0 6a47 	vmov.f32	s13, s14
 8013622:	edc3 7a01 	vstr	s15, [r3, #4]
 8013626:	d1ef      	bne.n	8013608 <__kernel_rem_pio2f+0x508>
 8013628:	3108      	adds	r1, #8
 801362a:	eddf 7a48 	vldr	s15, [pc, #288]	; 801374c <__kernel_rem_pio2f+0x64c>
 801362e:	eb0e 0301 	add.w	r3, lr, r1
 8013632:	f10e 0e08 	add.w	lr, lr, #8
 8013636:	ed33 7a01 	vldmdb	r3!, {s14}
 801363a:	459e      	cmp	lr, r3
 801363c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013640:	d1f9      	bne.n	8013636 <__kernel_rem_pio2f+0x536>
 8013642:	464b      	mov	r3, r9
 8013644:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 8013648:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 801364c:	b12b      	cbz	r3, 801365a <__kernel_rem_pio2f+0x55a>
 801364e:	eef1 6a66 	vneg.f32	s13, s13
 8013652:	eeb1 7a47 	vneg.f32	s14, s14
 8013656:	eef1 7a67 	vneg.f32	s15, s15
 801365a:	9b05      	ldr	r3, [sp, #20]
 801365c:	edc3 6a00 	vstr	s13, [r3]
 8013660:	ed83 7a01 	vstr	s14, [r3, #4]
 8013664:	edc3 7a02 	vstr	s15, [r3, #8]
 8013668:	e79b      	b.n	80135a2 <__kernel_rem_pio2f+0x4a2>
 801366a:	2b00      	cmp	r3, #0
 801366c:	f6ff af7a 	blt.w	8013564 <__kernel_rem_pio2f+0x464>
 8013670:	a92e      	add	r1, sp, #184	; 0xb8
 8013672:	eb01 0283 	add.w	r2, r1, r3, lsl #2
 8013676:	eddf 7a35 	vldr	s15, [pc, #212]	; 801374c <__kernel_rem_pio2f+0x64c>
 801367a:	3204      	adds	r2, #4
 801367c:	ed32 7a01 	vldmdb	r2!, {s14}
 8013680:	4291      	cmp	r1, r2
 8013682:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013686:	d1f9      	bne.n	801367c <__kernel_rem_pio2f+0x57c>
 8013688:	464a      	mov	r2, r9
 801368a:	2a00      	cmp	r2, #0
 801368c:	f43f af70 	beq.w	8013570 <__kernel_rem_pio2f+0x470>
 8013690:	e030      	b.n	80136f4 <__kernel_rem_pio2f+0x5f4>
 8013692:	eddf 7a2e 	vldr	s15, [pc, #184]	; 801374c <__kernel_rem_pio2f+0x64c>
 8013696:	44f4      	add	ip, lr
 8013698:	ed3c 7a01 	vldmdb	ip!, {s14}
 801369c:	45e6      	cmp	lr, ip
 801369e:	ee77 7a87 	vadd.f32	s15, s15, s14
 80136a2:	d1f9      	bne.n	8013698 <__kernel_rem_pio2f+0x598>
 80136a4:	464b      	mov	r3, r9
 80136a6:	b10b      	cbz	r3, 80136ac <__kernel_rem_pio2f+0x5ac>
 80136a8:	eef1 7a67 	vneg.f32	s15, s15
 80136ac:	9b05      	ldr	r3, [sp, #20]
 80136ae:	edc3 7a00 	vstr	s15, [r3]
 80136b2:	e776      	b.n	80135a2 <__kernel_rem_pio2f+0x4a2>
 80136b4:	ee19 3a90 	vmov	r3, s19
 80136b8:	f1bb 0f00 	cmp.w	fp, #0
 80136bc:	f103 0301 	add.w	r3, r3, #1
 80136c0:	ee09 3a90 	vmov	s19, r3
 80136c4:	dd37      	ble.n	8013736 <__kernel_rem_pio2f+0x636>
 80136c6:	2202      	movs	r2, #2
 80136c8:	e5e1      	b.n	801328e <__kernel_rem_pio2f+0x18e>
 80136ca:	eddf 7a20 	vldr	s15, [pc, #128]	; 801374c <__kernel_rem_pio2f+0x64c>
 80136ce:	3401      	adds	r4, #1
 80136d0:	4544      	cmp	r4, r8
 80136d2:	ece7 7a01 	vstmia	r7!, {s15}
 80136d6:	f1a5 0504 	sub.w	r5, r5, #4
 80136da:	f47f aeee 	bne.w	80134ba <__kernel_rem_pio2f+0x3ba>
 80136de:	e709      	b.n	80134f4 <__kernel_rem_pio2f+0x3f4>
 80136e0:	2000      	movs	r0, #0
 80136e2:	e5e7      	b.n	80132b4 <__kernel_rem_pio2f+0x1b4>
 80136e4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80136e8:	465b      	mov	r3, fp
 80136ea:	ee10 2a10 	vmov	r2, s0
 80136ee:	f845 202b 	str.w	r2, [r5, fp, lsl #2]
 80136f2:	e6b9      	b.n	8013468 <__kernel_rem_pio2f+0x368>
 80136f4:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 80136f8:	9a05      	ldr	r2, [sp, #20]
 80136fa:	eeb1 7a67 	vneg.f32	s14, s15
 80136fe:	2b00      	cmp	r3, #0
 8013700:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8013704:	ed82 7a00 	vstr	s14, [r2]
 8013708:	f73f af3b 	bgt.w	8013582 <__kernel_rem_pio2f+0x482>
 801370c:	eef1 7a67 	vneg.f32	s15, s15
 8013710:	e744      	b.n	801359c <__kernel_rem_pio2f+0x49c>
 8013712:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8013714:	2a03      	cmp	r2, #3
 8013716:	f63f af44 	bhi.w	80135a2 <__kernel_rem_pio2f+0x4a2>
 801371a:	a101      	add	r1, pc, #4	; (adr r1, 8013720 <__kernel_rem_pio2f+0x620>)
 801371c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8013720:	08013731 	.word	0x08013731
 8013724:	0801366b 	.word	0x0801366b
 8013728:	0801366b 	.word	0x0801366b
 801372c:	080135b5 	.word	0x080135b5
 8013730:	eddf 7a06 	vldr	s15, [pc, #24]	; 801374c <__kernel_rem_pio2f+0x64c>
 8013734:	e7b6      	b.n	80136a4 <__kernel_rem_pio2f+0x5a4>
 8013736:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801373a:	ee37 8ac8 	vsub.f32	s16, s15, s16
 801373e:	2202      	movs	r2, #2
 8013740:	e5cd      	b.n	80132de <__kernel_rem_pio2f+0x1de>
 8013742:	eddf 7a02 	vldr	s15, [pc, #8]	; 801374c <__kernel_rem_pio2f+0x64c>
 8013746:	e77c      	b.n	8013642 <__kernel_rem_pio2f+0x542>
 8013748:	080144d4 	.word	0x080144d4
 801374c:	00000000 	.word	0x00000000

08013750 <__kernel_sinf>:
 8013750:	ee10 3a10 	vmov	r3, s0
 8013754:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013758:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 801375c:	da04      	bge.n	8013768 <__kernel_sinf+0x18>
 801375e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8013762:	ee17 3a90 	vmov	r3, s15
 8013766:	b323      	cbz	r3, 80137b2 <__kernel_sinf+0x62>
 8013768:	ee60 7a00 	vmul.f32	s15, s0, s0
 801376c:	ed9f 5a15 	vldr	s10, [pc, #84]	; 80137c4 <__kernel_sinf+0x74>
 8013770:	eddf 5a15 	vldr	s11, [pc, #84]	; 80137c8 <__kernel_sinf+0x78>
 8013774:	ed9f 6a15 	vldr	s12, [pc, #84]	; 80137cc <__kernel_sinf+0x7c>
 8013778:	eddf 6a15 	vldr	s13, [pc, #84]	; 80137d0 <__kernel_sinf+0x80>
 801377c:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80137d4 <__kernel_sinf+0x84>
 8013780:	eee7 5a85 	vfma.f32	s11, s15, s10
 8013784:	ee20 5a27 	vmul.f32	s10, s0, s15
 8013788:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801378c:	eee6 6a27 	vfma.f32	s13, s12, s15
 8013790:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8013794:	b170      	cbz	r0, 80137b4 <__kernel_sinf+0x64>
 8013796:	ee27 7a45 	vnmul.f32	s14, s14, s10
 801379a:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 801379e:	eea0 7aa6 	vfma.f32	s14, s1, s13
 80137a2:	eddf 6a0d 	vldr	s13, [pc, #52]	; 80137d8 <__kernel_sinf+0x88>
 80137a6:	eed7 0a27 	vfnms.f32	s1, s14, s15
 80137aa:	eee5 0a26 	vfma.f32	s1, s10, s13
 80137ae:	ee30 0a60 	vsub.f32	s0, s0, s1
 80137b2:	4770      	bx	lr
 80137b4:	eddf 6a09 	vldr	s13, [pc, #36]	; 80137dc <__kernel_sinf+0x8c>
 80137b8:	eee7 6a87 	vfma.f32	s13, s15, s14
 80137bc:	eea6 0a85 	vfma.f32	s0, s13, s10
 80137c0:	4770      	bx	lr
 80137c2:	bf00      	nop
 80137c4:	2f2ec9d3 	.word	0x2f2ec9d3
 80137c8:	b2d72f34 	.word	0xb2d72f34
 80137cc:	3638ef1b 	.word	0x3638ef1b
 80137d0:	b9500d01 	.word	0xb9500d01
 80137d4:	3c088889 	.word	0x3c088889
 80137d8:	3e2aaaab 	.word	0x3e2aaaab
 80137dc:	be2aaaab 	.word	0xbe2aaaab

080137e0 <with_errnof>:
 80137e0:	b510      	push	{r4, lr}
 80137e2:	ed2d 8b02 	vpush	{d8}
 80137e6:	eeb0 8a40 	vmov.f32	s16, s0
 80137ea:	4604      	mov	r4, r0
 80137ec:	f000 f928 	bl	8013a40 <__errno>
 80137f0:	eeb0 0a48 	vmov.f32	s0, s16
 80137f4:	ecbd 8b02 	vpop	{d8}
 80137f8:	6004      	str	r4, [r0, #0]
 80137fa:	bd10      	pop	{r4, pc}
 80137fc:	0000      	movs	r0, r0
	...

08013800 <xflowf>:
 8013800:	b130      	cbz	r0, 8013810 <xflowf+0x10>
 8013802:	eef1 7a40 	vneg.f32	s15, s0
 8013806:	ee27 0a80 	vmul.f32	s0, s15, s0
 801380a:	2022      	movs	r0, #34	; 0x22
 801380c:	f7ff bfe8 	b.w	80137e0 <with_errnof>
 8013810:	eef0 7a40 	vmov.f32	s15, s0
 8013814:	ee27 0a80 	vmul.f32	s0, s15, s0
 8013818:	2022      	movs	r0, #34	; 0x22
 801381a:	f7ff bfe1 	b.w	80137e0 <with_errnof>
 801381e:	bf00      	nop

08013820 <__math_uflowf>:
 8013820:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8013828 <__math_uflowf+0x8>
 8013824:	f7ff bfec 	b.w	8013800 <xflowf>
 8013828:	10000000 	.word	0x10000000
 801382c:	00000000 	.word	0x00000000

08013830 <__math_may_uflowf>:
 8013830:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8013838 <__math_may_uflowf+0x8>
 8013834:	f7ff bfe4 	b.w	8013800 <xflowf>
 8013838:	1a200000 	.word	0x1a200000
 801383c:	00000000 	.word	0x00000000

08013840 <__math_oflowf>:
 8013840:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8013848 <__math_oflowf+0x8>
 8013844:	f7ff bfdc 	b.w	8013800 <xflowf>
 8013848:	70000000 	.word	0x70000000
 801384c:	00000000 	.word	0x00000000

08013850 <__math_divzerof>:
 8013850:	2800      	cmp	r0, #0
 8013852:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8013856:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801385a:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8013870 <__math_divzerof+0x20>
 801385e:	bf08      	it	eq
 8013860:	eef0 7a47 	vmoveq.f32	s15, s14
 8013864:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8013868:	2022      	movs	r0, #34	; 0x22
 801386a:	f7ff bfb9 	b.w	80137e0 <with_errnof>
 801386e:	bf00      	nop
	...

08013880 <__math_invalidf>:
 8013880:	ee70 7a40 	vsub.f32	s15, s0, s0
 8013884:	eeb4 0a40 	vcmp.f32	s0, s0
 8013888:	ee87 7aa7 	vdiv.f32	s14, s15, s15
 801388c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013890:	eeb0 0a47 	vmov.f32	s0, s14
 8013894:	d602      	bvs.n	801389c <__math_invalidf+0x1c>
 8013896:	2021      	movs	r0, #33	; 0x21
 8013898:	f7ff bfa2 	b.w	80137e0 <with_errnof>
 801389c:	4770      	bx	lr
 801389e:	bf00      	nop

080138a0 <matherr>:
 80138a0:	2000      	movs	r0, #0
 80138a2:	4770      	bx	lr
	...

080138b0 <fabsf>:
 80138b0:	ee10 3a10 	vmov	r3, s0
 80138b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80138b8:	ee00 3a10 	vmov	s0, r3
 80138bc:	4770      	bx	lr
 80138be:	bf00      	nop

080138c0 <floorf>:
 80138c0:	ee10 2a10 	vmov	r2, s0
 80138c4:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 80138c8:	0dcb      	lsrs	r3, r1, #23
 80138ca:	3b7f      	subs	r3, #127	; 0x7f
 80138cc:	2b16      	cmp	r3, #22
 80138ce:	dc1c      	bgt.n	801390a <floorf+0x4a>
 80138d0:	2b00      	cmp	r3, #0
 80138d2:	ee10 0a10 	vmov	r0, s0
 80138d6:	db1e      	blt.n	8013916 <floorf+0x56>
 80138d8:	4919      	ldr	r1, [pc, #100]	; (8013940 <floorf+0x80>)
 80138da:	4119      	asrs	r1, r3
 80138dc:	420a      	tst	r2, r1
 80138de:	d027      	beq.n	8013930 <floorf+0x70>
 80138e0:	eddf 7a18 	vldr	s15, [pc, #96]	; 8013944 <floorf+0x84>
 80138e4:	ee70 7a27 	vadd.f32	s15, s0, s15
 80138e8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80138ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80138f0:	dd1e      	ble.n	8013930 <floorf+0x70>
 80138f2:	2a00      	cmp	r2, #0
 80138f4:	da04      	bge.n	8013900 <floorf+0x40>
 80138f6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80138fa:	fa42 f303 	asr.w	r3, r2, r3
 80138fe:	4418      	add	r0, r3
 8013900:	ea20 0301 	bic.w	r3, r0, r1
 8013904:	ee00 3a10 	vmov	s0, r3
 8013908:	4770      	bx	lr
 801390a:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801390e:	d30f      	bcc.n	8013930 <floorf+0x70>
 8013910:	ee30 0a00 	vadd.f32	s0, s0, s0
 8013914:	4770      	bx	lr
 8013916:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8013944 <floorf+0x84>
 801391a:	ee70 7a27 	vadd.f32	s15, s0, s15
 801391e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8013922:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013926:	dd03      	ble.n	8013930 <floorf+0x70>
 8013928:	2a00      	cmp	r2, #0
 801392a:	db02      	blt.n	8013932 <floorf+0x72>
 801392c:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8013948 <floorf+0x88>
 8013930:	4770      	bx	lr
 8013932:	2900      	cmp	r1, #0
 8013934:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8013938:	bf18      	it	ne
 801393a:	eeb0 0a67 	vmovne.f32	s0, s15
 801393e:	4770      	bx	lr
 8013940:	007fffff 	.word	0x007fffff
 8013944:	7149f2ca 	.word	0x7149f2ca
	...

08013950 <scalbnf>:
 8013950:	b508      	push	{r3, lr}
 8013952:	ee10 3a10 	vmov	r3, s0
 8013956:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 801395a:	ed2d 8b02 	vpush	{d8}
 801395e:	d011      	beq.n	8013984 <scalbnf+0x34>
 8013960:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8013964:	d211      	bcs.n	801398a <scalbnf+0x3a>
 8013966:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 801396a:	d313      	bcc.n	8013994 <scalbnf+0x44>
 801396c:	0dd2      	lsrs	r2, r2, #23
 801396e:	4402      	add	r2, r0
 8013970:	2afe      	cmp	r2, #254	; 0xfe
 8013972:	dc1c      	bgt.n	80139ae <scalbnf+0x5e>
 8013974:	2a00      	cmp	r2, #0
 8013976:	dd2a      	ble.n	80139ce <scalbnf+0x7e>
 8013978:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801397c:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8013980:	ee00 3a10 	vmov	s0, r3
 8013984:	ecbd 8b02 	vpop	{d8}
 8013988:	bd08      	pop	{r3, pc}
 801398a:	ecbd 8b02 	vpop	{d8}
 801398e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8013992:	bd08      	pop	{r3, pc}
 8013994:	4b1d      	ldr	r3, [pc, #116]	; (8013a0c <scalbnf+0xbc>)
 8013996:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8013a10 <scalbnf+0xc0>
 801399a:	4298      	cmp	r0, r3
 801399c:	ee20 0a27 	vmul.f32	s0, s0, s15
 80139a0:	db10      	blt.n	80139c4 <scalbnf+0x74>
 80139a2:	ee10 3a10 	vmov	r3, s0
 80139a6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80139aa:	3a19      	subs	r2, #25
 80139ac:	e7df      	b.n	801396e <scalbnf+0x1e>
 80139ae:	ed9f 8a19 	vldr	s16, [pc, #100]	; 8013a14 <scalbnf+0xc4>
 80139b2:	eef0 0a40 	vmov.f32	s1, s0
 80139b6:	eeb0 0a48 	vmov.f32	s0, s16
 80139ba:	f000 f831 	bl	8013a20 <copysignf>
 80139be:	ee20 0a08 	vmul.f32	s0, s0, s16
 80139c2:	e7df      	b.n	8013984 <scalbnf+0x34>
 80139c4:	eddf 0a14 	vldr	s1, [pc, #80]	; 8013a18 <scalbnf+0xc8>
 80139c8:	ee20 0a20 	vmul.f32	s0, s0, s1
 80139cc:	e7da      	b.n	8013984 <scalbnf+0x34>
 80139ce:	f112 0f16 	cmn.w	r2, #22
 80139d2:	da0e      	bge.n	80139f2 <scalbnf+0xa2>
 80139d4:	f24c 3350 	movw	r3, #50000	; 0xc350
 80139d8:	4298      	cmp	r0, r3
 80139da:	dce8      	bgt.n	80139ae <scalbnf+0x5e>
 80139dc:	ed9f 8a0e 	vldr	s16, [pc, #56]	; 8013a18 <scalbnf+0xc8>
 80139e0:	eef0 0a40 	vmov.f32	s1, s0
 80139e4:	eeb0 0a48 	vmov.f32	s0, s16
 80139e8:	f000 f81a 	bl	8013a20 <copysignf>
 80139ec:	ee20 0a08 	vmul.f32	s0, s0, s16
 80139f0:	e7c8      	b.n	8013984 <scalbnf+0x34>
 80139f2:	3219      	adds	r2, #25
 80139f4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80139f8:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80139fc:	eddf 7a07 	vldr	s15, [pc, #28]	; 8013a1c <scalbnf+0xcc>
 8013a00:	ee00 3a10 	vmov	s0, r3
 8013a04:	ee20 0a27 	vmul.f32	s0, s0, s15
 8013a08:	e7bc      	b.n	8013984 <scalbnf+0x34>
 8013a0a:	bf00      	nop
 8013a0c:	ffff3cb0 	.word	0xffff3cb0
 8013a10:	4c000000 	.word	0x4c000000
 8013a14:	7149f2ca 	.word	0x7149f2ca
 8013a18:	0da24260 	.word	0x0da24260
 8013a1c:	33000000 	.word	0x33000000

08013a20 <copysignf>:
 8013a20:	ee10 3a10 	vmov	r3, s0
 8013a24:	ee10 2a90 	vmov	r2, s1
 8013a28:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013a2c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8013a30:	4313      	orrs	r3, r2
 8013a32:	ee00 3a10 	vmov	s0, r3
 8013a36:	4770      	bx	lr
	...

08013a40 <__errno>:
 8013a40:	4b01      	ldr	r3, [pc, #4]	; (8013a48 <__errno+0x8>)
 8013a42:	6818      	ldr	r0, [r3, #0]
 8013a44:	4770      	bx	lr
 8013a46:	bf00      	nop
 8013a48:	20000814 	.word	0x20000814
 8013a4c:	00000000 	.word	0x00000000

08013a50 <memset>:
 8013a50:	b4f0      	push	{r4, r5, r6, r7}
 8013a52:	0786      	lsls	r6, r0, #30
 8013a54:	d043      	beq.n	8013ade <memset+0x8e>
 8013a56:	1e54      	subs	r4, r2, #1
 8013a58:	2a00      	cmp	r2, #0
 8013a5a:	d03e      	beq.n	8013ada <memset+0x8a>
 8013a5c:	b2ca      	uxtb	r2, r1
 8013a5e:	4603      	mov	r3, r0
 8013a60:	e002      	b.n	8013a68 <memset+0x18>
 8013a62:	f114 34ff 	adds.w	r4, r4, #4294967295
 8013a66:	d338      	bcc.n	8013ada <memset+0x8a>
 8013a68:	f803 2b01 	strb.w	r2, [r3], #1
 8013a6c:	079d      	lsls	r5, r3, #30
 8013a6e:	d1f8      	bne.n	8013a62 <memset+0x12>
 8013a70:	2c03      	cmp	r4, #3
 8013a72:	d92b      	bls.n	8013acc <memset+0x7c>
 8013a74:	b2cd      	uxtb	r5, r1
 8013a76:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8013a7a:	2c0f      	cmp	r4, #15
 8013a7c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8013a80:	d916      	bls.n	8013ab0 <memset+0x60>
 8013a82:	f1a4 0710 	sub.w	r7, r4, #16
 8013a86:	093f      	lsrs	r7, r7, #4
 8013a88:	f103 0620 	add.w	r6, r3, #32
 8013a8c:	eb06 1607 	add.w	r6, r6, r7, lsl #4
 8013a90:	f103 0210 	add.w	r2, r3, #16
 8013a94:	e942 5504 	strd	r5, r5, [r2, #-16]
 8013a98:	e942 5502 	strd	r5, r5, [r2, #-8]
 8013a9c:	3210      	adds	r2, #16
 8013a9e:	42b2      	cmp	r2, r6
 8013aa0:	d1f8      	bne.n	8013a94 <memset+0x44>
 8013aa2:	f004 040f 	and.w	r4, r4, #15
 8013aa6:	3701      	adds	r7, #1
 8013aa8:	2c03      	cmp	r4, #3
 8013aaa:	eb03 1307 	add.w	r3, r3, r7, lsl #4
 8013aae:	d90d      	bls.n	8013acc <memset+0x7c>
 8013ab0:	461e      	mov	r6, r3
 8013ab2:	4622      	mov	r2, r4
 8013ab4:	3a04      	subs	r2, #4
 8013ab6:	2a03      	cmp	r2, #3
 8013ab8:	f846 5b04 	str.w	r5, [r6], #4
 8013abc:	d8fa      	bhi.n	8013ab4 <memset+0x64>
 8013abe:	1f22      	subs	r2, r4, #4
 8013ac0:	f022 0203 	bic.w	r2, r2, #3
 8013ac4:	3204      	adds	r2, #4
 8013ac6:	4413      	add	r3, r2
 8013ac8:	f004 0403 	and.w	r4, r4, #3
 8013acc:	b12c      	cbz	r4, 8013ada <memset+0x8a>
 8013ace:	b2c9      	uxtb	r1, r1
 8013ad0:	441c      	add	r4, r3
 8013ad2:	f803 1b01 	strb.w	r1, [r3], #1
 8013ad6:	429c      	cmp	r4, r3
 8013ad8:	d1fb      	bne.n	8013ad2 <memset+0x82>
 8013ada:	bcf0      	pop	{r4, r5, r6, r7}
 8013adc:	4770      	bx	lr
 8013ade:	4614      	mov	r4, r2
 8013ae0:	4603      	mov	r3, r0
 8013ae2:	e7c5      	b.n	8013a70 <memset+0x20>
	...
 8013af0:	656c6469 	.word	0x656c6469
	...

08013b00 <ch_debug>:
 8013b00:	6e69616d 18011600 08480404 1814100c     main......H.....
 8013b10:	1e1d1c00 0000201f 00000000 00000000     ..... ..........

08013b20 <vmt>:
 8013b20:	0800d851 0800d831 0800d891 0800d871     Q...1.......q...
 8013b30:	0800d881 0800d861 0800d841 0800d821     ....a...A...!...

08013b40 <active_status>:
	...

08013b50 <halted_status>:
 8013b50:	00000001 00000000 00000000 00000000     ................

08013b60 <zero_status>:
	...

08013b70 <_stm32_dma_streams>:
 8013b70:	40026010 40026008 000b0000 40026028     .`.@.`.@....(`.@
 8013b80:	40026008 000c0106 40026040 40026008     .`.@....@`.@.`.@
 8013b90:	000d0210 40026058 40026008 000e0316     ....X`.@.`.@....
 8013ba0:	40026070 4002600c 000f0400 40026088     p`.@.`.@.....`.@
 8013bb0:	4002600c 00100506 400260a0 4002600c     .`.@.....`.@.`.@
 8013bc0:	00110610 400260b8 4002600c 002f0716     .....`.@.`.@../.
 8013bd0:	40026410 40026408 00380800 40026428     .d.@.d.@..8.(d.@
 8013be0:	40026408 00390906 40026440 40026408     .d.@..9.@d.@.d.@
 8013bf0:	003a0a10 40026458 40026408 003b0b16     ..:.Xd.@.d.@..;.
 8013c00:	40026470 4002640c 003c0c00 40026488     pd.@.d.@..<..d.@
 8013c10:	4002640c 00440d06 400264a0 4002640c     .d.@..D..d.@.d.@
 8013c20:	00450e10 400264b8 4002640c 00460f16     ..E..d.@.d.@..F.

08013c30 <ep0config>:
 8013c30:	00000000 0800da01 0800dd41 0800de31     ........A...1...
 8013c40:	00400040 20001230 20001230 00000001     @.@.0.. 0.. ....
 8013c50:	20001244 00000000 00000000 00000000     D.. ............

08013c60 <fsparams>:
 8013c60:	00000080 00000140 00000003 00000000     ....@...........

08013c70 <default_config>:
 8013c70:	00009600 40000000 00000000 00000000     .......@........

08013c80 <pal_default_config>:
 8013c80:	2aa0aa00 00000000 ffffabff 40010054     ...*........T..@
 8013c90:	0000ffff 55560000 000aaa00 00082080     ......VU..... ..
 8013ca0:	00000240 ffffffff 55514515 0000ffff     @........EQU....
 8013cb0:	04000000 00000040 02208001 00000000     ....@..... .....
 8013cc0:	ffffffff 54451554 0000ffff 60000000     ....T.ET.......`
 8013cd0:	00060600 55000100 00000000 ffffffff     .......U........
 8013ce0:	00555055 00000fff 00000000 00000000     UPU.............
 8013cf0:	00000040 00000000 ffffffff 00000000     @...............
 8013d00:	0000ffff 00000000 00000000 00000000     ................
 8013d10:	00000000 ffffffff 00000000 0000ffff     ................
	...
 8013d30:	ffffffff 00000000 0000ffff 00000000     ................
	...
 8013d4c:	ffffffff 00000000 0000ffff 00000000     ................
	...
 8013d68:	ffffffff 00000000 0000ffff 00000000     ................
	...
 8013d80:	6c756e28 0000296c 00000000 00000000     (null)..........

08013d90 <pow10>:
 8013d90:	0000000a 00000064 000003e8 00002710     ....d........'..
 8013da0:	000186a0 000f4240 00989680 05f5e100     ....@B..........
 8013db0:	3b9aca00 00000000 00000000 00000000     ...;............
 8013dc0:	6d206f74 6e695f63 66726574 20656361     to mc_interface 
 8013dd0:	6d203e2d 6d777063 696e695f 000a0d74     -> mcpwm_init...
 8013de0:	745f636d 72656d69 00000000 25096425     mc_timer....%d.%
 8013df0:	00000964 0d096425 0000000a 00000000     d...%d..........
 8013e00:	706d6153 6553656c 7265646e 00000000     SampleSender....

08013e10 <flash_addr>:
 8013e10:	08000000 08004000 08008000 0800c000     .....@..........
 8013e20:	08010000 08020000 08040000 08060000     ................
 8013e30:	08080000 080a0000 080c0000 080e0000     ................

08013e40 <flash_sector>:
 8013e40:	00080000 00180010 00280020 00380030     ........ .(.0.8.
 8013e50:	00480040 00580050 00000000 00000000     @.H.P.X.........
 8013e60:	656d6954 0074756f 00000000 00000000     Timeout.........
 8013e70:	4a325b1b 3b305b1b 00004830 636f726f     .[2J.[0;0H..oroc
 8013e80:	6c625f61 0a0d6364 00000000 00000000     a_bldc..........
 8013e90:	43444c42 72657020 69646f69 00000063     BLDC periodic...
 8013ea0:	6365736d 6d69745f 00007265 00000000     msec_timer......

08013eb0 <__logf_data>:
 8013eb0:	79f8f3be 3ff661ec 808caade bfd57bf7     ...y.a.?.....{..
 8013ec0:	4aaf883d 3ff571ed a7c06ddb bfd2bef0     =..J.q.?.m......
 8013ed0:	f0f010b0 3ff49539 7f513a67 bfd01eae     ....9..?g:Q.....
 8013ee0:	b0b80385 3ff3c995 a68224e9 bfcb31d8     .......?.$...1..
 8013ef0:	0c8864a5 3ff30d19 0ac07758 bfc6574f     .d.....?Xw..OW..
 8013f00:	7b0b8ea0 3ff25e22 c79c8100 bfc1aa2b     ...{"^.?....+...
 8013f10:	4a1a343f 3ff1bb4a ce8c0e5e bfba4e76     ?4.JJ..?^...vN..
 8013f20:	f08ae5ba 3ff12358 5a611ccc bfb1973c     ....X#.?..aZ<...
 8013f30:	419900a7 3ff0953f 38e10c1e bfa252f4     ...A?..?...8.R..
 8013f40:	00000000 3ff00000 00000000 00000000     .......?........
 8013f50:	fd9a47ac 3fee608c 5df25984 3faaa5aa     .G...`.?.Y.]...?
 8013f60:	1f026aa0 3feca4b3 aa362eb4 3fbc5e53     .j.....?..6.S^.?
 8013f70:	576afce6 3feb2036 7720db08 3fc526e5     ..jW6 .?.. w.&.?
 8013f80:	63a1aa2d 3fe9c2d1 0d224770 3fcbc286     -..c...?pG"....?
 8013f90:	037841ed 3fe886e6 c8a07ee1 3fd1058b     .Ax....?.~.....?
 8013fa0:	f5534862 3fe767dc 57b6ee09 3fd40430     bHS..g.?...W0..?
 8013fb0:	fefa39ef 3fe62e42 48b88334 bfd00ea3     .9..B..?4..H....
 8013fc0:	0be00b6a 3fd5575b f20a4123 bfdffffe     j...[W.?#A......

08013fd0 <__powf_log2_data>:
 8013fd0:	79f8f3be 3ff661ec 5b963019 bfdefec6     ...y.a.?.0.[....
 8013fe0:	4aaf883d 3ff571ed 32d4fca4 bfdb0b68     =..J.q.?...2h...
 8013ff0:	f0f010b0 3ff49539 0a1fb77b bfd7418b     ....9..?{....A..
 8014000:	b0b80385 3ff3c995 1a6dcf7b bfd39de9     .......?{.m.....
 8014010:	0c8864a5 3ff30d19 f3f2b631 bfd01d9b     .d.....?1.......
 8014020:	7b0b8ea0 3ff25e22 1b3b7af0 bfc97c1d     ...{"^.?.z;..|..
 8014030:	4a1a343f 3ff1bb4a 93af3c9f bfc2f9e3     ?4.JJ..?.<......
 8014040:	f08ae5ba 3ff12358 bf788d5c bfb960cb     ....X#.?\.x..`..
 8014050:	419900a7 3ff0953f b6475fce bfaa6f9d     ...A?..?._G..o..
 8014060:	00000000 3ff00000 00000000 00000000     .......?........
 8014070:	fd9a47ac 3fee608c 9f24f53d 3fb338ca     .G...`.?=.$..8.?
 8014080:	1f026aa0 3feca4b3 543891ba 3fc476a9     .j.....?..8T.v.?
 8014090:	576afce6 3feb2036 4ac4e4d2 3fce840b     ..jW6 .?...J...?
 80140a0:	63a1aa2d 3fe9c2d1 f0c6651c 3fd40645     -..c...?.e..E..?
 80140b0:	037841ed 3fe886e6 2c1b9ff8 3fd88e9c     .Ax....?...,...?
 80140c0:	f5534862 3fe767dc 4eb17bcc 3fdce0a4     bHS..g.?.{.N...?
 80140d0:	c9496e0b 3fd27616 a075c67a bfd71969     .nI..v.?z.u.i...
 80140e0:	6ca7badd 3fdec70a 48bef6c8 bfe71547     ...l...?...HG...
 80140f0:	652ab82b 3ff71547 00000000 00000000     +.*eG..?........
 8014100:	646f6d66 00000066 00000000 00000000     fmodf...........
 8014110:	74727173 00000066 00000000 00000000     sqrtf...........

08014120 <Zero>:
 8014120:	00000000 80000000 00000000 00000000     ................

08014130 <npio2_hw>:
 8014130:	3fc90f00 40490f00 4096cb00 40c90f00     ...?..I@...@...@
 8014140:	40fb5300 4116cb00 412fed00 41490f00     .S.@...A../A..IA
 8014150:	41623100 417b5300 418a3a00 4196cb00     .1bA.S{A.:.A...A
 8014160:	41a35c00 41afed00 41bc7e00 41c90f00     .\.A...A.~.A...A
 8014170:	41d5a000 41e23100 41eec200 41fb5300     ...A.1.A...A.S.A
 8014180:	4203f200 420a3a00 42108300 4216cb00     ...B.:.B...B...B
 8014190:	421d1400 42235c00 4229a500 422fed00     ...B.\#B..)B../B
 80141a0:	42363600 423c7e00 4242c700 42490f00     .66B.~<B..BB..IB

080141b0 <two_over_pi>:
 80141b0:	000000a2 000000f9 00000083 0000006e     ............n...
 80141c0:	0000004e 00000044 00000015 00000029     N...D.......)...
 80141d0:	000000fc 00000027 00000057 000000d1     ....'...W.......
 80141e0:	000000f5 00000034 000000dd 000000c0     ....4...........
 80141f0:	000000db 00000062 00000095 00000099     ....b...........
 8014200:	0000003c 00000043 00000090 00000041     <...C.......A...
 8014210:	000000fe 00000051 00000063 000000ab     ....Q...c.......
 8014220:	000000de 000000bb 000000c5 00000061     ............a...
 8014230:	000000b7 00000024 0000006e 0000003a     ....$...n...:...
 8014240:	00000042 0000004d 000000d2 000000e0     B...M...........
 8014250:	00000006 00000049 0000002e 000000ea     ....I...........
 8014260:	00000009 000000d1 00000092 0000001c     ................
 8014270:	000000fe 0000001d 000000eb 0000001c     ................
 8014280:	000000b1 00000029 000000a7 0000003e     ....).......>...
 8014290:	000000e8 00000082 00000035 000000f5     ........5.......
 80142a0:	0000002e 000000bb 00000044 00000084     ........D.......
 80142b0:	000000e9 0000009c 00000070 00000026     ........p...&...
 80142c0:	000000b4 0000005f 0000007e 00000041     ...._...~...A...
 80142d0:	00000039 00000091 000000d6 00000039     9...........9...
 80142e0:	00000083 00000053 00000039 000000f4     ....S...9.......
 80142f0:	0000009c 00000084 0000005f 0000008b     ........_.......
 8014300:	000000bd 000000f9 00000028 0000003b     ........(...;...
 8014310:	0000001f 000000f8 00000097 000000ff     ................
 8014320:	000000de 00000005 00000098 0000000f     ................
 8014330:	000000ef 0000002f 00000011 0000008b     ..../...........
 8014340:	0000005a 0000000a 0000006d 0000001f     Z.......m.......
 8014350:	0000006d 00000036 0000007e 000000cf     m...6...~.......
 8014360:	00000027 000000cb 00000009 000000b7     '...............
 8014370:	0000004f 00000046 0000003f 00000066     O...F...?...f...
 8014380:	0000009e 0000005f 000000ea 0000002d     ...._.......-...
 8014390:	00000075 00000027 000000ba 000000c7     u...'...........
 80143a0:	000000eb 000000e5 000000f1 0000007b     ............{...
 80143b0:	0000003d 00000007 00000039 000000f7     =.......9.......
 80143c0:	0000008a 00000052 00000092 000000ea     ....R...........
 80143d0:	0000006b 000000fb 0000005f 000000b1     k......._.......
 80143e0:	0000001f 0000008d 0000005d 00000008     ........].......
 80143f0:	00000056 00000003 00000030 00000046     V.......0...F...
 8014400:	000000fc 0000007b 0000006b 000000ab     ....{...k.......
 8014410:	000000f0 000000cf 000000bc 00000020     ............ ...
 8014420:	0000009a 000000f4 00000036 0000001d     ........6.......
 8014430:	000000a9 000000e3 00000091 00000061     ............a...
 8014440:	0000005e 000000e6 0000001b 00000008     ^...............
 8014450:	00000065 00000099 00000085 0000005f     e..........._...
 8014460:	00000014 000000a0 00000068 00000040     ........h...@...
 8014470:	0000008d 000000ff 000000d8 00000080     ................
 8014480:	0000004d 00000073 00000027 00000031     M...s...'...1...
 8014490:	00000006 00000006 00000015 00000056     ............V...
 80144a0:	000000ca 00000073 000000a8 000000c9     ....s...........
 80144b0:	00000060 000000e2 0000007b 000000c0     `.......{.......
 80144c0:	0000008c 0000006b 00000000 00000000     ....k...........

080144d0 <PIo2>:
 80144d0:	3fc90000 39f00000 37da0000 33a20000     ...?...9...7...3
 80144e0:	2e840000 2b500000 27c20000 22d00000     ......P+...'..."
 80144f0:	1fc40000 1bc60000 17440000 00000000     ..........D.....

08014500 <init_jk>:
 8014500:	00000004 00000007 00000009 00000000     ................

08014510 <__exp2f_data>:
 8014510:	00000000 3ff00000 d3158574 3fefd9b0     .......?t......?
 8014520:	6cf9890f 3fefb558 d0125b51 3fef9301     ...lX..?Q[.....?
 8014530:	3c7d517b 3fef72b8 3168b9aa 3fef5487     {Q}<.r.?..h1.T.?
 8014540:	6e756238 3fef387a f51fdee1 3fef1e9d     8bunz8.?.......?
 8014550:	0a31b715 3fef06fe 373aa9cb 3feef1a7     ..1....?..:7...?
 8014560:	4c123422 3feedea6 6061892d 3feece08     "4.L...?-.a`...?
 8014570:	d5362a27 3feebfda 569d4f82 3feeb42b     '*6....?.O.V+..?
 8014580:	dd485429 3feeab07 b03a5585 3feea47e     )TH....?.U:.~..?
 8014590:	667f3bcd 3feea09e e8ec5f74 3fee9f75     .;.f...?t_..u..?
 80145a0:	73eb0187 3feea114 994cce13 3feea589     ...s...?..L....?
 80145b0:	422aa0db 3feeace5 b0cdc5e5 3feeb737     ..*B...?....7..?
 80145c0:	82a3f090 3feec491 b23e255d 3feed503     .......?]%>....?
 80145d0:	995ad3ad 3feee89f f2fb5e47 3feeff76     ..Z....?G^..v..?
 80145e0:	dd85529c 3fef199b dcef9069 3fef3720     .R.....?i... 7.?
 80145f0:	dcfba487 3fef5818 337b9b5f 3fef7c97     .....X.?_.{3.|.?
 8014600:	a2a490da 3fefa4af 5b6e4540 3fefd076     .......?@En[v..?
 8014610:	00000000 42e80000 4b912394 3fac6af8     .......B.#.K.j.?
 8014620:	50fac4f3 3fcebfce ff0c52d6 3fe62e42     ...P...?.R..B..?
 8014630:	00000000 43380000 652b82fe 40471547     ......8C..+eG.G@
 8014640:	4b912394 3ebc6af8 50fac4f3 3f2ebfce     .#.K.j.>...P...?
 8014650:	ff0c52d6 3f962e42                       .R..B..?
